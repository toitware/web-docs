{"version":3,"file":"839-8aaacea26564497da7a8.js","mappings":"6FAOG,SAAUA,GACX,aAEA,IAAIC,EAAa,wBACbC,EAAa,mCACbC,EAAa,+BAkBjB,SAASC,EAAiBC,GACxB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAGE,MAAMC,YAAYC,OAAQH,IAC/CD,EAAGK,gBAAgBL,EAAGE,MAAMC,YAAYF,GAAI,OAAQL,GACpDI,EAAGK,gBAAgBL,EAAGE,MAAMC,YAAYF,GAAI,aAAcJ,GAC1DG,EAAGK,gBAAgBL,EAAGE,MAAMC,YAAYF,GAAI,SAAUH,EAE1D,CAEA,SAASQ,EAAUC,EAAGC,GACpB,GAAID,EAAEH,QAAUI,EAAEJ,OAAQ,OAAO,EAEjC,IAAK,IAAIH,EAAI,EAAGA,EAAIM,EAAEH,OAAQH,IAAK,GAAIM,EAAEN,IAAMO,EAAEP,GAAI,OAAO,EAE5D,OAAO,CACT,CAEA,SAASQ,EAAkBT,EAAIU,GAG7B,IAFA,IAAIC,EAAS,GAEJV,EAAI,EAAGA,EAAIS,EAAON,OAAQH,IAAK,CACtC,IAAIW,EAAQF,EAAOT,GACfY,EAASb,EAAGc,UAAU,mBAC1B,GAAqB,iBAAVD,GAAsBA,EAAOE,SAAWH,EAAMI,OAAOC,MAAQL,EAAMM,KAAKD,KAAQL,EAAMO,QAAjG,CACA,IAAIF,EAAOjB,EAAGoB,yBAAyBR,EAAMM,KAAKD,MAC9CN,EAAOA,EAAOP,OAAS,IAAMa,GAAMN,EAAOU,KAAKJ,EAF+D,CAGpH,CAEIX,EAAUN,EAAGE,MAAMC,YAAaQ,IACpCX,EAAGsB,WAAU,WACXvB,EAAiBC,GAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAIU,EAAOP,OAAQH,IACjCD,EAAGuB,aAAaZ,EAAOV,GAAI,OAAQL,GACnCI,EAAGuB,aAAaZ,EAAOV,GAAI,aAAcJ,GACzCG,EAAGuB,aAAaZ,EAAOV,GAAI,SAAUH,GAGvCE,EAAGE,MAAMC,YAAcQ,CACzB,GACF,CAEA,SAASa,EAAgBxB,EAAIyB,GAC3BhB,EAAkBT,EAAIyB,EAAIf,OAC5B,CA5DAf,EAAW+B,aAAa,mBAAmB,GAAO,SAAU1B,EAAI2B,EAAKC,GACnE,IAAIC,EAAOD,GAAOjC,EAAWmC,MAAeF,EACxCD,GAAOE,IAEPA,IACF7B,EAAG+B,IAAI,wBAAyBP,GAChCzB,EAAiBC,UACVA,EAAGE,MAAMC,aAGdwB,IACF3B,EAAGE,MAAMC,YAAc,GACvBM,EAAkBT,EAAIA,EAAGgC,kBACzBhC,EAAGiC,GAAG,wBAAyBT,IAEnC,GA8CF,CAtEIU,CAAI,EAAQ,M","sources":["webpack://web-docs/./node_modules/codemirror/addon/selection/active-line.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var WRAP_CLASS = \"CodeMirror-activeline\";\n  var BACK_CLASS = \"CodeMirror-activeline-background\";\n  var GUTT_CLASS = \"CodeMirror-activeline-gutter\";\n  CodeMirror.defineOption(\"styleActiveLine\", false, function (cm, val, old) {\n    var prev = old == CodeMirror.Init ? false : old;\n    if (val == prev) return;\n\n    if (prev) {\n      cm.off(\"beforeSelectionChange\", selectionChange);\n      clearActiveLines(cm);\n      delete cm.state.activeLines;\n    }\n\n    if (val) {\n      cm.state.activeLines = [];\n      updateActiveLines(cm, cm.listSelections());\n      cm.on(\"beforeSelectionChange\", selectionChange);\n    }\n  });\n\n  function clearActiveLines(cm) {\n    for (var i = 0; i < cm.state.activeLines.length; i++) {\n      cm.removeLineClass(cm.state.activeLines[i], \"wrap\", WRAP_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"background\", BACK_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"gutter\", GUTT_CLASS);\n    }\n  }\n\n  function sameArray(a, b) {\n    if (a.length != b.length) return false;\n\n    for (var i = 0; i < a.length; i++) if (a[i] != b[i]) return false;\n\n    return true;\n  }\n\n  function updateActiveLines(cm, ranges) {\n    var active = [];\n\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var option = cm.getOption(\"styleActiveLine\");\n      if (typeof option == \"object\" && option.nonEmpty ? range.anchor.line != range.head.line : !range.empty()) continue;\n      var line = cm.getLineHandleVisualStart(range.head.line);\n      if (active[active.length - 1] != line) active.push(line);\n    }\n\n    if (sameArray(cm.state.activeLines, active)) return;\n    cm.operation(function () {\n      clearActiveLines(cm);\n\n      for (var i = 0; i < active.length; i++) {\n        cm.addLineClass(active[i], \"wrap\", WRAP_CLASS);\n        cm.addLineClass(active[i], \"background\", BACK_CLASS);\n        cm.addLineClass(active[i], \"gutter\", GUTT_CLASS);\n      }\n\n      cm.state.activeLines = active;\n    });\n  }\n\n  function selectionChange(cm, sel) {\n    updateActiveLines(cm, sel.ranges);\n  }\n});"],"names":["CodeMirror","WRAP_CLASS","BACK_CLASS","GUTT_CLASS","clearActiveLines","cm","i","state","activeLines","length","removeLineClass","sameArray","a","b","updateActiveLines","ranges","active","range","option","getOption","nonEmpty","anchor","line","head","empty","getLineHandleVisualStart","push","operation","addLineClass","selectionChange","sel","defineOption","val","old","prev","Init","off","listSelections","on","mod"],"sourceRoot":""}