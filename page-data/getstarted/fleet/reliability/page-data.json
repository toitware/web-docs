{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/getstarted/fleet/reliability",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"reliability\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#reliability\",\n    \"aria-label\": \"reliability permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Reliability`), mdx(\"p\", null, `The most important job of Artemis is to keep devices updatable. Since updates\nare delivered through the broker, it is critical that the device can reach the broker.`), mdx(\"h2\", {\n    \"id\": \"strategy\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#strategy\",\n    \"aria-label\": \"strategy permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Strategy`), mdx(\"p\", null, `The Artemis service that is installed on the devices periodically downloads its\nconfiguration from the broker.`), mdx(\"p\", null, `If the device can't reach the broker, it will retry more and more aggressively.\nFirst it will reduce the interval between\ncheck-ins. At some point, it will turn off non-critical containers during connection\nattempts. Eventually, it will even disable critical containers for a short period of time.`), mdx(\"p\", null, `All of these measures don't help if the broker is not available anymore. In that case,\nthe device attempts to reach a recovery URL. This URL can provide a new broker\nconfiguration, allowing the device to connect again.`), mdx(\"p\", null, `Being able to contact the broker means that the device can fetch new configurations,\nand, hopefully, also firmware. However, any new firmware isn't guaranteed to be able\nto do the same. As such, Artemis only commits to a new firmware after it has\nsuccessfully connected to the broker with the new firmware.`), mdx(\"p\", null, `As a last resort, Artemis also uses a watchdog. If the device can't connect to the\nbroker for a long time, the watchdog will trigger and reboot the device. This also\nguards against the Artemis service itself getting into a bad state.`), mdx(\"h2\", {\n    \"id\": \"max-offline\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#max-offline\",\n    \"aria-label\": \"max offline permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Max offline`), mdx(\"p\", null, `The frequency at which Artemis contacts the broker can be configured using the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `max-offline`), ` setting in the pod specification. A value of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `0s`), ` means that the\ndevice stays connected to the broker and polls it continuously (but at most\nevery 20 seconds). A value of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `1h`), ` means that the device can be offline for\nup to an hour before it tries to reconnect.`), mdx(\"p\", null, `Here is a pod specification with a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `max-offline`), ` value of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `1h`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, `# yaml-language-server: $schema=https://toit.io/schemas/artemis/pod-specification/v1.json\n\n$schema: https://toit.io/schemas/artemis/pod-specification/v1.json\nname: my-pod\nsdk-version: v2.0.0-alpha.163\nartemis-version: v0.25.0\nmax-offline: 1h\nfirmware-envelope: x64-linux\ncontainers: {}\n`)), mdx(\"p\", null, `The max-offline value can also be set using the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `artemis`), ` CLI:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, `artemis device -d DEVICE-ID set-max-offline 1h\n`)), mdx(\"p\", null, `This configuration change is not permanent and will be lost with the next firmware update.`), mdx(\"h2\", {\n    \"id\": \"status-states\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#status-states\",\n    \"aria-label\": \"status states permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Status states`), mdx(\"p\", null, `The Artemis service on the device keeps track of its connection status. It is either\ngreen, yellow, orange or red. As of September 2024, the following heuristics are used\nto determine the status:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `green: the device is within the `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `max-offline`), ` window.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `yellow: the device is outside the `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `max-offline`), ` window, but within a factor of 2. For\nexample, if `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `max-offline`), ` is set to 1h, then the device is in yellow state if it hasn't\nconnected for more than 1h, but less than 2h.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `orange: the device is outside the `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `max-offline`), ` window, but within a factor of 3.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `red: the device is outside the `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `max-offline`), ` window, and has been for more than 3 times\nthe `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `max-offline`), ` value.`)), mdx(\"p\", null, `The following actions (again, as of September 2024) are taken based on the status.`), mdx(\"h3\", {\n    \"id\": \"orange\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#orange\",\n    \"aria-label\": \"orange permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Orange`), mdx(\"p\", null, `When a device is in orange state, Artemis reduces the interval between reconnection\nattempts by 50%. For example, if `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `max-offline`), ` is set to 1h, then the device will\ntry to reconnect every 30 minutes.`), mdx(\"p\", null, `Artemis also disables all non-critical containers during reconnection attempts.`), mdx(\"p\", null, `In this state, Artemis always tries a random entry from the recovery-URLs list to\nget a new broker configuration.`), mdx(\"h3\", {\n    \"id\": \"red\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#red\",\n    \"aria-label\": \"red permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Red`), mdx(\"p\", null, `Devices that can't connect to the broker for a long time are put into red state.`), mdx(\"p\", null, `The red state is a more extreme version of the orange state. Artemis will reduce the\nreconnect interval by a factor of 4. For example, if `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `max-offline`), ` is\nset to 1h, then the device will try to reconnect every 15 minutes.`), mdx(\"p\", null, `As for the orange state, Artemis disables all non-critical containers during\nreconnection attempts. However, now Artemis also disables critical containers\n15% of the time.`), mdx(\"p\", null, `Contrary to the orange state, Artemis does not always contact the recovery URL.\nIn case the recovery-URL connection makes things worse Artemis only fetches\nrecovery URLs 20% of the time.`), mdx(\"h2\", {\n    \"id\": \"recovery-urls\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#recovery-urls\",\n    \"aria-label\": \"recovery urls permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Recovery URLs`), mdx(\"p\", null, `Even though recovery URLs are baked into pods, they are stored as properties of\nthe fleet. We don't expect recovery URLs to change often, and having them in the\nfleet configuration avoids duplication.`), mdx(\"p\", null, `A recovery URL can be added to an existing fleet with the following command:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, `artemis fleet recovery add RECOVERY-URL\n`)), mdx(\"p\", null, `If the existing broker for a device doesn't exist anymore, then the device can\nuse the recovery URL to get a new broker configuration. The new broker configuration\ncan be generated by running `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `artemis fleet recovery export -o recovery.json`), ` and\nserving the resulting `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `recovery.json`), ` file at the recovery URL.`), mdx(\"p\", null, `We recommend to use a different domain as recovery URL. This way, the recovery URL\nis not affected by the same issues as the main broker.`), mdx(\"p\", null, `Note that recovery URLs don't need to be online until they are needed.`), mdx(\"h2\", {\n    \"id\": \"watchdogs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#watchdogs\",\n    \"aria-label\": \"watchdogs permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Watchdogs`), mdx(\"p\", null, `As mentioned earlier, Artemis uses watchdogs to monitor its own health. Given a\ncertain `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `max-offline`), ` value, the watchdog will trigger if the device hasn't connected\nto the broker for more than 5 times the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `max-offline`), ` value (or at least 2 hours, if\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `max-offline`), ` is small).`), mdx(\"p\", null, `This watchdog is a powerful last resort in that it handles many different failures. If\nArtemis itself gets into a bad state the watchdog will eventually help to recover.\nSimilarly, user programs can communicate with the Artemis service through the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Ftoit-artemis\"\n  }, `Artemis\npackage`), ` and a bug\nin the user program could accidentally disallow Artemis to connect to the broker.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#reliability","title":"Reliability","items":[{"url":"#strategy","title":"Strategy"},{"url":"#max-offline","title":"Max offline"},{"url":"#status-states","title":"Status states","items":[{"url":"#orange","title":"Orange"},{"url":"#red","title":"Red"}]},{"url":"#recovery-urls","title":"Recovery URLs"},{"url":"#watchdogs","title":"Watchdogs"}]}]}}},"pageContext":{"title":"Reliability","id":"a3a5df1a-52b3-5e7f-9f4c-fa5a7b0866dc"}},
    "staticQueryHashes": ["2197327828"]}