{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/getstarted/fleet/pods",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"pods\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#pods\",\n    \"aria-label\": \"pods permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Pods`), mdx(\"p\", null, `Artemis allows you to build and distribute pods (as in a pod of whales or pea pod).\nA pod is a set of containers, with shared storage and network resources, and a\ndescription of how to run the containers. Pods are built from declarative specifications\nand they form the basis of Artemis' synchronization mechanisms.`), mdx(\"h2\", {\n    \"id\": \"building\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#building\",\n    \"aria-label\": \"building permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Building`), mdx(\"p\", null, `Pods are built from `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#specifications\"\n  }, `specifications`), `. Once built, the pods are\nself-contained and have no external dependencies. This makes them ideal for\ndeployment and for archiving. To build a pod from a specification, you invoke\nthe `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `artemis pod build`), ` command like this:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, `artemis pod build -o my-pod.pod my-pod.yaml\n`)), mdx(\"p\", null, `Pods contain symbolic debug information, so it is useful to keep them around\nafter having deployed them. This is easy to achieve by `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#uploading\"\n  }, `uploading`), `\nthem to your broker.`), mdx(\"h2\", {\n    \"id\": \"uploading\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#uploading\",\n    \"aria-label\": \"uploading permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Uploading`), mdx(\"p\", null, `Pods are named and they can be uploaded to your fleet using the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `artemis pod upload`), ` command:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, `artemis pod upload my-pod.pod\n`)), mdx(\"p\", null, `This creates a new revision of the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `my-pod`), ` pod and automatically tags it\nwith the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `latest`), ` tag and a generated tag like `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `20230515175710-broad-method`), `.\nThe first component is a timestamp and the last component is a random name\nthat makes it easier to refer to the generated tag.`), mdx(\"p\", null, `You can specify the tags when you upload, so you can associate more meaningful\ntags with your pod revisions. It is common to use a versioning scheme for the\ntags, so you can compare them more easily using something like `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://semver.org/\"\n  }, `semantic versioning`), `.`), mdx(\"p\", null, `To upload `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `my-pod.pod`), ` with the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `v1.0.2`), ` tag, you can use:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, `artemis pod upload my-pod.pod --tag v1.0.2\n`)), mdx(\"p\", null, `You can upload multiple pods at the same time, so if you have more than one\ndevice group that run your code in different configurations, it is straightforward\nto give them the same tag:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, `artemis pod upload group-0.pod group-1.pod --tag v2.0.0-pre.3\n`)), mdx(\"p\", null, `You can always see the available pods and their tags through:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, `artemis pod list --name my-pod\n`)), mdx(\"h2\", {\n    \"id\": \"referring-to-pods\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#referring-to-pods\",\n    \"aria-label\": \"referring to pods permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Referring to pods`), mdx(\"p\", null, `You can refer to a pod using its name and revision `, `—`, ` like `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `my-pod#4`), ` `, `—`, ` but\nit is more common to use a tagged reference such as `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `my-pod@latest`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `my-pod@v1.0.3`), `.`), mdx(\"p\", null, `Such pod references are used when updating or flashing a single device:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, `artemis device update my-pod@v1.0.3\n`)), mdx(\"p\", null, `or more commonly indirectly through the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/getstarted/fleet/groups\"\n  }, `groups`), ` in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `fleet.json`), ` file:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, `{\n  ...\n  \"groups\": {\n    \"office\": {\n      \"pod\": \"wifi-esp32@v2.0.1\"\n    },\n    \"solar-farm-fr-nce\": {\n      \"pod\": \"cellular-esp32s3@2.0.2-pre.7\"\n    }\n  }\n}\n`)), mdx(\"p\", null, `It is also possible to refer to pods by ID and you can find such IDs in pod lists. To\nupdate a device to a pod by ID, you can use:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, `artemis device update 0f587f04-a0e2-5354-ac3d-ceca41a60b63\n`)), mdx(\"h2\", {\n    \"id\": \"specifications\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#specifications\",\n    \"aria-label\": \"specifications permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Specifications`), mdx(\"p\", null, `You can find an example pod specification file in\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitware/artemis-releases/blob/main/examples/specification.yaml\"\n  }, `specification.yaml`), `.\nIt is in YAML format and looks similar to this:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, `# yaml-language-server: $schema=https://toit.io/schemas/artemis/pod-specification/v1.json\n\n$schema: https://toit.io/schemas/artemis/pod-specification/v1.json\nname: example\nsdk-version: v2.0.0-alpha.163\nartemis-version: v0.25.0\nmax-offline: 0s\nconnections:\n  - type: wifi\n    ssid: YOUR-WIFI-SSID\n    password: YOUR-WIFI-PASSWORD\ncontainers:\n  hello:\n    entrypoint: hello.toit\n  solar:\n    entrypoint: examples/solar_example.toit\n    git: https://github.com/toitware/toit-solar-position.git\n    branch: v0.0.3\n`)), mdx(\"p\", null, `The three version entries are for the specification format (always `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `1`), ` for now) and the\nSDK and Artemis versions. Be aware that not all combinations of those are supported and\nuse `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `artemis sdk list`), ` to see the valid combinations.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `max-offline`), ` entry is optional and defaults to 0s. Use it to control for how\nlong your device is allowed to stay offline.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `connections`), ` section contains a prioritized list of ways to connect to the\nInternet. You can have multiple `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `wifi`), ` entries and Artemis will attempt to\nconnect to them in the specified order.`), mdx(\"p\", null, `It is also possible to have `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `cellular`), ` entries in `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `connections`), `, but for that to\nwork you'll need to have a cellular driver installed as one of your containers.\nYou can find a few drivers in the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitware/cellular\"\n  }, `cellular package`), `.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `containers`), ` section contains named entries for the containers\nyou want on your device. The containers that are built from source\ncode have an `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `entrypoint`), ` that refers to the file that has the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `main`), ` method. You can optionally pull the source code directly\nfrom git using `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `git`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `branch`), `.`), mdx(\"p\", null, `If your container is a driver or provides services for other\ncontainers, you probably want to start it on boot and let it\nrun until no other container runs. For that to work, you can\nmake it a background container that is automatically terminated\nwhen the device goes to sleep like this:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, `containers:\n  cellular:\n    entrypoint: src/modules/sequans/monarch.toit\n    git: https://github.com/toitware/cellular.git\n    branch: v2.1.12\n    background: true\n    critical: true\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `critical`), ` flag makes the container run continuously. If you want your container\nto run periodically, you can specify interval triggers in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `containers`), ` section\nlike this:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, `containers:\n  measure:\n    entrypoint: measure.toit\n    triggers:\n      - interval: 20s\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#pods","title":"Pods","items":[{"url":"#building","title":"Building"},{"url":"#uploading","title":"Uploading"},{"url":"#referring-to-pods","title":"Referring to pods"},{"url":"#specifications","title":"Specifications"}]}]}}},"pageContext":{"title":"Pods","id":"11178710-7927-5b8d-a49a-6f52e397c288"}},
    "staticQueryHashes": ["2197327828"]}