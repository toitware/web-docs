{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/peripherals/gpio",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"gpio\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#gpio\",\n    \"aria-label\": \"gpio permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `GPIO`), mdx(\"p\", null, `General-Purpose Input/Output (GPIO) pins are the foundation of working with any peripherals.`), mdx(\"p\", null, `In Toit, the GPIO Pin class is exposed by the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `gpio`), ` `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/gpio/library-summary\"\n  }, `module`), `.`), mdx(\"p\", null, `GPIO pins are managed across the device. That means that only one instance of a given GPIO pin can\nexist at any given point in time. This ensures that two applications can't configure or use a\nspecific GPIO pin at the same time. The pin can be released again by calling `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `close`), ` after usage:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import gpio\n\nmain:\n  pin := gpio.Pin 21  // Acquired system-wide.\n  // ...\n  pin.close           // Released, can be used by other applications now.\n`)), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `When an application terminates, the pin will automatically be closed and released.`)), mdx(\"h2\", {\n    \"id\": \"output-mode\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#output-mode\",\n    \"aria-label\": \"output mode permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Output mode`), mdx(\"p\", null, `To configure a GPIO pin in output mode, either do it initially:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  output-pin := gpio.Pin 21 --output // Initialized for output mode.\n`)), mdx(\"p\", null, `or later (independent of previous mode):`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  pin.configure --output         // Reconfigure for output mode.\n`)), mdx(\"p\", null, `If a GPIO pin is configured for `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `output`), ` mode, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Pin.set`), ` can be used to either drive the pin voltage high (1) or low (0).`), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"th\"\n  }, `Set value`)), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"th\"\n  }, `Effect`)))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `0`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Low voltage`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `1`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `High voltage`)))), mdx(\"h3\", {\n    \"id\": \"open-drain\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#open-drain\",\n    \"aria-label\": \"open drain permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Open-drain`), mdx(\"p\", null, `GPIO pins also supports output mode as `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Open_collector\"\n  }, `open-drain`), `. To configure the GPIO Pin as open-drain output do the following:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  pin.configure --output --open-drain\n`)), mdx(\"p\", null, `In open-drain output mode, when setting the pin high, the pin will go into open-drain mode. That means the pin is not being pulled in any direction (floating).`), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"th\"\n  }, `Set value`)), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"em\", {\n    parentName: \"th\"\n  }, `Effect`)))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `0`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Low voltage`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `1`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Open drain`)))), mdx(\"p\", null, `This can be useful when an external pull-up is connected to the pin.`), mdx(\"h2\", {\n    \"id\": \"example-led-onoff\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#example-led-onoff\",\n    \"aria-label\": \"example led onoff permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Example: LED on/off`), mdx(\"p\", null, `In output-mode, the GPIO pin can be used, for example, to turn an LED on/off. The following schematic shows how a simple LED could be connected.`), mdx(\"img\", {\n    src: LedZeroOne,\n    alt: \"Schematic\",\n    width: \"40%\"\n  }), mdx(\"p\", null, `To create a GPIO Pin on `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `pin 21`), ` in output mode, use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Pin`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import gpio\n\nmain:\n  pin := gpio.Pin 21 --output\n`)), mdx(\"p\", null, `The pin is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `low (0)`), ` by default, so to set it `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `high (1)`), ` use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `pin.set`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import gpio\n\nmain:\n  pin := gpio.Pin 21 --output\n  pin.set 1\n  sleep --ms=1000\n`)), mdx(\"p\", null, `This will keep the light turned on for 1000ms.`), mdx(Note, {\n    type: \"warning\",\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `When the program terminates, the pin will automatically be reset thus turning off the LED.`)), mdx(\"h2\", {\n    \"id\": \"input-mode\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#input-mode\",\n    \"aria-label\": \"input mode permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Input mode`), mdx(\"p\", null, `The GPIO input mode can be used to read the state of a pin. This can be done by calling `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Pin.get`), `, returning either 0 or 1 depending on the voltage measured at the pin.`), mdx(\"p\", null, `To configure a GPIO pin in input mode, either do it initially:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  input-pin := gpio.Pin 21 --input // Initialized for input mode.\n`)), mdx(\"p\", null, `or later (independent of previous mode):`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  pin.configure --input         // Reconfigure for input mode.\n`)), mdx(\"h3\", {\n    \"id\": \"waiting-for-state-change\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#waiting-for-state-change\",\n    \"aria-label\": \"waiting for state change permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Waiting for state change`), mdx(\"p\", null, `While `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Pin.get`), ` can be used to get the current Pin state, sometimes it's useful to block and wait until the pin changes state.\nThat can be done using the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Pin.wait-for`), ` method.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import gpio\n\nmain:\n  pin := gpio.Pin 21 --input\n  pin.wait-for 1  // Wait for pin to be high.\n`)), mdx(\"h3\", {\n    \"id\": \"pull-up-and-pull-down-resistors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#pull-up-and-pull-down-resistors\",\n    \"aria-label\": \"pull up and pull down resistors permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Pull-up and pull-down resistors`), mdx(\"p\", null, `Some chips supports internal pull-up and/or pull-down resistors. While the size of the resistor depends on the chip\nused, it can be enabled like this:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  pulled-up-pin := gpio.Pin 21 --input --pull-up\n`)), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `If a Pin is configured as input with pull-up/pull-down, it automatically disables the pull-up/pull-down if it is reconfigured to output mode - and enables it again when reconfigured back to input.`)), mdx(\"h2\", {\n    \"id\": \"adc\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#adc\",\n    \"aria-label\": \"adc permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `ADC`), mdx(\"p\", null, `The ADC (analog-to-digital converter) can be used by importing `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `gpio.adc`), `:`), mdx(\"p\", null, `For example:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import gpio\nimport gpio.adc show Adc\n\nmain:\n  adc := Adc (gpio.Pin 34)\n  print adc.get\n  adc.close\n`)), mdx(\"p\", null, `Note that on the ESP32, only the ADC1 (pins 32-39) are supported. The ADC2 has too many\nrestrictions (cannot be used when WiFi is active, and some of the pins are strapping pins),\nand is therefore disabled.`), mdx(\"h2\", {\n    \"id\": \"pwm\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#pwm\",\n    \"aria-label\": \"pwm permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `PWM`), mdx(\"p\", null, `The PWM (pulse width modulation) peripheral is in `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `pgio.pwm`), `.`), mdx(\"p\", null, `One generally starts by allocating a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Pwm`), ` object with a certain frequency. Multiple pins\ncan then use that object to create their own `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `PwmChannel`), ` for which they can modify the\npulse width.`), mdx(\"p\", null, `Example:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import gpio\nimport gpio.pwm\n\nmain:\n  led := gpio.Pin 5\n  generator := pwm.Pwm --frequency=400\n  channel := generator.start led\n  duty-percent := 0\n  step := 1\n  while true:\n    channel.set-duty-factor duty-percent/100.0\n    duty-percent += step\n    if duty-percent == 0 or duty-percent == 100:\n      step = -step\n    sleep --ms=10\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#gpio","title":"GPIO","items":[{"url":"#output-mode","title":"Output mode","items":[{"url":"#open-drain","title":"Open-drain"}]},{"url":"#example-led-onoff","title":"Example: LED on/off"},{"url":"#input-mode","title":"Input mode","items":[{"url":"#waiting-for-state-change","title":"Waiting for state change"},{"url":"#pull-up-and-pull-down-resistors","title":"Pull-up and pull-down resistors"}]},{"url":"#adc","title":"ADC"},{"url":"#pwm","title":"PWM"}]}]}}},"pageContext":{"title":"GPIO","id":"9f02bf40-fd91-5c5e-9285-c769c84b6329"}},
    "staticQueryHashes": ["2197327828"]}