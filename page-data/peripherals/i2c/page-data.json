{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/peripherals/i2c",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\n\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\n\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"i2c\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#i2c\",\n    \"aria-label\": \"i2c permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `I2C`), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/I%C2%B2C\"\n  }, `I`, mdx(\"sup\", null, `2`), `C`), ` is a serial communication bus able to address multiple devices along the same 2-wire bus.`), mdx(\"p\", null, `Toit exposes the peripheral through the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/i2c/library-summary\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, `i2c`), ` library`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import gpio\nimport i2c\n\nmain:\n  bus := i2c.Bus\n    --sda=gpio.Pin 21\n    --scl=gpio.Pin 22\n`)), mdx(\"p\", null, `Each device must have a unique address. The address can be found in the datasheet for the selected peripheral - it's an 7-bit integer.`), mdx(\"p\", null, `In case of the Bosch `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://cdn.sparkfun.com/assets/e/7/3/b/1/BME280_Datasheet.pdf\"\n  }, `BME280 sensor`), `, the address is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `0x76`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import gpio\nimport i2c\n\nmain:\n  bus := i2c.Bus\n    --sda=gpio.Pin 21\n    --scl=gpio.Pin 22\n\n  device := bus.device 0x76\n`)), mdx(\"h2\", {\n    \"id\": \"frequency\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#frequency\",\n    \"aria-label\": \"frequency permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Frequency`), mdx(\"p\", null, `The default frequency of the I`, mdx(\"sup\", null, `2`), `C bus is 400kHz in Toit. This can be changed as an argument to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `i2c.Bus`), ` at construction time with`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  i2c.Bus\n    --sda=gpio.Pin 21\n    --scl=gpio.Pin 22\n    --frequency=100000\n`)), mdx(\"p\", null, `Remember that when changing the frequency, the associated pull-up resistors may have to be changed as well.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#i2c","title":"I2C","items":[{"url":"#frequency","title":"Frequency"}]}]}}},"pageContext":{"title":"I2C","id":"fa21a9c4-9409-55d3-87aa-8f4c19835565"}},
    "staticQueryHashes": ["2197327828"]}