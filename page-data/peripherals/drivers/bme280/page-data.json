{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/peripherals/drivers/bme280",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"connect-sensors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#connect-sensors\",\n    \"aria-label\": \"connect sensors permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Connect sensors`), mdx(\"p\", null, `We are using the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.bosch-sensortec.com/products/environmental-sensors/humidity-sensors-bme280/\"\n  }, `BOSCH BME280`), ` as an example of how to connect a sensor to your ESP32.\nThe BOSCH BME280 chip is an environmental sensor measuring temperature, humidity and pressure.`), mdx(\"h2\", {\n    \"id\": \"setup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#setup\",\n    \"aria-label\": \"setup permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Setup`), mdx(\"p\", null, `The sensor supports both I`, mdx(\"sup\", null, `2`), `C and SPI connection mode. This guide will focus on the SparkFun BME280 breakout board connected using a Qwiic cable.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `If you connect a different BME280 sensor breakout board, you may have to place additional pull-up resistors on the I`, mdx(\"sup\", null, `2`), `C wires.`)), mdx(\"p\", null, `Connect the Qwiic cable to the BME280 breakout board and connect the `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `red`), ` wire to 3.3V (`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `3V3`), `) and the `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `black`), ` wire to ground (GND).`), mdx(\"p\", null, `The remaining two wires are I`, mdx(\"sup\", null, `2`), `C SDA (`, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `blue`), `) and I`, mdx(\"sup\", null, `2`), `C SCL (`, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `yellow`), `).\nWhile almost any GPIO pin of the ESP32 can facilitate an I`, mdx(\"sup\", null, `2`), `C setup we are going to pick `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `pin 21`), ` and `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `pin 22`), `, respectively, throughout this guide.`), mdx(\"img\", {\n    src: Qwiic,\n    alt: \"BME280\",\n    width: \"100%\"\n  }), mdx(\"p\", null, `A detailed description of adding sensors using the Qwiic cable can be found `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../qwiic\"\n  }, `here`), `.`), mdx(\"h2\", {\n    \"id\": \"i2c-bus\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#i2c-bus\",\n    \"aria-label\": \"i2c bus permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `I2C bus`), mdx(\"p\", null, `First we're going to set up the I`, mdx(\"sup\", null, `2`), `C bus so we can connect the device:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import gpio\nimport i2c\n\nmain:\n  bus := i2c.Bus\n    --sda=gpio.Pin 21\n    --scl=gpio.Pin 22\n`)), mdx(\"p\", null, `With the bus configured, we can specify how to address the BME280 device on the bus.\nFrom the SparkFun BME280 breakout documentation we can see that the default configured address is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `0x77`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  device := bus.device 0x77\n`)), mdx(\"p\", null, `The device returned is of type `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `serial.Device`), `.`), mdx(\"h2\", {\n    \"id\": \"driver\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#driver\",\n    \"aria-label\": \"driver permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Driver`), mdx(\"p\", null, `With the device configured we can take a look at the driver.\nThe driver is available as a package from `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Fbme280-driver@v1.0.0\"\n  }, `pkg.toit.io`), `.`), mdx(\"p\", null, `The driver takes a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `serial.Device`), ` as argument - perfect!`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import bme280\n\n// ...\n\ndriver := bme280.Driver device\n`)), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `Configuring an SPI Bus and Device will also provide a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `serial.Device`), `. The driver thus works seamlessly between I`, mdx(\"sup\", null, `2`), `C and SPI setups.`)), mdx(\"p\", null, `The driver will take care of all the communication with the BME280 sensor and provides a high-level API for reading out the relevant data:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  print \"Temperature: $driver.read-temperature C\"\n  print \"Humidity: $driver.read-humidity %\"\n  print \"Pressure: $driver.read-pressure Pa\"\n`)), mdx(\"h2\", {\n    \"id\": \"test-it-on-an-esp32\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#test-it-on-an-esp32\",\n    \"aria-label\": \"test it on an esp32 permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Test it on an ESP32`), mdx(\"p\", null, `In the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../../tutorials/starter/weatherstation\"\n  }, `Weather Station tutorial`), `, you can learn how to run this Toit\nprogram on the ESP32 or deploy it as a long-lived application, where a specification file determines the execution intervals.`), mdx(\"p\", null, `The full code can be seen below:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `/**\nProgram measuring temperature, relative humidity, and atmospheric pressure\n  with a BME280.\n*/\n\nimport gpio\nimport i2c\nimport bme280\n\nmain:\n  bus := i2c.Bus\n    --sda=gpio.Pin 21\n    --scl=gpio.Pin 22\n\n  device := bus.device bme280.I2C-ADDRESS-ALT\n\n  driver := bme280.Driver device\n\n  print \"Temperature: $driver.read-temperature C\"\n  print \"Humidity: $driver.read-humidity %\"\n  print \"Pressure: $driver.read-pressure Pa\"\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#connect-sensors","title":"Connect sensors","items":[{"url":"#setup","title":"Setup"},{"url":"#i2c-bus","title":"I2C bus"},{"url":"#driver","title":"Driver"},{"url":"#test-it-on-an-esp32","title":"Test it on an ESP32"}]}]}}},"pageContext":{"title":"Connect sensors","id":"55bc70d8-eed7-5e21-9663-52d8c062c672"}},
    "staticQueryHashes": ["2197327828"]}