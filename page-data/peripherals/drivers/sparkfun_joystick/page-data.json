{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/peripherals/drivers/sparkfun_joystick",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"how-to-write-a-driver\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#how-to-write-a-driver\",\n    \"aria-label\": \"how to write a driver permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `How to write a driver`), mdx(\"p\", null, `We are using the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.sparkfun.com/products/15168\"\n  }, `SparkFun Qwiic Joystick`), ` as an example of how to write a driver - in the Toit language - for a sensor. The SparkFun Qwiic Joystick is a 2-axis joystick with a single button. Using a Qwiic connector, it's very simple to get the joystick connected.`), mdx(\"p\", null, `This guide will walk you through the steps of identifying how the sensor communicates and how to write a fully working driver for it.`), mdx(\"h2\", {\n    \"id\": \"approach\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#approach\",\n    \"aria-label\": \"approach permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Approach`), mdx(\"p\", null, `The Joystick features an `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ATtiny85`), ` microcontroller with a custom firmware. As described in the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://learn.sparkfun.com/tutorials/qwiic-joystick-hookup-guide\"\n  }, `Hookup Guide`), `, the firmware exposes several registers. With that in mind, we're going to do the following steps:`), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Connect the Joystick to an I`, mdx(\"sup\", null, `2`), `C bus, configuring the I`, mdx(\"sup\", null, `2`), `C device.`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Registers`), ` abstraction to communicate with the chip.`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Validate connectivity to the device.`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Read out Axis and Button values.`))), mdx(\"h2\", {\n    \"id\": \"i2c-setup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#i2c-setup\",\n    \"aria-label\": \"i2c setup permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `I2C setup`), mdx(\"p\", null, `We use a simple I`, mdx(\"sup\", null, `2`), `C setup, currently using pin `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `21`), ` for `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `SDA`), ` (blue) and pin `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `22`), ` for `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `SCL`), ` (yellow).`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import gpio\nimport i2c\n\nmain:\n  bus := i2c.Bus\n    --sda=gpio.Pin 21\n    --scl=gpio.Pin 22\n`)), mdx(\"h2\", {\n    \"id\": \"driver-skeleton\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#driver-skeleton\",\n    \"aria-label\": \"driver skeleton permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Driver skeleton`), mdx(\"p\", null, `As all I`, mdx(\"sup\", null, `2`), `C/SPI drivers that work using registers, the driver starts with the following skeleton.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import serial\n\nclass SparkFunJoystick:\n  static I2C-ADDRESS ::= 0x20\n\n  registers_/serial.Registers\n\n  constructor device/serial.Device:\n    registers_ = device.registers\n\n  on:\n\n  off:\n`)), mdx(\"p\", null, `The hookup guide has a table of I`, mdx(\"sup\", null, `2`), `C registers available in the custom firmware. At address `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `0x00`), ` is the slave address assigned to the device (hard-coded to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `0x20`), `).`), mdx(\"h2\", {\n    \"id\": \"validate-connectivity\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#validate-connectivity\",\n    \"aria-label\": \"validate connectivity permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Validate connectivity`), mdx(\"p\", null, `By reading the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `REG-DEFAULT-ADDRESS_`), ` register, we can confirm the connectivity to the device is functional.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class SparkFunJoystick:\n  static REG-DEFAULT-ADDRESS_ ::= 0x00\n\n  // ...\n\n  on:\n    reg := registers_.read-u8 REG-DEFAULT-ADDRESS_\n    if reg != I2C-ADDRESS: throw \"INVALID_CHIP\"\n`)), mdx(\"p\", null, `With this added, we can validate the setup:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  // ...\n\n  device := bus.device SparkFunJoystick.I2C-ADDRESS\n\n  joystick := SparkFunJoystick device\n\n  joystick.on\n  print \"SparkFunJoystick\"\n`)), mdx(\"p\", null, `Running the code should print out the string `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `SparkFunJoystick`), ` to the terminal. If not, the I`, mdx(\"sup\", null, `2`), `C bus is not configured to match the wiring.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `If the Joystick is connected without the full breakout board from SparkFun, I`, mdx(\"sup\", null, `2`), `C pull-up resistors may be needed.`)), mdx(\"h2\", {\n    \"id\": \"read-out-data\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#read-out-data\",\n    \"aria-label\": \"read out data permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Read out data`), mdx(\"p\", null, `We're going to expand the driver with 3 new methods:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class SparkFunJoystick:\n\n  // ...\n\n  /**\n  Returns the horizontal value in the range [-1..1].\n  */\n  horizontal -> float:\n    // ...\n\n  /**\n  Returns the vertical value in the range [-1..1].\n  */\n  vertical -> float:\n    // ...\n\n  /**\n  Returns true if the button is pressed.\n  */\n  pressed -> bool:\n    // ...\n`)), mdx(\"p\", null, `Both the horizontal and vertical values are formatted the same way; 2 bytes in big endian order (MSB first). We want to transform this value to a float in the range `, `[-1..1]`, `. Let's create a helper function to perform this step:`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `The last 6 bits of the result are unused, but to keep the code simple we treat the result as an 16-bit unsigned integer.`)), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import serial\n\nclass SparkFunJoystick:\n\n  // ...\n\n  read-position_ reg/int -> float:\n    value := registers_.read-i16-be reg\n    // Perform floating-point division to get to [-1..1] range.\n    return value.to-float / int.MAX-16\n`)), mdx(\"p\", null, `With that in place, we can now finish the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `horizontal`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `vertical`), ` methods:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  // Continuing class SparkFunJoystick:\n  static REG-HORIZONTAL-POSITION_ ::= 0x03 // (to 0x04)\n  static REG-VERTICAL-POSITION_ ::= 0x05 // (to 0x06)\n\n  // ...\n\n  horizontal -> float:\n    return read-position_ REG-HORIZONTAL-POSITION_\n\n  vertical -> float:\n    return read-position_ REG-VERTICAL-POSITION_\n`)), mdx(\"p\", null, `Lastly, we need to implement the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `pressed`), ` method. We're simply going to read out the 1-byte register value and check for `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `0`), `, with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `0`), ` meaning pressed.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  // Continuing class SparkFunJoystick:\n  static REG-BUTTON-POSITION_ ::= 0x07\n  // ...\n\n  pressed -> bool:\n    return (registers_.read-u8 REG-BUTTON-POSITION_) == 0\n`)), mdx(\"p\", null, `Let's try it out:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  // ...\n\n  joystick.on\n  while true:\n    print \"$joystick.horizontal - $joystick.vertical (pressed: $joystick.pressed)\"\n    sleep --ms=250\n`)), mdx(\"p\", null, `This code will run until aborted (Ctrl-C).`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `As the joystick is moved around, it's possible to get an I`, mdx(\"sup\", null, `2`), `C error if the I`, mdx(\"sup\", null, `2`), `C bus is accidentally short-circuited by the fingers.`)), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `To improve responsibility, the sensor should be read at a higher frequency. However no printing should be done at higher frequencies to avoid logging data building up.`)), mdx(\"h2\", {\n    \"id\": \"full-code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#full-code\",\n    \"aria-label\": \"full code permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Full code`), mdx(\"h3\", {\n    \"id\": \"the-driver\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#the-driver\",\n    \"aria-label\": \"the driver permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `The driver`), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, `driver.toit`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import serial\n\nclass SparkFunJoystick:\n  static I2C-ADDRESS ::= 0x20\n\n  static REG-DEFAULT-ADDRESS_::= 0x00\n  static REG-HORIZONTAL-POSITION_ ::= 0x03 // (to 0x04)\n  static REG-VERTICAL-POSITION_::= 0x05 // (to 0x06)\n  static REG-BUTTON-POSITION_ ::= 0x07\n\n  registers_/serial.Registers\n\n  constructor device/serial.Device:\n    registers_ = device.registers\n\n  on:\n    reg := registers_.read-u8 REG-DEFAULT-ADDRESS_\n    if reg != I2C-ADDRESS: throw \"INVALID_CHIP\"\n\n  off:\n\n  /**\n  Returns the horizontal value in the range [-1..1].\n  */\n  horizontal -> float:\n    return read-position_ REG-HORIZONTAL-POSITION_\n\n  /**\n  Returns the vertical value in the range [-1..1].\n  */\n  vertical -> float:\n    return read-position_ REG-VERTICAL-POSITION_\n\n  /**\n  Returns true if the button is pressed.\n  */\n  pressed -> bool:\n    return (registers_.read-u8 REG-BUTTON-POSITION_) == 0\n\n  read-position_ reg/int -> float:\n    value := registers_.read-u16-be reg\n    // Perform floating-point division to get to [-1..1] range.\n    return value.to-float / int.MAX-16\n`)), mdx(\"h3\", {\n    \"id\": \"the-toit-application-running-on-your-device\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#the-toit-application-running-on-your-device\",\n    \"aria-label\": \"the toit application running on your device permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `The Toit application running on your device`), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, `main.toit`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import gpio\nimport i2c\n\nimport .driver\n\nmain:\n  bus := i2c.Bus\n    --sda=gpio.Pin 21\n    --scl=gpio.Pin 22\n\n  device := bus.device SparkFunJoystick.I2C-ADDRESS\n\n  joystick := SparkFunJoystick device\n\n  joystick.on\n  while true:\n    print \"$joystick.horizontal - $joystick.vertical \"\n        + \"(pressed: $joystick.pressed)\"\n    sleep --ms=250\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#how-to-write-a-driver","title":"How to write a driver","items":[{"url":"#approach","title":"Approach"},{"url":"#i2c-setup","title":"I2C setup"},{"url":"#driver-skeleton","title":"Driver skeleton"},{"url":"#validate-connectivity","title":"Validate connectivity"},{"url":"#read-out-data","title":"Read out data"},{"url":"#full-code","title":"Full code","items":[{"url":"#the-driver","title":"The driver"},{"url":"#the-toit-application-running-on-your-device","title":"The Toit application running on your device"}]}]}]}}},"pageContext":{"title":"How to write a driver","id":"1ca6f1b6-0a6b-51a2-81d6-028d2eff09f9"}},
    "staticQueryHashes": ["2197327828"]}