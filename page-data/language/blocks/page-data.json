{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/blocks",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"blocks\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#blocks\",\n    \"aria-label\": \"blocks permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Blocks\"), mdx(\"p\", null, \"Blocks are a mechanism to conveniently and efficiently provide callbacks to\\nfunctions. This mechanism is, for example, used for the methods \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int.repeat\"), \"\\nand \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List.do\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"main:\\n  // Print the numbers from 1 to 10, one per line.\\n  10.repeat:\\n    print it + 1\\n\\n  // Print the elements in the list, one per line.\\n  [\\\"what\\\", \\\"a\\\", \\\"list\\\"].do:\\n    print it\\n\")), mdx(\"p\", null, \"Here we used the automatic block argument, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"it\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#block-arguments\"\n  }, \"see\\nbelow\")), mdx(\"p\", null, \"Syntactically \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"repeat\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"do\"), \" look like they are built-in to the language\\nlike \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" are, but they are actually normal methods that use the\\nblock feature.\"), mdx(\"h2\", {\n    \"id\": \"basic-use-of-blocks\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#basic-use-of-blocks\",\n    \"aria-label\": \"basic use of blocks permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Basic use of blocks\"), mdx(\"p\", null, \"Blocks are used extensively in the Toit standard library, so you need to know\\nthe basics of calling functions that accept blocks.\\nA function that takes a block as an argument surrounds the parameter with\\nbrackets \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[ ]\"), \". For example, the function signature of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int.repeat\"), \" is\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"repeat [block]:\\n  // ...\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[block]\"), \" parameter states that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"repeat\"), \" function takes exactly one\\nargument which must be a block (because of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"]\"), \").\"), mdx(\"p\", null, \"On the caller side, block arguments look like a scope for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for\"), \". For\\nexample, if you want to call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"repeat\"), \", you could write\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"main:\\n  4.repeat:\\n    print \\\"again\\\"\\n\")), mdx(\"p\", null, \"Just like for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for\"), \", you can choose to put single line blocks on the same line as the call. For example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"main:\\n  4.repeat: print \\\"again\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"block-arguments\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#block-arguments\",\n    \"aria-label\": \"block arguments permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Block arguments\"), mdx(\"p\", null, \"Blocks often receive arguments when they are called as callbacks. For instance,\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List.do\"), \" iterates over a list and calls the block with every element. When the\\nblock receives one argument you can refer to the argument with the keyword\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"it\"), \". For example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"main:\\n  [\\\"Siri\\\", \\\"John\\\", \\\"Sue\\\"].do:\\n    print it\\n\")), mdx(\"p\", null, \"prints\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"Siri\\nJohn\\nSue\\n\")), mdx(\"p\", null, \"You can name the parameter of the block if you want to use something else than\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"it\"), \". To do so, you start the block with the name enclosed in pipes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"|\"), \". For\\nexample\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"main:\\n  [\\\"Siri\\\", \\\"John\\\", \\\"Sue\\\"].do: | name |\\n    print name\\n\")), mdx(\"p\", null, \"prints\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"Siri\\nJohn\\nSue\\n\")), mdx(\"p\", null, \"Some blocks receive more than one argument. In that case you have to use the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"|\"), \" notation. You just write all the names in between the two pipes. For\\nexample, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map.do\"), \" iterates all the key-value pairs of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map\"), \", and calls the\\nblock with the key as the first argument and the value as the second:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"main:\\n  map ::= {\\n    1234: \\\"Siri\\\",\\n    2345: \\\"John\\\",\\n    3456: \\\"Sue\\\"\\n    }\\n  map.do: | id name |\\n    print \\\"$name has ID $id\\\"\\n\")), mdx(\"p\", null, \"which prints\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"Siri has ID 1234\\nJohn has ID 2345\\nSue has ID 3456\\n\")), mdx(\"p\", null, \"If a block accepts multiple arguments, but you only need to refer to the first,\\nthen you can omit the naming and just use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"it\"), \". If there are parameters that\\nyou don't need, then you can use a wildcard \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_\"), \" instead of giving them a name.\"), mdx(\"h2\", {\n    \"id\": \"returning-from-blocks-and-accessing-variables\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#returning-from-blocks-and-accessing-variables\",\n    \"aria-label\": \"returning from blocks and accessing variables permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Returning from blocks and accessing variables\"), mdx(\"p\", null, \"Blocks look like they are built-in which makes it important that they also act\\nlike they are built-in. This means that returning from a block with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"return\"), \",\\nor accessing local variables must just work.\"), mdx(\"h3\", {\n    \"id\": \"non-local-return\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#non-local-return\",\n    \"aria-label\": \"non local return permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Non-local return\"), mdx(\"p\", null, \"The non-local return is the most common return from blocks. It is best explained based on an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"/**\\nTakes a list $list and returns the first negative number.\\nReturns null if $list contains no negative number.\\n*/\\nfirst-negative list:\\n  list.do:\\n    if it < 0: return it\\n  return null\\n\\nmain:\\n  print\\n    first-negative [1, 2, 3, -3, -2, -1]\\n\\n\")), mdx(\"p\", null, \"which would print\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"-3\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"return it\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"first-negative\"), \" is a non-local return which means that it\\ndoesn't just return from the block or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"do\"), \", it returns from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"first-negative\"), \".\\nThis means that we can short circuit the search when we find the first negative\\nnumber.\"), mdx(\"h3\", {\n    \"id\": \"local-return\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#local-return\",\n    \"aria-label\": \"local return permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Local return\"), mdx(\"p\", null, \"In some situations, it is useful to do a local return. That is, to just return\\nfrom the block. To do this, you use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"continue\"), \" keyword followed by a dot\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".\"), \" and the label of the function you want to continue in. For example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"/**\\nTakes a list of integers $list and maps it to a list of\\n  odd numbers by incrementing even numbers by one.\\n*/\\noddify list:\\n  return list.map:\\n    if it % 2 == 0:\\n      continue.map it + 1\\n    continue.map it\\n\\nmain:\\n  list := [1, 2, 3, 4]\\n  print\\n    oddify list\\n\")), mdx(\"p\", null, \"which prints\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"[1, 3, 3, 5]\\n\")), mdx(\"p\", null, \"Here the block given to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \" uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"continue\"), \" to do a local return of an odd\\nvalue when it sees an even value. The snippet \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"continue.map\"), \" can be read as\\n\\\"continue in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \" function\\\".\"), mdx(\"h3\", {\n    \"id\": \"default-return\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#default-return\",\n    \"aria-label\": \"default return permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Default return\"), mdx(\"p\", null, \"The default return of a block is a local return. The block returns the value of\\nthe last statement in the block. For example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"/**\\nTakes a list of words, and returns a new list with only the\\n  words that are 5 characters or fewer.\\n*/\\nshort-words words:\\n  return words.filter:\\n    it.size < 6\\n\\nmain:\\n  words := [\\\"word\\\", \\\"small\\\", \\\"minuscule\\\", \\\"tiny\\\"]\\n  print\\n    short-words words\\n\\n\")), mdx(\"p\", null, \"Here the block accepted by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filter\"), \" returns the value of the last statement\\nwhich is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"it.size < 6\"), \", a boolean that indicates whether the size of the\\nelement is less than 6.\"), mdx(\"p\", null, \"It prints\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"[word, small, tiny]\\n\")), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"oddify\"), \" example in section \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#local-return\"\n  }, \"Local return\"), \", the last\\nlocal return was unnecessary. If you replace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"continue.map it\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"it\"), \", then\\nthe block uses the default local return to return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"it\"), \" from the block. That is\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"/**\\nTakes a list of integers $list and maps it to a list of odd\\n  numbers by incrementing even numbers by one.\\n*/\\noddify list:\\n  return list.map:\\n    if it % 2 == 0:\\n      continue.map it + 1\\n    it\\n\\nmain:\\n  list := [1, 2, 3, 4]\\n  print\\n    oddify list\\n\")), mdx(\"p\", null, \"prints\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \" [1, 3, 3, 5]\\n\")), mdx(\"h2\", {\n    \"id\": \"blocks-referencing-variables\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#blocks-referencing-variables\",\n    \"aria-label\": \"blocks referencing variables permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Blocks referencing variables\"), mdx(\"p\", null, \"Blocks can reference everything that can be referenced from the scope the block\\nwas defined in. This includes access to local variable, field variables, and\\nglobals.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"my-stringify list -> string:\\n  is-first := true\\n  str := \\\"[\\\"\\n  list.do:\\n    str += \\\"$(is-first ? \\\"\\\" : \\\", \\\")$it\\\"\\n    is-first = false\\n  str += \\\"]\\\"\\n  return str\\n\\nmain:\\n  print\\n    my-stringify [1, 2, 3]\\n\\n\")), mdx(\"p\", null, \"Here the block (given to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"do\"), \") references both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"is-first\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"str\"), \".\\nNotice that the block both accesses and modifies the variables.\"), mdx(\"p\", null, \"The function returns a string representation of the list corresponding to the\\nexact syntactic construct that creates a list, and thus prints\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \" [1, 2, 3]\\n\")), mdx(\"h2\", {\n    \"id\": \"examples-of-block-usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#examples-of-block-usage\",\n    \"aria-label\": \"examples of block usage permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Examples of block usage\"), mdx(\"p\", null, \"Many \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for\"), \"-loops follow a common pattern, where the loop uses a loop-variable\\nto count from 0 to a given limit. For example say you want a function that\\nprints the numbers from 1 to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \", you could write\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"/// Prints the numbers from 1 to $n on separate lines.\\nprint-numbers n:\\n  for i := 0; i < n; i++:\\n    print i + 1\\n\\nmain:\\n    print-numbers 5\\n\")), mdx(\"p\", null, \"As you can see, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for\"), \"-loop is mostly boilerplate code. All you want to\\nexpress is that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"print\"), \" statement should be executed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" times. This is\\nwhere blocks come in handy. We can rewrite the above snippet using\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int.repeat\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"/// Prints the numbers from 1 to $n on separate lines.\\nprint-numbers n:\\n  n.repeat:\\n    print it + 1\\n\\nmain:\\n    print-numbers 5\\n\")), mdx(\"p\", null, \"The new code isn't just shorter, but also expresses the intent more clearly.\"), mdx(\"p\", null, \"We can do the same exercise for list iterations. Say you have written a function that prints the elements of a list:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"/// Prints the elements of the list on separate lines.\\nprint-list list:\\n  for i := 0; i < list.size; i++:\\n    print list[i]\\n\\nmain:\\n    print-list [1, 2, 3, 4, 5]\\n\")), mdx(\"p\", null, \"Again, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int.repeat\"), \" to rewrite the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for\"), \"-loop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"/// Prints the elements of the list on separate lines.\\nprint-list list:\\n  list.size.repeat:\\n    print list[it]\\n\\nmain:\\n  print-list [1, 2, 3, 4, 5]\\n\")), mdx(\"p\", null, \"Now the example is shorter, but it is still not clear what the intend is. You\\ncan do even better than the above. The collections in the Toit standard library\\nhave \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"do\"), \" functions that iterate the collections and call a block for each\\nelement. You can rewrite \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"print-list\"), \" to\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"/// Prints the elements of the list on separate lines.\\nprint-list list:\\n  list.do:\\n    print it\\n\\nmain:\\n  print-list [1, 2, 3, 4, 5]\\n\")), mdx(\"p\", null, \"Now the intend is clear: you are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"do\"), \"'ing something to the list which corresponds to visiting each element of the list.\"), mdx(\"h2\", {\n    \"id\": \"calling-functions-with-named-block-parameters\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#calling-functions-with-named-block-parameters\",\n    \"aria-label\": \"calling functions with named block parameters permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Calling functions with named block parameters\"), mdx(\"p\", null, \"Block parameters can also be named. This is indicated in the function signature\\nby enclosing the named parameter in brackets \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[ ]\"), \" (the same as for other block\\nparameters). For instance, the signature of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map.remove\"), \" is\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"remove key [--if-absent] -> none:\\n\")), mdx(\"p\", null, \"The named parameter is given in the same way as normal block parameter. For\\nexample we could make a throwing remove for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"class Map:\\n  // ...\\n\\n  throw-remove key:\\n    remove key --if-absent=:\\n      throw \\\"No such entry\\\"\\n\")), mdx(\"p\", null, \"We could also implement a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"remove\"), \" that ignores the absence of a key:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"class Map:\\n  // ...\\n\\n  remove key:\\n    remove key --if-absent=: null\\n\")), mdx(\"p\", null, \"A function can take multiple blocks as arguments. Take the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map.get\"), \" signature as an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"get key [--if-present] [--if-absent]:\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map.get\"), \" takes two block arguments. For the sake of readability, it is\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"announcer map key:\\n  map.get key\\n    --if-present=: | value |\\n      print \\\"Proudly presenting $value!\\\"\\n    --if-absent=:\\n      print \\\"Unable to find $key\\\"\\n\\nmain:\\n  map ::= {\\n    1: \\\"Siri\\\",\\n    2: \\\"John\\\",\\n    3: \\\"Sue\\\"\\n  }\\n  announcer map 1\\n  announcer map 4\\n\")), mdx(\"p\", null, \"This prints\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"Proudly presenting Siri!\\nUnable to find 4\\n\")), mdx(\"p\", null, \"Here we have formatted the arguments differently, so each of the block arguments are easily identified.\"), mdx(\"h2\", {\n    \"id\": \"blocks-as-values\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#blocks-as-values\",\n    \"aria-label\": \"blocks as values permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Blocks as values\"), mdx(\"p\", null, \"Blocks are values in Toit which is why functions accept them as arguments. A\\nblock value is defined as a colon \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":\"), \" followed by the body of the block which\\nis either a statement on the same line of the block, such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \": null\"), \", or a\\nseries of statements on separate lines following the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":\"), \" (all statements\\nindented), such as\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"main:\\n  print \\\"multi\\\"\\n  print \\\"line\\\"\\n\")), mdx(\"p\", null, \"In all the examples so far where we have passed blocks as arguments to\\nfunction, we were really defining the block value in place.\\nBecause blocks are values, they can be stored in local variables, just like other values. For example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"main:\\n  block-variable := : print it + 1\\n  10.repeat block-variable\\n\")), mdx(\"p\", null, \"Syntactically, it looks a bit cryptic when blocks are stored in local\\nvariables. However, the main purpose of blocks is to pass snippets of code to\\nfunctions.\"), mdx(\"p\", null, \"Blocks aren't just \\\"normal\\\" functions as in other programming languages. They\\nare much more efficient, but also come with some restrictions.\"), mdx(\"h3\", {\n    \"id\": \"restrictions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#restrictions\",\n    \"aria-label\": \"restrictions permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Restrictions\"), mdx(\"p\", null, \"Blocks are stack allocated, which is what makes them so efficient, but it also limits where they can be used:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Blocks cannot be stored in instance fields, static class fields, and globals.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Blocks cannot be stored in any collection.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Blocks cannot be returned from functions and methods.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../tasks\"\n  }, \"Lambdas\"), \" cannot capture blocks.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Blocks cannot take blocks as arguments.\"))), mdx(\"h2\", {\n    \"id\": \"defining-functions-that-take-block-arguments\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#defining-functions-that-take-block-arguments\",\n    \"aria-label\": \"defining functions that take block arguments permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Defining functions that take block arguments\"), mdx(\"p\", null, \"You can define your own functions that accept block arguments. You have already\\nseen what the function signature should look like: block arguments must be\\nenclosed by brackets \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[ ]\"), \".\"), mdx(\"p\", null, \"In order to execute a block, you simply call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"call\"), \" on it. For example, this is how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int.repeat\"), \" is implemented:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"class int:\\n  // ...\\n  repeat [block]:\\n    for i := 0; i < this; i++:\\n      block.call i\\n\")), mdx(\"p\", null, \"Note: non-named block parameters have to be the last in the function signature.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#blocks","title":"Blocks","items":[{"url":"#basic-use-of-blocks","title":"Basic use of blocks"},{"url":"#block-arguments","title":"Block arguments"},{"url":"#returning-from-blocks-and-accessing-variables","title":"Returning from blocks and accessing variables","items":[{"url":"#non-local-return","title":"Non-local return"},{"url":"#local-return","title":"Local return"},{"url":"#default-return","title":"Default return"}]},{"url":"#blocks-referencing-variables","title":"Blocks referencing variables"},{"url":"#examples-of-block-usage","title":"Examples of block usage"},{"url":"#calling-functions-with-named-block-parameters","title":"Calling functions with named block parameters"},{"url":"#blocks-as-values","title":"Blocks as values","items":[{"url":"#restrictions","title":"Restrictions"}]},{"url":"#defining-functions-that-take-block-arguments","title":"Defining functions that take block arguments"}]}]}}},"pageContext":{"title":"Blocks","id":"258ed030-cd15-5212-848a-0577add280e9"}},
    "staticQueryHashes": ["2197327828"]}