{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/package/pkgtutorial",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"package-tutorial\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#package-tutorial\",\n    \"aria-label\": \"package tutorial permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Package tutorial`), mdx(\"p\", null, `This tutorial shows how to create a Toit package.`), mdx(\"p\", null, `We will recreate a simplified version of the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitware/toit-morse\"\n  }, `toitware/toit-morse`), `\npackage which adds support for morse code. We have uploaded this version to\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitware/toit-morse-tutorial\"\n  }, `https://github.com/toitware/toit-morse-tutorial`), `.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `Depending on how you installed your Toit SDK you may need to use slightly\ndifferent commands.  You can pick the correct tab for the examples below,\ndepending on whether you installed the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitlang/jaguar\"\n  }, `Jaguar`), ` tool or\nthe standalone `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitlang/toit\"\n  }, `toitlang.org`), ` SDK.`)), mdx(\"h2\", {\n    \"id\": \"steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#steps\",\n    \"aria-label\": \"steps permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Steps`), mdx(\"p\", null, `Here are the common steps for creating a package:`), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Develop code that should be shared with others.`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Polish the package, with eyes on:`), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `The license`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `A README`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Types`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Toitdocs`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Examples`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Tests`)))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Create a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.yaml`), ` file.`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Tag and Upload.`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Publish to the Toit package registry.`))), mdx(\"h2\", {\n    \"id\": \"develop-code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#develop-code\",\n    \"aria-label\": \"develop code permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Develop Code`), mdx(\"p\", null, `In this section we write the Morse code library. We are simplifying the code a lot, so that it fits into the tutorial.`), mdx(\"p\", null, `Usually, the code for a package is initially developed as part of an application. This can be a simple example\nprogram, or a bigger existing application. Once the code looks ready for other developers, the code that should\nbecome a package must be moved to its own repository. Indeed, a package is identified by its repository URL (together with its version number).`), mdx(\"p\", null, `All package code lives in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `src`), ` directory of the repository.`), mdx(\"p\", null, `For the Morse example, we have only one file, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `src/morse_tutorial.toit`), `.`), mdx(\"p\", null, `We'll start with some constants:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `DOT ::= 0\nDASH ::= 1\nSPACE-LETTER ::= 2\n\nMORSE-CODE_ ::= {\n  'a': [ DOT, DASH ],\n  'b': [ DASH, DOT, DOT, DOT ],\n  'c': [ DASH, DOT, DASH, DOT ],\n}\n\n/// The dash duration is three times that of the dot.\nDASH-DURATION-FACTOR_ ::= 3\n/// The duration between characters is three times the one of a dot.\nSPACE-LETTER-FACTOR_ ::= 3\n`)), mdx(\"p\", null, `In the tutorial we only support the characters 'a', 'b', and 'c'. We are also skipping the constants necessary to encode word boundaries.`), mdx(\"p\", null, `A simple function converts a string from ASCII to Morse code:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `encode-string str:\n  result := []\n  str.do:\n    result.add-all MORSE-CODE_[it]\n    result.add SPACE-LETTER\n  return result\n`)), mdx(\"p\", null, `Similarly, we want to have a function that emits the symbols with the correct timing:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `emit symbols --dot-duration [--on] [--off]:\n  symbols.do:\n    if it == DOT or it == DASH:\n      on.call\n      sleep (it == DOT ? dot-duration : dot-duration * DASH-DURATION-FACTOR_)\n      off.call\n      sleep dot-duration // The space between symbols.\n    else:\n      assert: it == SPACE-LETTER\n      // We already waited a dot-duration after the last character, so we have to\n      // wait a bit shorter.\n      sleep dot-duration * (SPACE-LETTER-FACTOR_ - 1)\n`)), mdx(\"p\", null, `There is much more functionality we could add, but for the purpose of this tutorial we are happy now. The next step is to polish the package.`), mdx(\"h2\", {\n    \"id\": \"polishing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#polishing\",\n    \"aria-label\": \"polishing permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Polishing`), mdx(\"p\", null, `It's always a good idea to polish code, but for code that is published for external developers that it's even more the case.`), mdx(\"h3\", {\n    \"id\": \"license\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#license\",\n    \"aria-label\": \"license permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `License`), mdx(\"p\", null, `Packages should have a license. We recommend a `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Permissive_software_license\"\n  }, `permissive free software license`), `, such as MIT, or BSD for packages that are published publicly. This is not a requirement, but more restrictive licenses are often avoided and would lead to fewer users of a package.`), mdx(\"p\", null, `For our tutorial we use the MIT license. Our LICENSE file thus has the following text in it:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `MIT License\n\nCopyright (c) 2021 Toitware\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n`)), mdx(\"p\", null, `You should also add copyright headers to the source files.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// Copyright <year> <author>. All rights reserved.\n// Use of this source code is governed by a <license>-style license that can be\n// found in the LICENSE file.\n`)), mdx(\"h3\", {\n    \"id\": \"readme\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#readme\",\n    \"aria-label\": \"readme permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `README`), mdx(\"p\", null, `Packages (and generally all repositories) should have a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `README.md`), ` file describing the package.`), mdx(\"p\", null, `We recommend to have a title `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `# <package-name>`), ` (or similar), followed by a paragraph that makes sense on its own and describes the project. The first paragraph should start as if preceded by \"This is a package containing\".`), mdx(\"p\", null, `For the tutorial we add the following `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `README.md`), ` (again, simplified to save space):`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-markdown\"\n  }, `# Morse Tutorial\n\nA tutorial version of the Morse package. Not intended for use as package.\n\nEncodes string to Morse code. Also provides convenience methods\nthat call given blocks \\`on\\` and \\`off\\` with the correct timing.\n\n## Usage\n\nA simple usage example.\n\n\\`\\`\\`\nimport morse-tutorial\n\nmain:\n  ...\n\\`\\`\\`\n\nSee the \\`examples\\` folder for more examples.\n\n## Features and bugs\n\nPlease file feature requests and bugs at the [issue tracker][tracker].\n\n[tracker]: https://github.com/toitware/toit-morse-tutorial/issues\n`)), mdx(\"h3\", {\n    \"id\": \"types\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#types\",\n    \"aria-label\": \"types permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Types`), mdx(\"p\", null, `Toit doesn't require any types, but we strongly recommend to add some on API boundaries of a package. It helps new users to understand the package more easily, and also helps the IDE for exploratory development where users use auto-completion and similar IDE features to discover a package.`), mdx(\"p\", null, `In our example we will change the signatures of the two exposed functions:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `encode-string str/string -> List:\n`)), mdx(\"p\", null, `and`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `emit symbols/List --dot-duration/Duration [--on] [--off] -> none:\n`)), mdx(\"h3\", {\n    \"id\": \"toitdoc\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#toitdoc\",\n    \"aria-label\": \"toitdoc permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Toitdoc`), mdx(\"p\", null, `Similar to types, it's always a good idea to have good documentation; even more so for API boundaries.`), mdx(\"p\", null, `We suggest the following changes:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `/**\nThe dot symbol.\nAlso known as \"di\", or \"dit\".\n*/\nDOT ::= 0\n\n/**\nThe dash symbol.\nAlso known as \"dah\".\n*/\nDASH ::= 1\n\n/**\nA symbol representing the space between two characters.\n*/\nSPACE-LETTER ::= 2\n\n/**\nEncodes the given string $str to Morse code.\nReturns a list of $DOT, $DASH and $SPACE-LETTER.\nThe characters of $str must only be equal to 'a', 'b' or 'c'.\n*/\nencode-string str/string -> List:\n  ...\n\n/**\nEmits the given Morse symbols.\nUses the $on and $off blocks to turn the \"emitter\" on or off. The blocks\n  could, for example, manipulate an LED, or a speaker.\nThe given $symbols should be Morse symbols. See $encode-string for a function\n  that generates Morse symbols from a string.\n*/\nemit symbols/List --dot-duration/Duration [--on] [--off] -> none:\n  ...\n`)), mdx(\"h3\", {\n    \"id\": \"examples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Examples`), mdx(\"p\", null, `Examples are a good way to introduce users to the functionality of the package, and should thus contain typical code with lots of documentation.`), mdx(\"p\", null, `A typical use case would be to emit morse on a GPIO pin (`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `examples/gpio.toit`), `):`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// Copyright (C) 2021 Toitware ApS. All rights reserved.\n// Use of this source code is governed by an MIT-style license that can be\n// found in the LICENSE file.\n\nimport morse-tutorial\nimport gpio\n\n/**\nThis example demonstrates the use of the morse package with an ESP32.\nIt assumes that pin 23 is connected to an LED (and an appropriate resistor).\n*/\n\n// Update the pin here if you use a different one.\nLED-PIN ::= 23\n\nmain:\n  pin := gpio.Pin.out LED-PIN\n\n  10.repeat:\n    morse-tutorial.emit\n        morse-tutorial.encode-string \"ababc\"\n        --dot-duration= Duration --ms=250\n        --on=:  pin.set 1\n        --off=: pin.set 0\n    sleep (Duration --ms=3000)\n`)), mdx(\"p\", null, `Since this example uses the morse package, we need to install the package first. Instead of\nrelying on the uploaded package (which would be a bit circular), we use the package locally:`), mdx(Tabs, {\n    mdxType: \"Tabs\"\n  }, mdx(Tab, {\n    label: \"Jaguar\",\n    mdxType: \"Tab\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `# In the examples directory:\njag pkg init\njag pkg install --local --prefix=morse-tutorial ..\n`)), mdx(\"p\", null, `This creates a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.lock`), ` file mapping the prefix \"morse-tutorial\" to the package at location `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `..`), `.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `We use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg init`), ` to ensure that the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.lock`), ` file is created in the current directory. If we just used `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg install`), `, we would risk adding a new dependency to our package and not to the example.`))), mdx(Tab, {\n    label: \"Toit open SDK\",\n    mdxType: \"Tab\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `# In the examples directory:\ntoit.pkg init\ntoit.pkg install --local --name=morse-tutorial ..\n`)), mdx(\"p\", null, `This creates a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.lock`), ` file mapping the prefix \"morse-tutorial\" to the package at location `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `..`), `.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `We use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `toit.pkg init`), ` to ensure that the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.lock`), ` file is created in the current directory. If we just used `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `toit.pkg install`), `, we would risk adding a new dependency to our package and not to the example.`)))), mdx(\"h3\", {\n    \"id\": \"tests\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#tests\",\n    \"aria-label\": \"tests permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Tests`), mdx(\"p\", null, `Toit doesn't have a testing framework, yet. For now, developers need to write their tests without much help from the Toit framework. We recommend to simply write executables that use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `expect`), ` library to test the package. Tests should live in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `tests`), ` folder.`), mdx(\"p\", null, `Here is a simple test (`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `tests/morse_test.toit`), `) for ensuring that an 'a' is correctly translated:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// Copyright (C) 2021 Toitware ApS. All rights reserved.\n// Use of this source code is governed by an MIT-style license that can be\n// found in the LICENSE file.\n\nimport morse-tutorial show *\nimport expect show *\n\nmain:\n  encoded := encode_string \"a\"\n  expect-list-equals [DOT, DASH, SPACE_LETTER] encoded\n`)), mdx(\"p\", null, `Similarly to the examples, it's necessary to install the local package to be able to use it first:`), mdx(Tabs, {\n    mdxType: \"Tabs\"\n  }, mdx(Tab, {\n    label: \"Jaguar\",\n    mdxType: \"Tab\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `# In the test directory:\njag pkg init\njag pkg install --local --name=morse-tutorial ..\n`)), mdx(\"p\", null, `The test should then execute successfully by running it locally:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag run -d host morse_test.toit\n`))), mdx(Tab, {\n    label: \"toitlang.org\",\n    mdxType: \"Tab\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `# In the test directory:\ntoit.pkg init\ntoit.pkg install --local --name=morse-tutorial ..\n`)), mdx(\"p\", null, `The test should then execute successfully by running it locally:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `toit.run morse_test.toit\n`)))), mdx(\"h2\", {\n    \"id\": \"packageyaml\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#packageyaml\",\n    \"aria-label\": \"packageyaml permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Package.yaml`), mdx(\"p\", null, `A package must have a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.yaml`), ` file at the root of the package.`), mdx(\"p\", null, `Since we already added a license, we don't need to worry about the license. However, we need to add the\n\"name\" and \"description\" entries.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, `name: morse_package_tutorial\ndescription: A tutorial version of the Morse package. Not intended for use as package.\n`)), mdx(\"h3\", {\n    \"id\": \"dependencies\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#dependencies\",\n    \"aria-label\": \"dependencies permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Dependencies`), mdx(\"p\", null, `We don't use dependencies in this package, but for completeness sake here is an example of how we would add one:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, `dependencies:\n  prefix1:\n    url: github.com/toitware/toit-morse\n    version: ^1.0.0\n  prefix2:\n    url: github.com/toitware/toit-fahrenheit\n    version: ^1.0.0\n`)), mdx(\"p\", null, `You normally don't need to worry about them, as they are automatically added when running `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg install <dependency>`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `toit.pkg install <dependency>`), `.`), mdx(\"h2\", {\n    \"id\": \"publishing-to-the-toit-package-registry\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#publishing-to-the-toit-package-registry\",\n    \"aria-label\": \"publishing to the toit package registry permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Publishing to the Toit package registry`), mdx(\"p\", null, `Toit packages are downloaded from the original sources, and (if published publicly) must be accessible through a public Git repository. The URL of the Git repository is part of the ID of a package (together with its version tag). As such, we advise to use the one of the following choices as repository name:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `\"toit-\" followed by the package name.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `the package name, or`)), mdx(\"p\", null, `The easiest way to publish a package is to upload the sources to GitHub and to use the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitlang/action-publish\"\n  }, `publish action`), `.`), mdx(\"p\", null, `At each release it automatically takes the version number and informs the Toit package registry about the new\nrelease. Just make sure that the version is of the form `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `v1.0.0`), ` (or similar). Version numbers follow `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://semver.org\"\n  }, `semantic versioning`), ` and tags must be valid semver versions with a prefixed 'v'.`), mdx(Tabs, {\n    mdxType: \"Tabs\"\n  }, mdx(Tab, {\n    label: \"Jaguar\",\n    mdxType: \"Tab\"\n  }, mdx(\"p\", null, `Once published successfully, the registry will distribute a description of the package so that anyone can start using the package with a simple `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg install`), `.`)), mdx(Tab, {\n    label: \"toitlang.org\",\n    mdxType: \"Tab\"\n  }, mdx(\"p\", null, `Once published successfully, the registry will distribute a description of the package so that anyone can start using the package with a simple `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `toit.pkg install`), `.`))), mdx(\"h3\", {\n    \"id\": \"publishing-without-a-github-action\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#publishing-without-a-github-action\",\n    \"aria-label\": \"publishing without a github action permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Publishing without a Github action`), mdx(\"p\", null, `After committing all sources, add a tag yourself by executing `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `git tag v1.0.0`), `.`), mdx(\"p\", null, `As the last step we need to inform a registry about the existence of the (new\nversion of the) package. For the Toit package registry, publish your package `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/publish\"\n  }, `here`), `.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#package-tutorial","title":"Package tutorial","items":[{"url":"#steps","title":"Steps"},{"url":"#develop-code","title":"Develop Code"},{"url":"#polishing","title":"Polishing","items":[{"url":"#license","title":"License"},{"url":"#readme","title":"README"},{"url":"#types","title":"Types"},{"url":"#toitdoc","title":"Toitdoc"},{"url":"#examples","title":"Examples"},{"url":"#tests","title":"Tests"}]},{"url":"#packageyaml","title":"Package.yaml","items":[{"url":"#dependencies","title":"Dependencies"}]},{"url":"#publishing-to-the-toit-package-registry","title":"Publishing to the Toit package registry","items":[{"url":"#publishing-without-a-github-action","title":"Publishing without a Github action"}]}]}]}}},"pageContext":{"title":"Package tutorial","id":"5e02dd38-264f-5a50-a452-bc4f46461936"}},
    "staticQueryHashes": ["2197327828"]}