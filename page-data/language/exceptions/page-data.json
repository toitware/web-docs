{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/exceptions",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"exception-handling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#exception-handling\",\n    \"aria-label\": \"exception handling permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Exception handling`), mdx(\"h2\", {\n    \"id\": \"try-and-finally\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#try-and-finally\",\n    \"aria-label\": \"try and finally permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Try and finally`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `try`), ` block in Toit is used to execute code following the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `try`), ` statement as a “normal” part of the program.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `finally`), ` keyword defines a block of code to run when the try block is final.\nThe `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `finally`), ` block will be executed no matter if the try block raises an error or not.\nThis can be useful to close objects and clean up resources.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  connection ::= device.ConsoleConnection.open\n  try:\n    accelerometer := Accelerometer.start\n    try:\n      print \"started\"\n      while true:\n        force := movement accelerometer\n        print\n          \"got movement: $force - moving: $(is-moving force)\"\n        sleep --ms=1000\n    finally:\n      accelerometer.close\n  finally:\n    connection.close\n`)), mdx(\"h2\", {\n    \"id\": \"throw\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#throw\",\n    \"aria-label\": \"throw permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Throw`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `throw`), ` keyword in Toit is used to explicitly throw an exception from a\nmethod or any block of code. Any object can be thrown. Currently the core\nlibraries often throw strings containing error messages. Although it looks like\na keyword, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `throw`), ` is implemented as a function that takes a value to be\nthrown.`), mdx(\"h2\", {\n    \"id\": \"catch\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#catch\",\n    \"aria-label\": \"catch permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Catch`), mdx(\"p\", null, `Code that may throw an exception can be wrapped in a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `catch`), `. This is\nimplemented as a function that takes the possibly throwing code as a block.\nCatch will return the thrown object, or `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `null`), ` if no object was thrown.`), mdx(\"p\", null, `Catch takes two optional arguments`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--trace`), ` argument is a boolean or a block that evaluates to a boolean.\nIt controls whether the caught exception is reported in the console. By default\nthe exception is not reported. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `trace`), ` block is passed an argument that is\nthe thrown object.`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--unwind`), ` argument takes a boolean or a block that evaluates to a\nboolean. It determines whether the execution stack continues to unwind after\nthe catch. By default `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `unwind`), ` is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `false`), `. If the block evaluates to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `true`), `\nthen the exception will continue to unwind the call stack as if the catch were\nnot present. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `unwind`), ` block is passed the thrown object as an argument,\nwhich it can use to determine whether to unwind.`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `my-function:\n  my-exception := catch --trace:\n    code-that-might-throw 42 103\n  if my-exception:\n    code-to-run-when-an-exception-was-thrown \"foo\" \"bar\"\n\n// Identifies exceptions that we want to catch.  Every other\n// exception will result in a stack trace on the console and\n// an uncaught exception (which may nevertheless be caught\n// further up the call stack).\nis-bad thrown-object:\n  return thrown-object != \"HARMLESS_ERROR\"\n\nmy-other-function:\n  exception := catch\n      --trace=: | thrown | is-bad thrown\n      --unwind=: | thrown | is-bad thrown:\n    code-that-might-throw 42 103\n  if exception:\n    // A harmless error was thrown.\n    code-to-run-when-an-exception-was-thrown \"foo\" \"bar\"\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#exception-handling","title":"Exception handling","items":[{"url":"#try-and-finally","title":"Try and finally"},{"url":"#throw","title":"Throw"},{"url":"#catch","title":"Catch"}]}]}}},"pageContext":{"title":"Exception handling","id":"3cf28ad1-c4dc-5e7b-a48b-b2595f7b826d"}},
    "staticQueryHashes": ["2197327828"]}