{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/typeconversion",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"common-conversions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#common-conversions\",\n    \"aria-label\": \"common conversions permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Common conversions`), mdx(\"p\", null, `The following examples show how to convert between strings, integers, floating point\nnumbers, characters (integer code points), and fixed point numbers in Toit.`), mdx(\"p\", null, `Some of these require the import of the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/fixed_point/library-summary\"\n  }, `fixed-point library`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import fixed-point show FixedPoint\n\nmain:\n  str := \"123\"\n  // Convert a string to an integer (base 10).\n  i := int.parse str // i is of type int.\n  print i is int  // => true\n  print i  // => 123\n\n  // Convert a string to an integer (base 16).\n  // As of 2020-12-10 only base 10 and 16 are supported.\n  i2 /int   := int.parse --radix=16 \"A0\"\n  print i2 is int  // => true\n  print i2  // => 160\n\n  // Convert a number to a string (direct conversion)\n  s2 /string := \"$i\"\n  print s2 + \" fish\"  // => \"123 fish\".\n\n  // Also convert a number to a string (string\n  // interpolation)\n  s3 /string := i.stringify\n  print s3 + \" fish\"  // => \"123 fish\".\n\n  // Convert a number to a string, base 16.\n  // Format specifiers like %x are well known from printf\n  // which exists in many languages.  In Toit they are\n  // placed in front of the value in a string interpolation\n  // like this.\n  s4 /string := \"$(%x i2)\"\n  print s4 + \" fish\"  // => \"a0 fish\".\n\n  // Gets a rune (Unicode code point) from a string.  This\n  // gets the integer representing the character at the\n  // position 0.\n  u/int := \"x\"[0]\n  print u  // => 120 because the Unicode value of 'x' is 120.\n\n  // Gets the integer representing the Euro sign at position\n  // 2.\n  u2/int := \"24€\"[2]\n  print u2  // => 8364 because the Euro sign is Unicode 8364.\n\n  // Convert a Unicode value to a string.\n  print (string.from-rune '\\\\u20ac') // => the Euro sign, €.\n  print (string.from-rune 0x20ac) // => the Euro sign, €.\n\n  // Also convert a Unicode value to a string. Here we are\n  // also using a format specifier inspired by printf. In\n  // Toit the %c format works for all Unicode values.\n  s5 /string := \"a string with $(%c u2) in the middle\"\n  print s5  // => the Euro sign, €.\n\n  // Convert a string to a floating point number.\n  f /float := float.parse \"1.5\"\n  print f  // => 1.5.\n\n  // Convert a floating point number to a string.\n  s6 /string := \"$f\"\n  print s6  // => \"1.5\".\n\n  //Also convert a floating point number to a string.\n  print f.stringify\n\n  // We can specify the precision after the decimal point\n  // using the %f format specifier.\n  PI ::= 3.1415926536\n  s7 /string := \"$(%0.3f 1.2) $(%0.2f PI)\"\n  print s7  // => \"1.200 3.14\"\n  //or\n  print (f.stringify 3)\n  print (PI.stringify 2)\n\n  // Convert an integer to a floating point number\n  f2 /float := i.to-float\n  print f2/2  // => 61.5, half of 123.\n\n  // Convert a floating point number to an integer, rounding\n  // towards zero.\n  i3 /int := (61.9).to-int\n  print i3  // => 61, rounded towards zero from 61.9.\n  i4 /int := (-61.9).to-int\n  print i4  // => -61, rounded towards zero from -61.9\n\n  // Convert a floating point number to an integer, rounding\n  // to nearest.\n  i5 /int := (61.9).round\n  print i5  // => 62, rounded to nearest integer.\n  i6 /int := (-61.9).round\n  print i6  // => -62, rounded to nearest integer.\n\n  // Convert a floating point number to a fixed point\n  // number.\n  fix /FixedPoint := FixedPoint 4.0 / 3.0\n  // Precision defaults to two decimal places:\n  print fix  // => 1.33\n\n  fix2 /FixedPoint := FixedPoint --decimals=3 PI\n  // This is pi, rounded to three places.\n  print fix2  // => 3.142\n\n  // Convert a fixed point number to a floating point\n  // number.  The long number is the consequence of working\n  // with floating-point numbers.\n  print fix2.to-float  // => 3.1419999999999999041\n\n  // Convert a fixed point number to an integer, rounding\n  // towards zero.\n  print fix2.to-int  // => 3, rounding towards zero.\n  print (-fix2).to-int  // => 3, rounding towards zero.\n\n  // Convert a string to a fixed point number.\n  fix3 := FixedPoint \"3.1415\"\n  // Precision is inferred from the string:\n  print fix3  // => 3.1415\n\n  fix4 := FixedPoint --decimals=2 \"3.1415\"\n  // The precision was given explicitly:\n  print fix4  // => 3.14\n\n  // Convert a fixed point number to a string.\n  s8 /string := \"$fix4\"\n  print s8  // => \"3.14\"\n  // or\n  print s8.stringify // => \"3.14\"\n`)), mdx(\"p\", null, `To write literal strings or literal character constants with\nspecial characters, see also the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../strings#escaped-characters\"\n  }, `escape syntax`), `.`), mdx(\"p\", null, `Null is `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../booleans\"\n  }, `converted to boolean`), `\nfalse, but only in `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `if`), `,\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `while`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `for`), `, and the ternary `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `?:`), ` operator. Other\nvalues, including zero, the empty string, and the empty\nlist, are all truthy in this context.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#common-conversions","title":"Common conversions"}]}}},"pageContext":{"title":"Common conversions","id":"a8430e44-1ccf-56bf-a40f-62ff02e3485a"}},
    "staticQueryHashes": ["2197327828"]}