{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/toitversus",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"language-comparison\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#language-comparison\",\n    \"aria-label\": \"language comparison permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Language comparison`), mdx(Tabs, {\n    noPadding: true,\n    mdxType: \"Tabs\"\n  }, mdx(Tab, {\n    label: \"Toit vs Python\",\n    mdxType: \"Tab\"\n  }, mdx(\"table\", null, mdx(\"tr\", null, mdx(\"th\", null), mdx(\"th\", null, \"Toit\"), mdx(\"th\", null, \"Python\")), mdx(\"tr\", null, mdx(\"td\", null, \"Current object\"), mdx(\"td\", null, mdx(\"pre\", null, \"this\")), mdx(\"td\", null, mdx(\"pre\", null, \"self\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Single line comments\"), mdx(\"td\", null, mdx(\"pre\", null, \"//\")), mdx(\"td\", null, mdx(\"pre\", null, \"#\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Logical 'and', 'or' and 'not' operators\"), mdx(\"td\", null, mdx(\"pre\", null, \"and or not\")), mdx(\"td\", null, mdx(\"pre\", null, \"and or not\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Shift left, right, unsigned right\"), mdx(\"td\", null, mdx(\"pre\", null, \"<<  >>  >>>\")), mdx(\"td\", null, mdx(\"pre\", null, \"<< >> (no unsigned shift)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Integer division\"), mdx(\"td\", null, mdx(\"pre\", null, \"/ (on integer types)\")), mdx(\"td\", null, mdx(\"pre\", null, \"//\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Integer sizes\"), mdx(\"td\", null, mdx(\"pre\", null, \"64\")), mdx(\"td\", null, mdx(\"pre\", null, \"(arbitrary)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Statement grouping\"), mdx(\"td\", null, mdx(\"pre\", null, \"(indent)\")), mdx(\"td\", null, mdx(\"pre\", null, \"(indent)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a class Foo that inherits from Bar\"), mdx(\"td\", null, mdx(\"pre\", null, \"class Foo extends Bar:\")), mdx(\"td\", null, mdx(\"pre\", null, \"class Foo(Bar):\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define constructor for class Foo\"), mdx(\"td\", null, mdx(\"pre\", null, \"constructor x:\")), mdx(\"td\", null, mdx(\"pre\", null, \"def __init__(self, x):\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define constructor for class Foo that calls constructor of superclass Bar\"), mdx(\"td\", null, mdx(\"pre\", null, \"constructor x: super x\")), mdx(\"td\", null, mdx(\"pre\", null, \"def __init__(self, x): super(Bar, self).__init__(x)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Constructor that assigns to fields\"), mdx(\"td\", null, mdx(\"pre\", null, \"constructor .x:\")), mdx(\"td\", null, mdx(\"pre\", null, \"def __init__(self, x): self.x = x\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Check object has type\"), mdx(\"td\", null, mdx(\"pre\", null, \"bar is Foo\")), mdx(\"td\", null, mdx(\"pre\", null, \"isinstance(bar, Foo)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Check object does not have type\"), mdx(\"td\", null, mdx(\"pre\", null, \"bar is not Foo\")), mdx(\"td\", null, mdx(\"pre\", null, \"not isinstance(bar, Foo)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Call a method foo with two arguments\"), mdx(\"td\", null, mdx(\"pre\", null, \"foo x y\")), mdx(\"td\", null, mdx(\"pre\", null, \"foo(x, y)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Declare a member variable in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"x := null x := ? x/int := 0 x/int := ?\")), mdx(\"td\", null, mdx(\"pre\", null, \"self.x = null\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Declare a local variable in a method\"), mdx(\"td\", null, mdx(\"pre\", null, \"x := null x := ? x/int := 0 x/int := ?\")), mdx(\"td\", null, mdx(\"pre\", null, \"x = null\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a constant\"), mdx(\"td\", null, mdx(\"pre\", null, \"X ::= 0\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a constant in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"static X ::= 0\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a top-level function\"), mdx(\"td\", null, mdx(\"pre\", null, \"foo x y:\")), mdx(\"td\", null, mdx(\"pre\", null, \"def foo(x, y):\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define an instance method in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"foo x y:\")), mdx(\"td\", null, mdx(\"pre\", null, \"def foo(self, x, y):\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a static method in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"static foo x y\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"If statement\"), mdx(\"td\", null, mdx(\"pre\", null, \"if condition:\")), mdx(\"td\", null, mdx(\"pre\", null, \"if condition:\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Fixed loop\"), mdx(\"td\", null, mdx(\"pre\", null, \"end.repeat: | i |\")), mdx(\"td\", null, mdx(\"pre\", null, \"for i in range(end):\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Three-part for loop\"), mdx(\"td\", null, mdx(\"pre\", null, \"for i := 0; i < end; i++:\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Iterate over collection\"), mdx(\"td\", null, mdx(\"pre\", null, \"collection.do: | x |\")), mdx(\"td\", null, mdx(\"pre\", null, \"for x in collection:\"))), mdx(\"tr\", null, mdx(\"td\", null, \"While loop\"), mdx(\"td\", null, mdx(\"pre\", null, \"while condition:\")), mdx(\"td\", null, mdx(\"pre\", null, \"while condition:\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Import local from library\"), mdx(\"td\", null, mdx(\"pre\", null, \"import .library\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Import from library\"), mdx(\"td\", null, mdx(\"pre\", null, \"import library\")), mdx(\"td\", null, mdx(\"pre\", null, \"import library\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Import into current namespace\"), mdx(\"td\", null, mdx(\"pre\", null, \"import library show *\")), mdx(\"td\", null, mdx(\"pre\", null, \"from library import *\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Print/log\"), mdx(\"td\", null, mdx(\"pre\", null, \"print \\\"Hello\\\"\")), mdx(\"td\", null, mdx(\"pre\", null, \"print(\\\"Hello\\\")\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Print with interpolation\"), mdx(\"td\", null, mdx(\"pre\", null, \"print \\\"Hello $name\\\"\")), mdx(\"td\", null, mdx(\"pre\", null, \"print(\\\"Hello %s\\\" %(name))\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Interpolate with padding\"), mdx(\"td\", null, mdx(\"pre\", null, \"print \\\"Hello $(%9s name)\\\"\")), mdx(\"td\", null, mdx(\"pre\", null, \"print(\\\"Hello %9s\\\", %(name))\"))))), mdx(Tab, {\n    label: \"Toit vs C++\",\n    mdxType: \"Tab\"\n  }, mdx(\"table\", null, mdx(\"tr\", null, mdx(\"th\", null), mdx(\"th\", null, mdx(\"pre\", null, \"Toit\")), mdx(\"th\", null, mdx(\"pre\", null, \"C++\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Current object\"), mdx(\"td\", null, mdx(\"pre\", null, \"this\")), mdx(\"td\", null, mdx(\"pre\", null, \"this\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Single line comments\"), mdx(\"td\", null, mdx(\"pre\", null, \"//\")), mdx(\"td\", null, mdx(\"pre\", null, \"//\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Logical 'and', 'or' and 'not' operators\"), mdx(\"td\", null, mdx(\"pre\", null, \"and or not\")), mdx(\"td\", null, mdx(\"pre\", null, \"&& || ! (or and or not)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Shift left, right, unsigned right\"), mdx(\"td\", null, mdx(\"pre\", null, \"<<  >>  >>>\")), mdx(\"td\", null, mdx(\"pre\", null, \"<< >> >>  (on unsigned type)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Integer division\"), mdx(\"td\", null, mdx(\"pre\", null, \"/ (on integer types)\")), mdx(\"td\", null, mdx(\"pre\", null, \"/ (on integer type)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Integer sizes\"), mdx(\"td\", null, mdx(\"pre\", null, \"64\")), mdx(\"td\", null, mdx(\"pre\", null, \"8/16/32/64...\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Statement grouping\"), mdx(\"td\", null, mdx(\"pre\", null, \"(indent)\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a class Foo that inherits from Bar\"), mdx(\"td\", null, mdx(\"pre\", null, \"class Foo extends Bar:\")), mdx(\"td\", null, mdx(\"pre\", null, \"class Foo : public Bar {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define constructor for class Foo\"), mdx(\"td\", null, mdx(\"pre\", null, \"constructor x:\")), mdx(\"td\", null, mdx(\"pre\", null, \"Foo(int x) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define constructor for class Foo that calls constructor of superclass Bar\"), mdx(\"td\", null, mdx(\"pre\", null, \"constructor x: super x\")), mdx(\"td\", null, mdx(\"pre\", null, \"Foo(int x) : Bar(x) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Constructor that assigns to fields\"), mdx(\"td\", null, mdx(\"pre\", null, \"constructor .x:\")), mdx(\"td\", null, mdx(\"pre\", null, \"Foo(int x) : x(x) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Check object has type\"), mdx(\"td\", null, mdx(\"pre\", null, \"bar is Foo\")), mdx(\"td\", null, mdx(\"pre\", null, \"(dynamic_cast<Foo*>(bar) != null)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Check object does not have type\"), mdx(\"td\", null, mdx(\"pre\", null, \"bar is not Foo\")), mdx(\"td\", null, mdx(\"pre\", null, \"(dynamic_cast<Foo*>(bar) == null)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Call a method foo with two arguments\"), mdx(\"td\", null, mdx(\"pre\", null, \"foo x y\")), mdx(\"td\", null, mdx(\"pre\", null, \"foo(x, y);\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Declare a member variable in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"x := null x := ? x/int := 0 x/int := ?\")), mdx(\"td\", null, mdx(\"pre\", null, \"int x; int x = 0;\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Declare a local variable in a method\"), mdx(\"td\", null, mdx(\"pre\", null, \"x := null x := ? x/int := 0 x/int := ?\")), mdx(\"td\", null, mdx(\"pre\", null, \"int x; int x = 0;\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a constant\"), mdx(\"td\", null, mdx(\"pre\", null, \"X ::= 0\")), mdx(\"td\", null, mdx(\"pre\", null, \"const int X = 0;\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a constant in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"static X ::= 0\")), mdx(\"td\", null, mdx(\"pre\", null, \"static const int X = 0;\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a top-level function\"), mdx(\"td\", null, mdx(\"pre\", null, \"foo x y:\")), mdx(\"td\", null, mdx(\"pre\", null, \"int foo(int x, int y) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define an instance method in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"foo x y:\")), mdx(\"td\", null, mdx(\"pre\", null, \"int foo(int x, int y) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a static method in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"static foo x y\")), mdx(\"td\", null, mdx(\"pre\", null, \"static int foo(int x, int y) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"If statement\"), mdx(\"td\", null, mdx(\"pre\", null, \"if condition:\")), mdx(\"td\", null, mdx(\"pre\", null, \"if (condition) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Fixed loop\"), mdx(\"td\", null, mdx(\"pre\", null, \"end.repeat:\")), mdx(\"td\", null, mdx(\"pre\", null, \"i |                    | for (int i = 0; i < end; i++) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Three-part expression loop\"), mdx(\"td\", null, mdx(\"pre\", null, \"for i := 0; i < end; i++:\")), mdx(\"td\", null, mdx(\"pre\", null, \"for (int i = 0; i < end; i++) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Iterate over collection\"), mdx(\"td\", null, mdx(\"pre\", null, \"collection.do:\")), mdx(\"td\", null, mdx(\"pre\", null, \"x |                 | for (auto x : collection) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"While loop\"), mdx(\"td\", null, mdx(\"pre\", null, \"while condition:\")), mdx(\"td\", null, mdx(\"pre\", null, \"while (condition) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Import local from library\"), mdx(\"td\", null, mdx(\"pre\", null, \"import .library\")), mdx(\"td\", null, mdx(\"pre\", null, \"#include \\\"file\\\"\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Import from library\"), mdx(\"td\", null, mdx(\"pre\", null, \"import library\")), mdx(\"td\", null, mdx(\"pre\", null, \"#include <file>\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Import into current namespace\"), mdx(\"td\", null, mdx(\"pre\", null, \"import library show *\")), mdx(\"td\", null, mdx(\"pre\", null, \"#include <file> using namespace file;\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Print/log\"), mdx(\"td\", null, mdx(\"pre\", null, \"print \\\"Hello\\\"\")), mdx(\"td\", null, mdx(\"pre\", null, \"cout << \\\"Hello\\\\n\\\"\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Print with interpolation\"), mdx(\"td\", null, mdx(\"pre\", null, \"print \\\"Hello $name\\\"\")), mdx(\"td\", null, mdx(\"pre\", null, \"cout << \\\"Hello \\\" << name << \\\"\\\\n\\\";\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Interpolate with padding\"), mdx(\"td\", null, mdx(\"pre\", null, \"print \\\"Hello $(%9s name)\\\"\")), mdx(\"td\", null, mdx(\"pre\", null, \"printf(\\\"Hello %9s\\\\n\\\", name);\"))))), mdx(Tab, {\n    label: \"Toit vs Java\",\n    mdxType: \"Tab\"\n  }, mdx(\"table\", null, mdx(\"tr\", null, mdx(\"th\", null), mdx(\"th\", null, mdx(\"pre\", null, \"Toit\")), mdx(\"th\", null, mdx(\"pre\", null, \"Java\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Current object\"), mdx(\"td\", null, mdx(\"pre\", null, \"this\")), mdx(\"td\", null, mdx(\"pre\", null, \"this\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Single line comments\"), mdx(\"td\", null, mdx(\"pre\", null, \"//\")), mdx(\"td\", null, mdx(\"pre\", null, \"//\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Logical 'and', 'or' and 'not' operators\"), mdx(\"td\", null, mdx(\"pre\", null, \"and or not\")), mdx(\"td\", null, mdx(\"pre\", null, \"&& || !\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Shift left, right, unsigned right\"), mdx(\"td\", null, mdx(\"pre\", null, \"<<  >>  >>>\")), mdx(\"td\", null, mdx(\"pre\", null, \"<< >> >>>\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Integer division\"), mdx(\"td\", null, mdx(\"pre\", null, \"/ (on integer types)\")), mdx(\"td\", null, mdx(\"pre\", null, \"/ (on integer type)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Integer sizes\"), mdx(\"td\", null, mdx(\"pre\", null, \"64\")), mdx(\"td\", null, mdx(\"pre\", null, \"8/16/32/64\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Statement grouping\"), mdx(\"td\", null, mdx(\"pre\", null, \"(indent)\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a class Foo that inherits from Bar\"), mdx(\"td\", null, mdx(\"pre\", null, \"class Foo extends Bar:\")), mdx(\"td\", null, mdx(\"pre\", null, \"public class Foo extends Bar {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define constructor for class Foo\"), mdx(\"td\", null, mdx(\"pre\", null, \"constructor x:\")), mdx(\"td\", null, mdx(\"pre\", null, \"public Foo(int x) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define constructor for class Foo that calls constructor of superclass Bar\"), mdx(\"td\", null, mdx(\"pre\", null, \"constructor x: super x\")), mdx(\"td\", null, mdx(\"pre\", null, \"public Foo(int x) { super(x);\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Constructor that assigns to fields\"), mdx(\"td\", null, mdx(\"pre\", null, \"constructor .x:\")), mdx(\"td\", null, mdx(\"pre\", null, \"Foo(int x) { field_x = x;\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Check object has type\"), mdx(\"td\", null, mdx(\"pre\", null, \"bar is Foo\")), mdx(\"td\", null, mdx(\"pre\", null, \"bar instanceof Foo\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Check object does not have type\"), mdx(\"td\", null, mdx(\"pre\", null, \"bar is not Foo\")), mdx(\"td\", null, mdx(\"pre\", null, \"!(bar instanceof Foo)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Call a method foo with two arguments\"), mdx(\"td\", null, mdx(\"pre\", null, \"foo x y\")), mdx(\"td\", null, mdx(\"pre\", null, \"foo(x, y);\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Declare a member variable in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"x := null x := ? x/int := 0 x/int := ?\")), mdx(\"td\", null, mdx(\"pre\", null, \"int x; int x = 0;\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Declare a local variable in a method\"), mdx(\"td\", null, mdx(\"pre\", null, \"x := null x := ? x/int := 0 x/int := ?\")), mdx(\"td\", null, mdx(\"pre\", null, \"int x; int x = 0;\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a constant\"), mdx(\"td\", null, mdx(\"pre\", null, \"X ::= 0\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a constant in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"static X ::= 0\")), mdx(\"td\", null, mdx(\"pre\", null, \"public static final int X = 0;\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a top-level function\"), mdx(\"td\", null, mdx(\"pre\", null, \"foo x y:\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Define an instance method in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"foo x y:\")), mdx(\"td\", null, mdx(\"pre\", null, \"public int foo(int x, int y) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a static method in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"static foo x y\")), mdx(\"td\", null, mdx(\"pre\", null, \"public static int foo(int x, int y) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"If statement\"), mdx(\"td\", null, mdx(\"pre\", null, \"if condition:\")), mdx(\"td\", null, mdx(\"pre\", null, \"if (condition) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Fixed loop\"), mdx(\"td\", null, mdx(\"pre\", null, \"end.repeat: | i |\")), mdx(\"td\", null, mdx(\"pre\", null, \"for (int i = 0; i < end; i++) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Three-part expression loop\"), mdx(\"td\", null, mdx(\"pre\", null, \"for i := 0; i < end; i++:\")), mdx(\"td\", null, mdx(\"pre\", null, \"for (int i = 0; i < end; i++) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Iterate over collection\"), mdx(\"td\", null, mdx(\"pre\", null, \"collection.do: | x |\")), mdx(\"td\", null, mdx(\"pre\", null, \"for (Foo x : collection) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"While loop\"), mdx(\"td\", null, mdx(\"pre\", null, \"while condition:\")), mdx(\"td\", null, mdx(\"pre\", null, \"while (condition) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Import local from library\"), mdx(\"td\", null, mdx(\"pre\", null, \"import .library\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Import from library\"), mdx(\"td\", null, mdx(\"pre\", null, \"import library\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Import into current namespace\"), mdx(\"td\", null, mdx(\"pre\", null, \"import library show *\")), mdx(\"td\", null, mdx(\"pre\", null, \"import com.example.Class;\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Print/log\"), mdx(\"td\", null, mdx(\"pre\", null, \"print \\\"Hello\\\"\")), mdx(\"td\", null, mdx(\"pre\", null, \"System.out.println(\\\"Hello\\\");\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Print with interpolation\"), mdx(\"td\", null, mdx(\"pre\", null, \"print \\\"Hello $name\\\"\")), mdx(\"td\", null, mdx(\"pre\", null, \"System.out.printf(\\\"Hello %s\\\\n, name);\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Interpolate with padding\"), mdx(\"td\", null, mdx(\"pre\", null, \"print \\\"Hello $(%9s name)\\\"\")), mdx(\"td\", null, mdx(\"pre\", null, \"System.out.printf(\\\"Hello %9s\\\\n, name);\"))))), mdx(Tab, {\n    label: \"Toit vs JavaScript\",\n    mdxType: \"Tab\"\n  }, mdx(\"table\", null, mdx(\"tr\", null, mdx(\"th\", null), mdx(\"th\", null, mdx(\"pre\", null, \"Toit\")), mdx(\"th\", null, mdx(\"pre\", null, \"JavaScript\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Current object\"), mdx(\"td\", null, mdx(\"pre\", null, \"this\")), mdx(\"td\", null, mdx(\"pre\", null, \"this\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Single line comments\"), mdx(\"td\", null, mdx(\"pre\", null, \"//\")), mdx(\"td\", null, mdx(\"pre\", null, \"//\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Logical 'and', 'or' and 'not' operators\"), mdx(\"td\", null, mdx(\"pre\", null, \"and or not\")), mdx(\"td\", null, mdx(\"pre\", null, \"&& || !\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Shift left, right, unsigned right\"), mdx(\"td\", null, mdx(\"pre\", null, \"<<  >>  >>>\")), mdx(\"td\", null, mdx(\"pre\", null, \"<< >> >>>\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Integer division\"), mdx(\"td\", null, mdx(\"pre\", null, \"/ (on integer types)\")), mdx(\"td\", null, mdx(\"pre\", null, \"Math.trunc(x / y)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Integer sizes\"), mdx(\"td\", null, mdx(\"pre\", null, \"64\")), mdx(\"td\", null, mdx(\"pre\", null, \"32, 53\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Statement grouping\"), mdx(\"td\", null, mdx(\"pre\", null, \"(indent)\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a class Foo that inherits from Bar\"), mdx(\"td\", null, mdx(\"pre\", null, \"class Foo extends Bar:\")), mdx(\"td\", null, mdx(\"pre\", null, \"class Foo extends Bar {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define constructor for class Foo\"), mdx(\"td\", null, mdx(\"pre\", null, \"constructor x:\")), mdx(\"td\", null, mdx(\"pre\", null, \"constructor(x) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define constructor for class Foo that calls constructor of superclass Bar\"), mdx(\"td\", null, mdx(\"pre\", null, \"constructor x: super x\")), mdx(\"td\", null, mdx(\"pre\", null, \"constructor(x) { super(x);\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Constructor that assigns to fields\"), mdx(\"td\", null, mdx(\"pre\", null, \"constructor .x:\")), mdx(\"td\", null, mdx(\"pre\", null, \"constructor(x) { this.x = x\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Check object has type\"), mdx(\"td\", null, mdx(\"pre\", null, \"bar is Foo\")), mdx(\"td\", null, mdx(\"pre\", null, \"bar instanceof Foo\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Check object does not have type\"), mdx(\"td\", null, mdx(\"pre\", null, \"bar is not Foo\")), mdx(\"td\", null, mdx(\"pre\", null, \"!(bar instanceof Foo)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Call a method foo with two arguments\"), mdx(\"td\", null, mdx(\"pre\", null, \"foo x y\")), mdx(\"td\", null, mdx(\"pre\", null, \"foo(x, y)\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Declare a member variable in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"x := null x := ? x/int := 0 x/int := ?\")), mdx(\"td\", null, mdx(\"pre\", null, \"this.x = null\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Declare a local variable in a method\"), mdx(\"td\", null, mdx(\"pre\", null, \"x := null x := ? x/int := 0 x/int := ?\")), mdx(\"td\", null, mdx(\"pre\", null, \"var x = null\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a constant\"), mdx(\"td\", null, mdx(\"pre\", null, \"X ::= 0\")), mdx(\"td\", null, mdx(\"pre\", null, \"const X = 0\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a constant in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"static X ::= 0\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a top-level function\"), mdx(\"td\", null, mdx(\"pre\", null, \"foo x y:\")), mdx(\"td\", null, mdx(\"pre\", null, \"function foo(x, y) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define an instance method in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"foo x y:\")), mdx(\"td\", null, mdx(\"pre\", null, \"foo(x, y) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Define a static method in a class\"), mdx(\"td\", null, mdx(\"pre\", null, \"static foo x y\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"If statement\"), mdx(\"td\", null, mdx(\"pre\", null, \"if condition:\")), mdx(\"td\", null, mdx(\"pre\", null, \"if (condition) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Fixed loop\"), mdx(\"td\", null, mdx(\"pre\", null, \"end.repeat: | i |\")), mdx(\"td\", null, mdx(\"pre\", null, \"for (var i = 0; i < end; i++) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Three-part expression loop\"), mdx(\"td\", null, mdx(\"pre\", null, \"for i := 0; i < end; i++:\")), mdx(\"td\", null, mdx(\"pre\", null, \"for (var i = 0; i < end; i++) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Iterate over collection\"), mdx(\"td\", null, mdx(\"pre\", null, \"collection.do: | x |\")), mdx(\"td\", null, mdx(\"pre\", null, \"for (var x in collection) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"While loop\"), mdx(\"td\", null, mdx(\"pre\", null, \"while condition:\")), mdx(\"td\", null, mdx(\"pre\", null, \"while (condition) {\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Import local from library\"), mdx(\"td\", null, mdx(\"pre\", null, \"import .library\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Import from library\"), mdx(\"td\", null, mdx(\"pre\", null, \"import library\")), mdx(\"td\", null, mdx(\"pre\", null, \"var library = require('library');\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Import into current namespace\"), mdx(\"td\", null, mdx(\"pre\", null, \"import library show *\")), mdx(\"td\", null, mdx(\"pre\", null))), mdx(\"tr\", null, mdx(\"td\", null, \"Print/log\"), mdx(\"td\", null, mdx(\"pre\", null, \"print \\\"Hello\\\"\")), mdx(\"td\", null, mdx(\"pre\", null, \"console.log(\\\"Hello\\\")\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Print with interpolation\"), mdx(\"td\", null, mdx(\"pre\", null, \"print \\\"Hello $name\\\"\")), mdx(\"td\", null, mdx(\"pre\", null, \"console.log(\\\"Hello \\\" + name + \\\"\\\\n\\\")\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Interpolate with padding\"), mdx(\"td\", null, mdx(\"pre\", null, \"print \\\"Hello $(%9s name)\\\"\")), mdx(\"td\", null, mdx(\"pre\", null)))))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#language-comparison","title":"Language comparison"}]}}},"pageContext":{"title":"Language comparison","id":"1040bb4c-b9ce-567c-9176-81bba8f3c213"}},
    "staticQueryHashes": ["2197327828"]}