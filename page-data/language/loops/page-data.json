{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/loops",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"control-flow\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#control-flow\",\n    \"aria-label\": \"control flow permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Control flow`), mdx(\"h2\", {\n    \"id\": \"if-statements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#if-statements\",\n    \"aria-label\": \"if statements permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `If-statements`), mdx(\"p\", null, `If-statements work in a very similar way to other languages.\nThe condition is terminated with a colon, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `:`), `, and the body\nis either a one-liner on the same line, or delimited by indentation:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  if i == 42: print \"Found the answer!\"\n  if i < 100:\n    print \"Found a smallish number!\"\n`)), mdx(\"p\", null, `Else-clauses work in the same way:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  if i % 3 == 0:\n    print \"fizz\"\n  else:\n    print i\n`)), mdx(\"p\", null, `Cascaded `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `if`), `s can be written with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `else if`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  if i % 3 == 0:\n    if i % 5 == 0:\n      print \"fizzbuzz\"\n    else:\n      print \"fizz\"\n  else if i % 5 == 0:\n    print \"buzz\"\n  else:\n    print i\n`)), mdx(\"p\", null, `Sometimes you may prefer the ternary `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `?:`), ` operator instead of small `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `if`), `s:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  buzz := i % 5 == 0\n  if i % 3 == 0:\n    print (buzz ? \"fizzbuzz\" : \"fizz\")\n  else if buzz:\n    print \"buzz\"\n  else:\n    print i\n`)), mdx(\"h2\", {\n    \"id\": \"loops\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#loops\",\n    \"aria-label\": \"loops permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Loops`), mdx(\"p\", null, `Often, loops are used to iterate over a collection. In this case you should\nusually use the built-in\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/core/collections/class-Collection#do(1%2C1%2C0%2C)\"\n  }, `do method of the Collection class`), `.\nSome collections also have\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/core/collections/class-List#do(2%2C1%2C0%2Creversed)\"\n  }, `do --reversed`), `\nfor looping from last to first.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  // Create a list containing 30 element, each slot set to its index.\n  list := List 30: it\n\n  // Loop over all elements in a list:\n  list.do: | element |\n    print element\n\n  // Loop over elements 10 to 19 of a list, using a slice:\n  list[10..20].do: | element |\n    print element\n\n  // Loop over all elements, except the first (the one with\n  // index zero):\n  list[1..].do:\n    print it\n`)), mdx(\"p\", null, `At an even higher level, the built-in collections have some\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../listsetmap#functional-methods\"\n  }, `functional-style methods`), `,\nlike `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `any`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `every`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `reduce`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `map`), ` that iterate over collections for you`), mdx(\"p\", null, `However, sometimes you have to write your own loops. The rest of this section\nwill explain how that works in Toit.`), mdx(\"p\", null, `If you simply want to execute a block of code multiple times you can use\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/core/numbers/class-int#repeat(1%2C1%2C0%2C)\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, `repeat`)), `\nwhich is a method on the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/core/numbers/class-int\"\n  }, `int class`), `\nthat takes a `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../blocks-and-lambdas\"\n  }, `Toit block`), `.`), mdx(\"p\", null, `Example of a loop that runs a fixed number of times, given by the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `end`), ` integer variable.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  end.repeat: | i | print i\n`)), mdx(\"p\", null, `To use steps, use a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `for`), ` loop as in:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  for i := start; i < end; i += step: print i\n`)), mdx(\"p\", null, `Use a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `while`), ` loop to execute a code block as long as a condition is true, as in the following example:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  max := 5\n  counter := 0\n\n  while counter < max:\n    print counter\n    counter += 1\n`)), mdx(\"h2\", {\n    \"id\": \"breaking-loops\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#breaking-loops\",\n    \"aria-label\": \"breaking loops permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Breaking loops`), mdx(\"p\", null, `Sometimes, it is necessary to terminate a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `for`), ` loop or a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `while`), ` loop\nprematurely regardless of the results of the conditional tests. In these cases,\nyou can use the break statement:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  max := 50\n  counter := 0\n\n  while counter < max:\n    print counter\n    counter += 1\n    if counter > 20: break\n`)), mdx(\"p\", null, `Similarly you can use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `continue`), ` statement to skip the rest of a loop and go straight to the next iteration:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  sum := 0\n  for i := 0; i < 10; i++:\n    print sum\n    if sum >= 10: continue\n    // This line is skipped if sum is already >= 10.\n    sum += i\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `for`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `while`), ` loops are control structures built into the language,\nwhich support `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `break`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `continue`), `. On the other hand, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `repeat`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `do`), ` are\nmethods that take blocks. Here you have to add the method name (do or repeat)\nto the continue statement, to indicate which loop you wish to continue.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  sum := 0\n  10.repeat:\n    print sum\n    if sum > 10:\n      continue.repeat  // Skip the rest of the block.\n    sum += it\n`)), mdx(\"p\", null, `The equivalent `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `break.do`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `break.repeat`), ` are not yet implemented.`), mdx(\"p\", null, `Sometimes you can instead use a return statement that exits the method completely:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `my-function collection:\n  collection.do:\n    if it.is-the-one-we-want:\n      // Returns from my-function, also breaks out of the\n      // loop.\n      return it\n  return null\n`)), mdx(\"p\", null, `If this is not possible, and you need an actual `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `break`), ` statement, the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `do`), ` or\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `repeat`), ` can be rewritten with a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `for`), ` loop.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#control-flow","title":"Control flow","items":[{"url":"#if-statements","title":"If-statements"},{"url":"#loops","title":"Loops"},{"url":"#breaking-loops","title":"Breaking loops"}]}]}}},"pageContext":{"title":"Control flow","id":"5f66253e-9d17-596c-b210-fb1c275e1fac"}},
    "staticQueryHashes": ["2197327828"]}