{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/imports",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"imports\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#imports\",\n    \"aria-label\": \"imports permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Imports`), mdx(\"p\", null, `Import statements make code from other libraries available in the current\nlibrary. They must be at the top-level and at the top of the file (possibly\nfollowing some comments).`), mdx(\"p\", null, `An import always starts with the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import`), ` keyword, followed by identifier\nsegments that tell Toit how to find the library. Optionally it can be\nsuffixed by customizations:`), mdx(\"p\", null, `For example:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import math\nimport net.tcp as network\nimport encodings.json show encode\nimport .other\n`)), mdx(\"p\", null, `Depending on whether the identifier segments start with a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `.`), ` or not, the\nimport is a local or global import. Toit uses a different strategy to\nlocate the target file for each of these two strategies.`), mdx(\"h2\", {\n    \"id\": \"local\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#local\",\n    \"aria-label\": \"local permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Local`), mdx(\"p\", null, `For local imports Toit searches for the target library relative to the\ncurrent library.`), mdx(\"p\", null, `For example, let's assume we have a file structure as follows:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `.\n├── my-lib\n│   ├── my-lib.toit\n│   ├── other.toit\n│   └── sub\n│       └── sub.toit\n└── sibling\n    ├── sibling2.toit\n    └── sibling.toit\n\n3 directories, 5 files\n`)), mdx(\"p\", null, `If we are editing `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `my-lib.toit`), ` then we can import `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `other.toit`), ` and\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `sibling.toit`), ` as follows:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// In my-lib.toit.\nimport .other\nimport .sub.sub\nimport ..sibling.sibling\nimport ..sibling.sibling2\n`)), mdx(\"p\", null, `Note, that `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import .sub.sub`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import ..sibling.sibling`), ` could\nbe shortened to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import .sub`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import ..sibling`), ` respectively.\n(See `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#folder-shortcut\"\n  }, `folder shortcut`), ` below).`), mdx(\"p\", null, `The first `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `.`), ` indicates that the import is a local import. Further\ndots move up the folder hierarchy.`), mdx(\"p\", null, `For locally imported libraries all their top-level elements are\ndirectly visible inside the importing library without any prefix.\nSee `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#customizations\"\n  }, `customizations`), ` below for ways of changing that.`), mdx(\"h2\", {\n    \"id\": \"global\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#global\",\n    \"aria-label\": \"global permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Global`), mdx(\"p\", null, `Global imports are importing libraries that come from packages or the SDK.\nFor example `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import math`), ` imports the mathematics library that is shipped\nwith the SDK.`), mdx(\"p\", null, `The compiler has a mapping from identifier to location. The first\nidentifier in the segment list is used to find a folder or file. After that,\nthe local and global resolution works the same. That is, a global import\ncan dot into sub-folders the same way as for local imports. A common\nuse of dotting is for the JSON library which is a sub-folder of encodings:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import encodings.json\n`)), mdx(\"p\", null, `Once imported, all global elements of the imported library are available\nthrough a prefix. By default the prefix is the last identifier of the\nsegment list. In the case of the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `encodings.json`), ` import above, the prefix\nwould thus be `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `json`), `, and one could call `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `json.parse`), ` to call the\ntop-level `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `parse`), ` function of that library (`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/encoding/json/library-summary#parse(1%2C0%2C0%2C)\"\n  }, `toitdoc`), `).`), mdx(\"p\", null, `Note, that global imports also apply the folder shortcut, as\ndescribed `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#folder-shortcut\"\n  }, `below`), `.`), mdx(\"h2\", {\n    \"id\": \"folder-shortcut\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#folder-shortcut\",\n    \"aria-label\": \"folder shortcut permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Folder shortcut`), mdx(\"p\", null, `It is very common to have a folder and a Toit file with the same name. The\nToit language thus has a shortcut to avoid repeating the last identifier\ntwice: if an import would resolve to a folder, Toit looks for a Toit file\nthat has the same name as the last segment.`), mdx(\"p\", null, `For example, assume we have the following structure:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `.\n├── main.toit\n└── sub\n    └── sub.toit\n\n1 directory, 2 files\n`)), mdx(\"p\", null, `Inside `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `main.toit`), ` we can import `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `sub.toit`), ` by writing `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import .sub.sub`), `.\nAs discussed, this is repetitive, so instead this can be shortened to:\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import .sub`), `.`), mdx(\"p\", null, `The same mechanism applies to SDK or package imports. If the resolution\nof an import finds a folder, Toit tries to find a file with the same\nname as the last segment instead.`), mdx(\"p\", null, `Say, we want to use the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitware/toit-morse\"\n  }, `morse package`), `.\nWhen installing this package\nwith `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg install github.com/toitware/toit-morse`), `,\n(or with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `toit.pkg ...`), `) the package manager\ndownloads the sources and adds a mapping from the package's name `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `morse`), ` to\nthe location it downloaded the sources. Specifically, the mapping points to\nthe `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `src`), ` folder of the package.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"If you are using Jaguar, you should use `jag pkg` (with a space) to install packages.  If you are using the standalone open source Toit SDK, you should use `toit.pkg` (with a dot).\"), mdx(\"p\", null, `Here is the file hierarchy of the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `morse`), ` package:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `.\n[...]\n├── src\n│   └── morse.toit\n[...]\n\n3 directories, 14 files\n`)), mdx(\"p\", null, `When the Toit language now sees an `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import morse`), ` it uses that mapping\nto find the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `src`), ` folder of the downloaded sources. Since, the target\nis a folder, Toit now uses the last identifier (here there is just one:\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `morse`), `) and search for `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `morse.toit`), ` in that folder.`), mdx(\"h2\", {\n    \"id\": \"customizations\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#customizations\",\n    \"aria-label\": \"customizations permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Customizations`), mdx(\"p\", null, `By default a local import simply makes all top-level elements of the\nimported library visible (without prefix). Similarly, a global import\nprovides the top-level elements through a prefix, which is the same\nas the last segment.`), mdx(\"p\", null, `In some cases this simple approach is not convenient, and Toit allows to\ncustomize imports.`), mdx(\"p\", null, `A developer can set the prefix of an import with the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `as`), ` clause:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import .other as other\nimport math as m\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `show`), ` keyword selectively imports the specified top-level elements\nand makes them available without prefix:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import math show sin cos\nimport .other show top-level-fun\n`)), mdx(\"p\", null, `In the example, we only import the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `sin`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `cos`), ` functions from the\nSDK's `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `math`), ` library and make it available without any prefix.`), mdx(\"p\", null, `For the local `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `.other`), ` import we restrict the import to one single\nidentifier: `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `top-level-fun`), `.`), mdx(\"p\", null, `If we want to access all identifiers of the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `math`), ` library without prefix\nwe can write `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import math show *`), `. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `show *`), ` clause just removes the\nprefix and treats the global import the same as a local import.`), mdx(\"h2\", {\n    \"id\": \"export\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#export\",\n    \"aria-label\": \"export permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Export`), mdx(\"p\", null, `Libraries can export elements from other libraries. Every exported element\nis visible as if it was a top-level element of the exporting library.`), mdx(\"p\", null, `For example:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// In file export-example.toit\n\nimport math show cos\n\nexport cos\n\nprint-hello:\n  print \"hello\"\n`)), mdx(\"p\", null, `When this library is imported, the importee sees two entries: `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `cos`), ` and\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `print-hello`), `. For example, let's say this library is imported locally\nas follows:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import .export-example as example\n\nmain:\n  example.print-hello\n  print (example.cos 0.0)\n`)), mdx(\"p\", null, `Here we import `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `export-example`), ` with a prefix `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `example`), `. This gives access\nto the elements `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `print-hello`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `cos`), ` on this prefix.`), mdx(\"p\", null, `Note that the main Toit file could also just import `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `math`), ` itself, but there\nare often reasons why that's not as convenient. Most commonly, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `export`), ` is\nused to provide a curated subset of a package.`), mdx(\"p\", null, `Say we have the following package structure:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `.\n└── src\n    ├── feature1.toit\n    ├── feature2.toit\n    ├── feature3.toit\n    └── my_package.toit\n\n1 directory, 4 files\n`)), mdx(\"p\", null, `Then the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `my_package.toit`), ` could be written as follows:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// We are the main-entry point for this package.\n// Provide the most common features.\nimport .feature1\nimport .feature2\n// Don't expose feature3 automatically. Users can\n// import it with \\`import my_package.feature3\\` if needed.\n\n// Export all identifiers.\nexport *\n`)), mdx(\"p\", null, `Similar to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `show *`), `, the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `export *`), ` affects all identifiers, and\nthus re-exports all elements that have been imported.`), mdx(\"h2\", {\n    \"id\": \"privacy\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#privacy\",\n    \"aria-label\": \"privacy permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Privacy`), mdx(\"p\", null, `The IDE will not show identifiers that end with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `_`), ` if they come from a\ndifferent package. There is no strict enforcement of this privacy\nmechanism, but developers should not use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `identifier_`), ` variables of\nlibraries that have been imported through a global import.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#imports","title":"Imports","items":[{"url":"#local","title":"Local"},{"url":"#global","title":"Global"},{"url":"#folder-shortcut","title":"Folder shortcut"},{"url":"#customizations","title":"Customizations"},{"url":"#export","title":"Export"},{"url":"#privacy","title":"Privacy"}]}]}}},"pageContext":{"title":"Imports","id":"504c18bc-035e-53f3-ae47-9729e7a8022f"}},
    "staticQueryHashes": ["2197327828"]}