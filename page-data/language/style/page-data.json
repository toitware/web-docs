{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/style",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"style-guide\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#style-guide\",\n    \"aria-label\": \"style guide permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Style guide`), mdx(\"p\", null, `This document describes the preferred style for the Toit language.\nTo learn about Toit's syntax see `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../syntax\"\n  }, `the syntax summary`), `.\nTo learn about Toit's\ndocumentation convention, see the language `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../sdk/toitdoc\"\n  }, `documentation\nconvention`), ` section.`), mdx(\"h2\", {\n    \"id\": \"whitespace-and-indentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#whitespace-and-indentation\",\n    \"aria-label\": \"whitespace and indentation permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Whitespace and indentation`), mdx(\"p\", null, `Indentation in Toit is always with spaces. Tabs are not allowed.`), mdx(\"p\", null, `We use two spaces for statements.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `j := 10\n\nmain:\n  for i := -10; i < j; i++:\n    print i\n    i = i + 1\n`)), mdx(\"p\", null, `When parameters are indented, they should be intented by four spaces:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `fun-with-many-params\n    param1 /int\n    param2 /string\n    param3 /Lambda:\n  return ...  // Code is again intended by 2.\n`)), mdx(\"p\", null, `Arguments are intended by four spaces, unless they are the body of a block or lambda:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  fun-with-many-params\n      1\n      \"string arg\"::\n    // Body of lambda is only intended by 2.\n    it + 1\n`)), mdx(\"p\", null, `The same applies for operators or other reasons when a line gets too long:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `my-function x/num y/num -> num:\n  return x * x * x\n      + y * y * y\n`)), mdx(\"h3\", {\n    \"id\": \"line-length\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#line-length\",\n    \"aria-label\": \"line length permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Line length`), mdx(\"p\", null, `There is no hard line length limit in Toit, but it is often\nmore readable to limit line lengths to 80 or 120 characters.`), mdx(\"p\", null, `Block comments can be line-wrapped at any point and should almost always be limited\nto 80 characters for readability, even in code that is wider for some reason.`), mdx(\"p\", null, `When breaking longer lines, the point of lowest `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../syntax#precedence\"\n  }, `precedence`), `\nshould be picked.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `my-badly-formatted-function x/num y/num -> num:\n  return x * x * x + y * y   // Don't break at high-precedence '*'.\n      * y\n\nmy-well-formatted-function x/num y/num -> num:\n  return x * x * x           // Break at low-precedence '+'.\n      + y * y * y\n`)), mdx(\"p\", null, `As seen above prefer to break before operators, not after operators.`), mdx(\"p\", null, `This fits well with the ability to `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../syntax#line-breaks-in-function-arguments\"\n  }, `use newlines in long argument\nlists`), `, since argument lists have\nlower precedence than operators.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  // Using newline instead of parentheses to delineate the\n  // single argument to the print function.\n  print\n    unary-function argument\n`)), mdx(\"h3\", {\n    \"id\": \"whitespace-around-operators\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#whitespace-around-operators\",\n    \"aria-label\": \"whitespace around operators permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Whitespace around operators`), mdx(\"p\", null, `Always surround operators with whitespace.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  x1:=y+1  // Not enough spaces.\n  x2 := y + 1  // Better spacing.\n`)), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  radians-1:=degrees*2*math.PI/180  // Not enough spaces.\n\n  radians-2 := degrees * 2 * math.PI / 180  // Better spacing.\n`)), mdx(\"p\", null, `Arguments to functions and methods also have single spacing.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `fib n:\n  if n < 2:\n    return 1\n  recurse := fib n - 1\n  return n * recurse\n`)), mdx(\"p\", null, `For functions with more than one argument this can be hard to read, in which\ncase you should add parentheses or newlines.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  my-func x+1 x*1          // Not enough spaces.\n  my-func x + 1 x * 1      // Hard to read.\n  my-func (x + 1) (x * 1)  // Easier to read.\n  my-func                  // Nice uncluttered look with newlines.\n      x + 1\n      x * 1\n`)), mdx(\"p\", null, `Between a line and an end-of-line comment there should be at least two spaces.\nMore can be added for alignment (see above).`), mdx(\"h2\", {\n    \"id\": \"naming\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#naming\",\n    \"aria-label\": \"naming permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Naming`), mdx(\"p\", null, `Most names in Toit are named with lower letters and dashes between words.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// Top level function.\nmy-function:\n  // Local variable\n  my-variable := 0\n`)), mdx(\"p\", null, `Classes are named with initial capital letters and camel case.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class MyClass:\n`)), mdx(\"p\", null, `This applies even if they contain abbreviations that\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\"\n  }, `would normally be written in all-caps`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class MyRgbToYuvConverter:\n`)), mdx(\"p\", null, `Constants are written in all-caps with dashes:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `FAHRENHEIT-MODE ::= 0\nCELCIUS-MODE ::= 1\nKELVIN-MODE ::= 2\n`)), mdx(\"p\", null, `We prefer not to use abbreviations in API-visible names unless they are\nvery well established.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// Name too abbreviated.\nf-to-c f/num -> num:\n  return (f - 32.0) / 9 * 5\n\n// Better.\nfahrenheit-to-celcius fahrenheit/num -> num:\n  return (fahrenheit - 32.0) / 9 * 5\n`)), mdx(\"p\", null, `An exception must be made for variables named `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `str`), ` since the name\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `string`), ` is taken for the string type, but often a better name than\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `str`), ` can be found.`), mdx(\"p\", null, `Package-private names end with an underscore.`), mdx(\"h2\", {\n    \"id\": \"comments\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#comments\",\n    \"aria-label\": \"comments permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Comments`), mdx(\"p\", null, `A single line comment is written as a full sentence, starting with a capital\nletter and ending with a period (.). At least two spaces should separate the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `//`), ` from code, and a space separates the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `//`), ` from the text of the comment.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `//bad\n\n// This is a single line comment in Toit.\n`)), mdx(\"p\", null, `See also `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../sdk/toitdoc\"\n  }, `documentation comments`), `.`), mdx(\"h2\", {\n    \"id\": \"declarations\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#declarations\",\n    \"aria-label\": \"declarations permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Declarations`), mdx(\"p\", null, `Variables and members are not given an initial value unless it makes\nsense.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  z := some-value\n  x := 0      // No need to give x an inital value.\n  y /int := ?  // Compiler will check it is initialized before being used.\n  if z == 1:\n    x = 1\n    y = 2\n  else:\n    x = 2\n    y = 1\n`)), mdx(\"p\", null, `Similarly for members:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class Foo:\n  x /int? := null  // Don't assign null unless you want this default\n  y /int  := ?     // Value comes from constructor.\n\n  constructor .x .y:  // Compiler will check that y is initialized.\n`)), mdx(\"h2\", {\n    \"id\": \"classes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#classes\",\n    \"aria-label\": \"classes permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Classes`), mdx(\"h3\", {\n    \"id\": \"getters-and-setters\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#getters-and-setters\",\n    \"aria-label\": \"getters and setters permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Getters and setters`), mdx(\"p\", null, `In Toit, getters and setters have the same syntax (for users of a class)\nas public member variables. Therefore there is no need to write trivial\nsetters and getters:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class UnneededPrivacy:\n  // No point in making this private since it has a trivial\n  // getter and setter.\n  x_ /int := ? // Private member variable.\n\n  constructor x/int:\n    x_ = x\n\n  // Getter.\n  x -> int:\n    return x_\n\n  // Setter.\n  x= value/int -> none:\n    x_ = value\n`)), mdx(\"p\", null, `Instead just make the member public:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class Simple:\n  x/int := ?\n\n  constructor .x:\n`)), mdx(\"p\", null, `If you later need to intercept the setter (for example for logging), you can always\nchange the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Simple`), ` to the implementation used by `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `UnneededPrivacy`), `\nwithout having to change users of the class.`), mdx(\"h2\", {\n    \"id\": \"types\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#types\",\n    \"aria-label\": \"types permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Types`), mdx(\"p\", null, `Elements of public APIs should be typed. Internal variables should\nbe typed where it aids readability and according to taste. It is\noften useful to type parameters, as they cannot be inferred by the\ncompiler.`), mdx(\"p\", null, `Types in argument lists are written without spaces in order to\ngroup the arguments visually:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `my-function x/int y/float z/string -> none:\n  // Implementation\n`)), mdx(\"p\", null, `Types of\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../objects-constructors-inheritance-interfaces#classes-in-toit\"\n  }, `instance variables`), `\nand locals are written with a space\nbefore the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `/`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class Foo:\n  x /int\n  y /string\n\n  constructor .x .y:\n`)), mdx(\"h2\", {\n    \"id\": \"literals\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#literals\",\n    \"aria-label\": \"literals permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Literals`), mdx(\"p\", null, `For list literals on multiple lines put a comma on every line, even the last:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `RGB ::= [\n  0.0,\n  50.0,\n  99.9,\n]\n`)), mdx(\"p\", null, `As seen above, the closing bracket is dedented to the initial indentation.`), mdx(\"p\", null, `If all values are in the 0-255 range and you don't expect to modify the\nlist with a non-byte value, consider using a ByteArray literal:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `RGB ::= #[\n  0,\n  0x80,\n  0xff\n]\n`)), mdx(\"h2\", {\n    \"id\": \"loops\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#loops\",\n    \"aria-label\": \"loops permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Loops`), mdx(\"p\", null, `For simple zero-to-n loops prefer `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `repeat`), ` to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `for`), `-loops.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  for i := 0; i < n; i++:  // No need for a for-loop.\n    print i\n\n  n.repeat:  // Easier to read and actually faster.\n    print it\n`)), mdx(\"p\", null, `If possible use the iteration built-in to the collection:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  for i := 0; i < list.size; i++:  // Not using the collection's own iterator.\n    print list[i]\n\n  list.size.repeat:  // Not using the collection's own iterator.\n    print list[it]\n\n  list.do:  // Good.\n    print it\n`)), mdx(\"p\", null, `In loop bodies more than one or two lines, give the iteration variable\na name instead of just using `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `it`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  list.do: | element |\n    if element >= 0:\n      print element\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#style-guide","title":"Style guide","items":[{"url":"#whitespace-and-indentation","title":"Whitespace and indentation","items":[{"url":"#line-length","title":"Line length"},{"url":"#whitespace-around-operators","title":"Whitespace around operators"}]},{"url":"#naming","title":"Naming"},{"url":"#comments","title":"Comments"},{"url":"#declarations","title":"Declarations"},{"url":"#classes","title":"Classes","items":[{"url":"#getters-and-setters","title":"Getters and setters"}]},{"url":"#types","title":"Types"},{"url":"#literals","title":"Literals"},{"url":"#loops","title":"Loops"}]}]}}},"pageContext":{"title":"Style guide","id":"0df125f4-8a73-56c9-a275-e6500be8a399"}},
    "staticQueryHashes": ["2197327828"]}