{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/strings",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"strings\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#strings\",\n    \"aria-label\": \"strings permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Strings`), mdx(\"p\", null, `Toit strings are immutable value objects, containing\nUnicode strings. The characters are encoded with\nUTF-8, although most of the time you can ignore this.`), mdx(\"h2\", {\n    \"id\": \"string-literals\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#string-literals\",\n    \"aria-label\": \"string literals permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `String literals`), mdx(\"p\", null, `String literals use double quotes, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\"`), `. (Single quotes\nare reserved for\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../syntax#string-and-character-literals\"\n  }, `character literals`), `.)`), mdx(\"p\", null, `If a string literal contains double quotes (`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\"`), `), or backslashes (`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\\\\`), `),\nthen these must be escaped with backslashes:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  print \"String with \\\\\"quotes\\\\\".\"  // >> String with \"quotes\".\n  print \"Zig zag string /\\\\\\\\/\\\\\\\\.\"   // >> Zig zag string /\\\\/\\\\.\n`)), mdx(\"p\", null, `As an alternative, you can embed double quote characters using\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#multi-line-strings\"\n  }, `triple-quote delimited`), ` strings:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  print \"\"\"String with \"quotes\".\"\"\"  // >> String with \"quotes\".\n`)), mdx(\"h2\", {\n    \"id\": \"escaped-characters\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#escaped-characters\",\n    \"aria-label\": \"escaped characters permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Escaped characters`), mdx(\"p\", null, `String and character literals can also contain other escaped\ncharacters, most of which could be written literally, but where it\nis often more readable to use escapes. For example, you can\nput a literal tab character in a literal string, but it will\nlook like a series of spaces, so you can use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\\\\t`), ` instead to\nmake it clearer.`), mdx(\"p\", null, `Toit supports the following escape sequences (see the ASCII\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/ASCII\"\n  }, `control code chart`), `\nfor the list of names):`), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Control code chart names`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Unicode character`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Unicode code point (rune)`))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\0`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `NUL`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `0`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\a`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Alert (Beep, Bell)`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `BEL`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `7`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\b`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Backspace`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `BS`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `8`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\f`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Form feed`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `FF`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `12`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\n`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Line Feed or Newline`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `LF`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `10`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\r`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Carriage Return`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `CR`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `13`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\t`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Horizontal Tab`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `HT`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `9`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\v`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Vertical Tab`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `VT`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `11`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\$`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `$ (See below for the use of $ for string interpolation)`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `36`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\\"`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `\"`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `34`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\'`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `39`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\\\\\`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `\\\\ `), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `92`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\uXXXX`), ` (where X is a hex char)`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://en.wikipedia.org/wiki/Code_point\"\n  }, `Unicode rune`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\u{X...}`), ` (where X... are hex chars)`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://en.wikipedia.org/wiki/Code_point\"\n  }, `Unicode rune`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\xXX`), ` (where X is a hex char)`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://en.wikipedia.org/wiki/Code_point\"\n  }, `Unicode rune`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\x{X...}`), ` (where X... are hex chars)`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://en.wikipedia.org/wiki/Code_point\"\n  }, `Unicode rune`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })))), mdx(\"p\", null, `The following shows some examples of the numeric escapes:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  // For two-digit code points (runes).\n  // using \\\\x, the curly braces are optional.\n  s1 /string := \"S\\\\xf8en s\\\\x{e5} s\\\\u{00e6}r ud.\"\n  print s1  // >> Søen så sær ud.\n\n  // For four-digit values you can either use \\\\x with curly\n  // braces or \\\\u.\n  s2 /string := \"\\\\u{20ac} \\\\u20ac \\\\x{20ac}\"\n  print s2  // Prints \"€ € €\", which is Unicode 0x20ac.\n\n  // The \\\\u version can also be used with curly braces.\n  // It is in fact necessary for 5-digit Unicode runes.\n  s3 /string := \"\\\\u{1f648}\"\n  print s3  // Prints the see-no-evil-monkey emoji.\n\n  // \\\\x{} is recommended for one or two digits, and \\\\u{} is\n  // recommended for three to five digits.\n\n  // The same escapes work in character literals.\n  c /int := '\\\\x2a'\n  print c  // Prints \"42\", which is the decimal from of 0x2a.\n\n  c2 /int := '\\\\''\n  print c2 // Prints \"39\", the ASCII code for a single quote.\n`)), mdx(\"p\", null, `See `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#multi-line-strings\"\n  }, `below`), ` for more advanced\nstring literals.`), mdx(\"h2\", {\n    \"id\": \"string-representation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#string-representation\",\n    \"aria-label\": \"string representation permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `String representation`), mdx(\"p\", null, `Strings are represented internally as\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/UTF-8\"\n  }, `UTF-8`), `\nbyte sequences. This is visible when requesting the length,\nwhich is given in bytes with the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `size`), ` getter:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  print \"Hello!\".size  // Prints \"6\", the number of bytes.\n  print \"Hellö!\".size  // Prints \"7\", the number of bytes.\n`)), mdx(\"p\", null, `It is also visible when using `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `[]`), ` to index into a string:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  print \"Hello!\"[0]  // Prints \"72\", the ASCII code for 'H'.\n  print \"Hellö!\"[4]  // Prints \"246\", the Unicode code point for 'ö'.\n`)), mdx(\"p\", null, `Since some UTF-8 sequences consist of multiple bytes, there\nare some index points that do not correspond to a character.\nAt these points, the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `[]`), ` indexing operation returns null.\nFor example, the Euro sign is coded as three bytes:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  print \"€2\".size  // Prints \"4\", the number of bytes in the string.\n  print \"€2\"[0]    // Prints \"8364\", the Unicode code for '€'.\n  print \"€2\"[1]    // Prints \"null\", no character starts at byte index 1.\n  print \"€2\"[2]    // Prints \"null\", no character starts at byte index 2.\n  print \"€2\"[3]    // Prints \"50\", the ASCII code for '2'.\n`)), mdx(\"p\", null, `Since null is `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../booleans\"\n  }, `falsy`), ` we can index\nonly the valid code points quite simply. The following\nprogram iterates over the 5-character, 6-byte string,\nprinting 163, 50, 46, 50, 52:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  STR ::= \"£2.24\"\n  for i := 0; i < STR.size; i++:\n    ch := STR[i]\n    if ch:  // Only handle non-null.\n      print ch\n`)), mdx(\"p\", null, `In this case it would be simpler to use the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/core/string/class-string#do(2%2C1%2C0%2Crunes)\"\n  }, `do --runes`), `\nmethod:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  STR ::= \"£2.24\"\n  STR.do --runes:\n    print it\n`)), mdx(\"p\", null, `Toit does not allow the construction of illegal UTF-8\nsequences. For example when converting byte arrays to\nstrings:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  // The following examples use the #[...] syntax for\n  // byte array literals.\n  // Create a single-character string containing an 'A':\n  s1/string := #[65].to-string\n  // Create a string with the word \"Hello\":\n  s2/string := #[72, 101, 108, 108, 111].to-string\n  // Null characters are allowed in strings:\n  s3/string := #[0].to-string\n  // Bytes above 127 are part of multi-byte UTF-8 sequences\n  // and cannot stand alone:\n  s4/string := #[128].to-string // Error: Not legal UTF-8!\n  s5/string := #[0xc0, 0xbb].to-string // Error: Overlong encoding!\n`)), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\"\n  }, `Surrogates`), `\nare also not legal in Toit strings.`), mdx(\"p\", null, `The raw UTF-8 bytes in a Toit string can be accessed with\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `at --raw`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  // Print all 10 UTF-8 bytes in the 8-character string.\n  s6 := \"RöckDöts\"\n  list := []  // Empty list.\n  s6.size.repeat: | index |  // Index ranges from 0 to 10.\n    list.add (s6.at --raw index)\n  print list  // >> [82, 195, 182, 99, 107, 68, 195, 182, 116, 115]\n`)), mdx(\"p\", null, `Alternatively, the string's UTF-8 bytes can be written to a\nbyte array with the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/core/class-string#to-byte-array(0%2C0%2C0%2C)\"\n  }, `to-byte-array`), `\nor `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/core/class-string#write-to-byte-array(1%2C0%2C0%2C)\"\n  }, `write-to-byte-array`), `\nmethods.`), mdx(\"h2\", {\n    \"id\": \"slices-of-strings\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#slices-of-strings\",\n    \"aria-label\": \"slices of strings permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Slices of strings`), mdx(\"p\", null, `Toit supports the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `[x..y]`), ` notation for slices of strings.\nThis creates a new string consisting of bytes x to y, where\nx is inclusive and y is exclusive:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  hello ::= \"Hello\"\n  print hello[2..4] // Prints \"ll\", characters 2 to 4 of \"Hello\".\n  two-euro := \"€2\"\n  print two-euro[0..2] // Error, this 2-byte slice cuts the '€' character!\n  print two-euro[0..3] // Prints \"€\", these 3 bytes make up the '€' character.\n`)), mdx(\"p\", null, `The first index can be omitted, in which case the slice\nstarts at the beginning of the source string. If the\nsecond index is omitted, the slice ends at the end of the\nsource string.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  hello-world := \"Hello, World!\"\n  print hello-world[..5] // >> Hello\n  print hello-world[7..] // >> World!\n`)), mdx(\"h2\", {\n    \"id\": \"multi-line-strings\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#multi-line-strings\",\n    \"aria-label\": \"multi line strings permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Multi-line strings`), mdx(\"p\", null, `For strings that span multiple lines, newlines can be inserted\nwith `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\\\\n`), `, but it is often clearer to use the triple-quotes\nsyntax, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\"\"\"...\"\"\"`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `help-message := \"\"\"\n  My CLI command\n      -h help\n      -d device name\n      -p prefix\n  \"\"\"\nmain:\n  print help-message\n`)), mdx(\"p\", null, `The multi-line strings trim indentation-based white-space\n(see below). Therefore\nthe above program will output the following:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `My CLI command\n    -h help\n    -d device name\n    -p prefix\n`)), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `Toit removes the first newline if it is immediately after the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\"\"\"`), `.`)), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `You should almost always put a newline after `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\"\"\"`), ` if you are using the\ntriple quotes for multi-line strings, since it makes the indentation rules\nmuch easier to understand.`)), mdx(\"p\", null, `In multi-line strings there are some extra escapes that can\nbe used.`), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\`), ` followed by a newline (ASCII 10)`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Removes a newline in a multi-line string.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\`), ` followed by a carriage return (ASCII 13)`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Removes a newline in a multi-line string. If followed by a newline, that one is removed as well.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `\\\\s`)), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Space (see below for a detailed explanation).`)))), mdx(\"p\", null, `Toit removes the indentation of a multi-line string.\nIt looks for the line with the smallest indentation and removes that amount of indentation for each line.`), mdx(\"p\", null, `If a space (or several spaces) are needed in front of each line, use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\\\\s`), ` to indicate to the compiler that this space shouldn't be seen as indentation.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  str1 := \"\"\"\n    foo\"\"\"\n  str2 := \"\"\"\n    \\\\sfoo\"\"\"\n  print \"[\" + str1 + \"]\"  // >> [foo]\n  print \"[\" + str2 + \"]\"  // >> [ foo]\n`)), mdx(\"p\", null, `Note that multi-line strings frequently end with a newline anyway, in which case the last line can be used to indicate how much the indentation is:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  print \"\"\"\n    foo\n    bar\n  \"\"\" // <== indented less than the previous lines. As such\n      // it gives the indentation for the other lines.\n\n  print \"\"\"\n    foo\n    bar\n    \"\"\"\n`)), mdx(\"p\", null, `This results in the output:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `  foo\n  bar\nfoo\nbar\n`)), mdx(\"h2\", {\n    \"id\": \"long-string-literals\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#long-string-literals\",\n    \"aria-label\": \"long string literals permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Long string literals`), mdx(\"p\", null, `Triple-quoting can also be used for very long strings that\ndon't necessarily contain newlines. In this case you end each line with\na backslash, which will cause the parser to ignore the\nnewline at the end of the line.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `You should start the string with a non-escaped newline that will be ignored in accordance with the above rules for\ntriple quoted strings.`)), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  print \"\"\"\n    This is a very long line that goes on \\\\\n    and on for a very long time. It's easier \\\\\n    to put any spaces at the end of the line, \\\\\n    but you can put them at the start,\\\\\n     making use of the usual\\\\\n     indentation-removing rules \\\\\n    for triple-quoted strings.\"\"\"\n`)), mdx(\"p\", null, `This prints`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `This is a very long line that goes on and on for a very long time. It's easier to put any spaces at the end of the line, but you can put them at the start, making use of the usual indentation-removing rules for triple-quoted strings.\n`)), mdx(\"h2\", {\n    \"id\": \"string-interpolation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#string-interpolation\",\n    \"aria-label\": \"string interpolation permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `String interpolation`), mdx(\"p\", null, `Using the dollar sign ('$') we can interpolate variables and\nother expressions into strings:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// Print:\n//   Little pig 1\n//   Little pig 2\n//   Little pig 3\nmain:\n  for i := 1; i <= 3; i++:\n    print \"  Little pig $i\"\n`)), mdx(\"p\", null, `The variable after the dollar sign is turned into a string\nby calling its `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `stringify`), ` method. The variable stops at\nthe first non-alpha-numeric character, but the expression\ncan be extended using dot or `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `[]`), ` notation:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  i := 42\n  print \"Level $i, the band.\"        // >> Level 42, the band.\n  j := -42\n  print \"Level $j.abs, the band.\"    // >> Level 42, the band.\n  list := [0, 42, 103]\n  print \"Level $list[1], the band.\"  // >> Level 42, the band.\n`)), mdx(\"p\", null, `If the variable is followed immediately by alphanumeric\ncharacters or we want a more complicated interpolation\nexpression we can put parentheses, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `()`), `, around an arbitrary\nexpression:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  print \"Level $(6 * 7), the band.\" // >> Level 42, the band.\n  j := -42\n  print \"Level $(-j), the band.\"    // >> Level 42, the band.\n  i := 42\n  print \"Almost $(i)mm.\"            // >> Almost 42mm.\n`)), mdx(\"p\", null, `The string interpolation feature also has support for some\nprintf-style formatting options. Unlike `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `printf`), ` the\nformatting directives are directly adjacent to the value\nthey are formatting, so there is no need to count function\narguments:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import math show PI\n\nmain:\n  // %f can be used to specify the number of decimals for\n  // floating point numbers:\n  print \"PI $(%.2f PI)\"         // >> 3.14\n  // %x is for hexadecimal numbers:\n  print \"In hex 0x$(%x 42).\"    // >> In hex 0x2a.\n  // %02x pads a hex number with zeros:\n  print \"CR is 0x$(%02x 0xd).\"  // >> CR is 0x0d.\n  // %4d pads a decimal number with spaces:\n  // Prints:\n  // >   0<\n  // >   1<\n  // >   8<\n  // >  27<\n  // >  64<\n  // > 125<\n  6.repeat:\n    print \">$(%4d it * it * it)<\"\n  // %c inserts a character by its Unicode code point (rune):\n  // Prints: Life, the Universe and *.\n  print \"Life, the Universe and $(%c 42).\"\n  // %o writes in octal:\n  print \"The VAX answer: $(%03o 42).\" // >> The VAX answer: 052.\n  // %b writes in binary:\n  print \"The year $(%b 2010).\" // >> The year 11111011010.\n`)), mdx(\"p\", null, `For other bases than 2, 8, 10, and 16, see\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/core/numbers/class-int#stringify(1%2C0%2C0%2C)\"\n  }, `stringify`), `.`), mdx(\"p\", null, `The full set of formatting options includes left-padding,\nand center-padding. See the documentation on the\nstatic string method, `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/core/class-string#format(2%2C0%2C0%2C)\"\n  }, `format`), `.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#strings","title":"Strings","items":[{"url":"#string-literals","title":"String literals"},{"url":"#escaped-characters","title":"Escaped characters"},{"url":"#string-representation","title":"String representation"},{"url":"#slices-of-strings","title":"Slices of strings"},{"url":"#multi-line-strings","title":"Multi-line strings"},{"url":"#long-string-literals","title":"Long string literals"},{"url":"#string-interpolation","title":"String interpolation"}]}]}}},"pageContext":{"title":"Strings","id":"7694dde5-b4d7-5f5d-b2c5-2dc0d6f25d1c"}},
    "staticQueryHashes": ["2197327828"]}