{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/booleans",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\n\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\n\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"booleans\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#booleans\",\n    \"aria-label\": \"booleans permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Booleans`), mdx(\"p\", null, `In Toit, the boolean type is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `bool`), ` and its two values are written `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `true`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `false`), `.`), mdx(\"p\", null, `Whenever built-in constructs need to evaluate a condition (for example in an\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `if`), ` or a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `while`), `), then Toit first \"boolifies\" the given value. The values\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `false`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `null`), ` are treated like `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `false`), ` and every other value is converted\nto `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `true`), `.\nSo in a condition context, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `null`), ` is falsy and other non-booleans are truthy.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  t := true\n  if t:\n    print \"This is printed because t boolifies to true.\"\n  f := false\n  if f:\n    // 'f' boolifies to false.\n    unreachable\n  n := null\n  if n:\n    // null in a condition boolifies to false.\n    unreachable\n  str := \"\"\n  if str:\n    // Strings, like every non-false non-null, object\n    // boolify to true.\n    print \"This branch is executed.\"\n  z := 0\n  if z:\n    // As before: 0, neither being false, nor being null, is\n    // boolified to true.\n    print \"This branch is executed\"\n  list := []\n  if list:\n    print \"This branch is reached\"\n\n  // Boolification only occurs in \\`if\\`, \\`for\\`, and \\`while\\`\n  // conditions, and the first operand of the ternary \\`?:\\`\n  // operator:\n  b1 /bool := null // Error: null is not a bool!\n  b2 /bool := s    // Error: A string is not a bool!\n  b3 /bool := z    // Error: A number is not a bool!\n  b4 /bool := list // Error: A list is not a bool!\n  print (list ? \"foo\" : \"bar\")  // Prints \"foo\", because lists are truthy.\n  print (null ? \"foo\" : \"bar\")  // Prints \"bar\", because null is falsy.\n  print (0 ? \"foo\" : \"bar\")     // Prints \"foo\", because zero is truthy.\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#booleans","title":"Booleans"}]}}},"pageContext":{"title":"Booleans","id":"68bb968b-f512-5a80-8e6a-d136e972d401"}},
    "staticQueryHashes": ["2197327828"]}