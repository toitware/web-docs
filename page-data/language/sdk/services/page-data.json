{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/sdk/services",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"services\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#services\",\n    \"aria-label\": \"services permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Services`), mdx(\"p\", null, `Services are Toit's way of communicating between different containers. They\nuse an RPC mechanism that allows containers to call predefined methods\nacross container boundaries. As such they are a natural way of separating\nout complex drivers (like the ones for cellular modems), so they can run\nin the own address spaces.`), mdx(\"h2\", {\n    \"id\": \"architecture\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#architecture\",\n    \"aria-label\": \"architecture permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Architecture`), mdx(\"p\", null, `When working with services, there are four main concepts:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `a \"service interface\"`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `a \"service provider\"`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `a \"service client\"`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `a \"service manager\"`)), mdx(\"p\", null, `The service interface describes the API the service provides.`), mdx(\"p\", null, `A provider class then implements the service interface and\nregisters itself as a service provider.`), mdx(\"p\", null, `A client class implements the actual RPC calls so that users of\nthe service can interact with the provider as if it was a local object.`), mdx(\"p\", null, `The service manager is responsible for connecting clients and providers,\nand for dispatching requests between them. It is part of the\nsystem.`), mdx(\"h2\", {\n    \"id\": \"service-interfaces\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#service-interfaces\",\n    \"aria-label\": \"service interfaces permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Service interfaces`), mdx(\"p\", null, `A service interface describes the functionality that a provider\noffers to clients. The interface is identified by a UUID, together\nwith a major and minor version number. Each method furthermore gets a\nunique integer.`), mdx(\"p\", null, `For example:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// service.toit.\nimport system.services show ServiceSelector\n\ninterface RandomGeneratorService:\n  static SELECTOR ::= ServiceSelector\n      --uuid=\"dd9e5fd1-a5e9-464e-b2ef-92bf15ea02ca\"\n      --major=0\n      --minor=1\n\n  generate limit/int -> int\n  static GENERATE-INDEX ::= 1\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `RandomGeneratorService.SELECTOR`), ` constant will bind a\nclient of the service and the service implementation together. We typically\njust generate random UUIDs, because all we need is some notion of identity.\nThe `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `dd9e5fd1-a5e9-464e-b2ef-92bf15ea02ca`), ` constant was generated via\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.uuidgenerator.net/\"\n  }, `https://www.uuidgenerator.net/`), `.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `RandomGeneratorService.SELECTOR.major`), ` and\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `RandomGeneratorService.SELECTOR.minor`), ` values\nrepresent the current version of the interface. The version is used during\nservice discovery, because it is possible that a client will be trying to\naccess a newer or older implementation of the service due to the fact that\nclients and implementations are decoupled and are likely to be updated\nindependently of each other.`), mdx(\"p\", null, `The interface furthermore adds information on what the method for index\n1 (`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `GENERATE-INDEX`), `) should look like. The underlying RPC mechanism doesn't\ntake advantage of this information. Provider and client implementations,\non the other hand, should use this information to implement the interface,\nso they are compatible.`), mdx(\"p\", null, `We currently manually assign indexes to methods, but\nyou could imagine generating the interface definition from something like a\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.google.com/protocol-buffers\"\n  }, `protocol buffer service`), ` and\nhave the indices automatically assigned. If you change the index of any\nexisting method you should bump the major version, but if you only add new\nmethods with previously unused indices, you can get away with just bumping the\nminor version.`), mdx(\"p\", null, `In a similar vein, we are investigating ways to automatically generate the\nservice provider and client code from the interface definition.`), mdx(\"h2\", {\n    \"id\": \"service-providers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#service-providers\",\n    \"aria-label\": \"service providers permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Service providers`), mdx(\"p\", null, `A service provider is an object that provides the functionality that the\nservice interface promises.`), mdx(\"p\", null, `It registers itself with the service manager, and then\nlistens for incoming requests. The service manager connects clients and\nproviders, and dispatches requests between them.`), mdx(\"p\", null, `For example, the aforementioned `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `RandomGeneratorService`), ` could be\nimplemented as follows:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import system.services show ServiceProvider ServiceHandler\nimport .service\n\nclass RandomGeneratorServiceProvider extends ServiceProvider\n    implements ServiceHandler:\n\n  constructor:\n    super \"test/random-generator\" --major=7 --minor=9\n    provides RandomGeneratorService.SELECTOR --handler=this\n\n  handle index/int arguments/any --gid/int --client/int -> any:\n    if index == RandomGeneratorService.GENERATE-INDEX:\n      return generate arguments\n    unreachable\n\n  generate limit/int -> int:\n    print \"got request to generate a random number with limit $limit\"\n    return random limit\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `RandomGeneratorServiceProvider`), ` class extends the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ServiceProvider`), `\nbase clase which implements the communication with the service manager.`), mdx(\"p\", null, `The arguments to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `super`), ` call are the name of the service, and the\nversion of the service interface. These are not used by the service\nmanager, and are there mostly for debugging purposes. They are\nfundamentally a description of the provider.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `provides`), ` call (invoking a method on the super class) declares the\nselector this provider implements. There can be multiple calls to\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `provides`), ` if the provider implements multiple service interfaces.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `provides`), ` invocation takes a\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ServiceHandler`), ` object as `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--handler`), ` argument. This object is\nresponsible for handling incoming requests. In most cases, the provider\nitself will implement the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ServiceHandler`), ` interface. However,\nespecially for providers that implement multiple service interfaces, it\ncan be useful, or even necessary, to have a separate handlers for each\ninterface. For example, a temperature, humidity, and pressure sensor\ncould implement three different service interfaces, and have a separate\nhandler for each.`), mdx(\"p\", null, `Note that the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ServiceHandler`), ` interface is just describing\na callback:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `interface ServiceHandler:\n  handle index/int arguments/any --gid/int --client/int -> any\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `handle`), ` method implements the actual service. It switches on\nthe index of the incoming request, and calls the appropriate method.`), mdx(\"p\", null, `In this example the provider class actually implements the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `RandomGeneratorService`), ` interface, and we could explicitly state\nthat by adding `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `implements RandomGeneratorService`), ` to the class.\nHowever, to give the developer more flexibility in implementing\nthe service, we generally don't add the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `implements`), ` clause.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `Before a provider can be used, it must be registered with the service\nmanager by calling `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `install`), ` on the provider object.`)), mdx(\"h3\", {\n    \"id\": \"using-a-service-provider\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-a-service-provider\",\n    \"aria-label\": \"using a service provider permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Using a service provider`), mdx(\"p\", null, `Typically, a service provider is installed in its own container where\nthe `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `main`), ` function simply installs the provider:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `...\n\nmain:\n  provider := RandomGeneratorServiceProvider\n  provider.install\n`)), mdx(\"p\", null, `For testing (or on a desktop machine), it can also be useful to spawn the\nprovider process from the client process:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `...\n\nmain:\n  spawn::\n    provider := RandomGeneratorServiceProvider\n    provider.install\n\n  // Do client stuff here.\n`)), mdx(\"h3\", {\n    \"id\": \"service-provider-lifecycle\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#service-provider-lifecycle\",\n    \"aria-label\": \"service provider lifecycle permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Service provider lifecycle`), mdx(\"p\", null, `A service provider is a long-lived object. It is usually installed\nwhen the container starts, and stays alive until the container is\nforcefully stopped. In `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../../getstarted/fleet\"\n  }, `Artemis`), ` containers\nthat run providers should be marked as `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `background`), ` so they don't\nprevent the system to go to deep sleep.`), mdx(\"p\", null, `For each client that connects to a provider, the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on-opened`), ` method\nis called. Similarly, when a client disconnects, the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on-closed`), `\nmethod is called. These methods can be used to keep track of the\nnumber of connected clients, and to perform setup actions or cleanups.`), mdx(\"p\", null, `For example, a driver that requires an external peripheral to be\npowered on could use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on-opened`), ` method to power on the peripheral,\nand the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on-closed`), ` method to power it off again.`), mdx(\"h2\", {\n    \"id\": \"service-clients\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#service-clients\",\n    \"aria-label\": \"service clients permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Service clients`), mdx(\"p\", null, `A service client is an object that provides the service functionality\nto the client. It transparently forwards calls to the service\nprovider.`), mdx(\"p\", null, `Once the client has connected to a provider (with the help of the\nservice manager), its main job consists of serializing the arguments\nand return values, and to map the method calls to the appropriate\nindexes.`), mdx(\"p\", null, `For example, the aforementioned `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `RandomGeneratorService`), ` could be\nimplemented as follows:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import system.services show ServiceClient ServiceSelector\nimport .service\n\nclass RandomGeneratorServiceClient extends ServiceClient:\n  static SELECTOR ::= RandomGeneratorService.SELECTOR\n\n  constructor selector=SELECTOR:\n    assert: selector.matches SELECTOR\n    super selector\n\n  generate limit/int -> int:\n    return invoke_ RandomGeneratorService.GENERATE-INDEX limit\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `RandomGeneratorServiceClient`), ` class extends the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ServiceClient`), `\nbase clase which implements the communication with the service manager.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `super`), ` call takes a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ServiceSelector`), ` object as argument. This\nobject describes the service that the client wants to connect to. By\ndefault the selector from the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `RandomGeneratorService`), ` interface is\nused, but users can also provide their own selector as long as its\ncompatible (the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `assert`), ` call checks this).`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `generate`), ` method then implements the actual service. It calls the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `invoke_`), ` method on the super class, passing the index of the method\nto call, and the arguments to the method. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `invoke_`), ` method then\nserializes the arguments, sends them to the service provider, and\nwaits for the response. It then deserializes the response and returns\nit.`), mdx(\"h3\", {\n    \"id\": \"using-a-service-client\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-a-service-client\",\n    \"aria-label\": \"using a service client permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Using a service client`), mdx(\"p\", null, `A client needs the a provider to be available. See how to\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#using-a-service-provider\"\n  }, `use providers`), ` for more information.`), mdx(\"p\", null, `The common way to use a service is to construct it and to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `open`), ` it. The\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `open`), ` call contacts the service manager and finds a matching provider.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  client := RandomGeneratorServiceClient\n  client.open\n  10.repeat:\n    print \"random = $(client.generate 100)\"\n`)), mdx(\"p\", null, `Often, the service can also be in a lazy-initialized constant:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `service_/RandomGeneratorServiceClient? ::= (RandomGeneratorServiceClient).open\n    --if-absent=: null\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--if-absent`), ` block is invoked when we cannot find the requested service.\nYou can provide a timeout if you're willing to\nwait a bit for the service to appear:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `service_/RandomGeneratorServiceClient? ::= (RandomGeneratorServiceClient).open\n    --timeout=(Duration --s=2)\n    --if-absent=: null\n`)), mdx(\"h2\", {\n    \"id\": \"serialization\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#serialization\",\n    \"aria-label\": \"serialization permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Serialization`), mdx(\"p\", null, `As part of the communication between clients and providers, messages\nare serialized in an efficient way. Messages must be either `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `null`), `,\nintegers, booleans, floats, strings, byte arrays, lists or maps.\nAny type that is not one of these must be converted\nbefore calling `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `invoke_`), `. In that case, the provider and client must agree\non how to encode the type.`), mdx(\"p\", null, `For example, if we want to send more than one argument as an\nRPC message we must encode them first. By convention, we\nencode them as a list of the individual arguments.`), mdx(Note, {\n    type: \"warning\",\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `For a more efficient message passing, byte arrays `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `may`), ` be transferred\ndirectly, without copying. In that case, the original byte array\nis \"neutered\" and reset to an empty byte array. This means that\nthe byte array cannot be used anymore after it has been sent.`)), mdx(\"h2\", {\n    \"id\": \"service-resources-and-proxies\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#service-resources-and-proxies\",\n    \"aria-label\": \"service resources and proxies permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Service resources and proxies`), mdx(\"p\", null, `Sometimes it is useful for a service to let clients refer to resources\nallocated on their behalf. The resource lives with the service provider,\nand the client receives a handle to it. The system will then take care\nof cleaning up the resource when the client goes away.`), mdx(\"p\", null, `Say, the provider can allocate a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Die`), ` resource that the client can\ninteract with, by calling `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `roll`), ` on it. Let's assume, that the\nobject must live on the provider. The provider gives the client\na way to create the object, and then sends a \"handle\" to the client.\nHandles are simply integers, and the service is thus changed as follows:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `interface RandomGeneratorService:\n  ...\n  create-die -> int\n  static CREATE-DIE-INDEX /int ::= 2\n\n  roll-die handle/int -> int\n  static ROLL-DIE-INDEX /int ::= 3\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Die`), `'s `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `roll`), ` method is integrated into the service interface,\nbut the provider and client should abstract them away and move them\nonto the resource objects.`), mdx(\"h3\", {\n    \"id\": \"resources-on-the-provider\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#resources-on-the-provider\",\n    \"aria-label\": \"resources on the provider permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Resources on the provider`), mdx(\"p\", null, `On the provider side a resource object should extend the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ServiceResource`), `\nbase class:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import system.services show ServiceResource ServiceProvider\n\nclass DieResource extends ServiceResource:\n  sides_/int ::= ?\n\n  constructor .sides_ provider/ServiceProvider client/int:\n    super provider client\n\n  roll -> int:\n    return 1 + (random sides_)\n\n  on-closed -> none:\n    // Handle cleanup.\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on-closed`), ` method is automatically called when the client closes\nthe resource or if the client happens to go away. Instances of\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ServiceResource`), ` are automatically serializable, so it is possible to\nreturn them from the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `handle`), ` method in the service provider and\nthe `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ServiceResource`), ` constructor takes care of registering them\ncorrectly, so they can be found later on future client method calls.`), mdx(\"p\", null, `Let's add the new methods to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `RandomGeneratorServiceProvider`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  handle index/int arguments/any --gid/int --client/int -> any:\n    ...\n    if index == RandomGeneratorService.CREATE-DIE-INDEX:\n      // The 'arguments' parameter is equal to the number of sides.\n      return DieResource arguments this client\n\n    if index == RandomGeneratorService.ROLL-DIE-INDEX:\n      // The 'arguments' parameter is set to the handle of the resource.\n      die := (resource client arguments) as DieResource\n      return die.roll\n`)), mdx(\"p\", null, `Note that we implement the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `create-die`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `roll-die`), ` functionality\ndirectly in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `handle`), ` method. That's not necessary, but often\nconvenient if it's as simple as in this case.`), mdx(\"p\", null, `The provider also handles the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ROLL-DIE-INDEX`), ` method by forwarding it to\nthe corresponding `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `DieResource`), ` instance.`), mdx(\"h3\", {\n    \"id\": \"resources-on-the-client\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#resources-on-the-client\",\n    \"aria-label\": \"resources on the client permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Resources on the client`), mdx(\"p\", null, `Clients receive resources as integers, representing the handle to the\nresource. They need to convert the handle to a resource proxy that\ncan be used to call methods on the resource.`), mdx(\"p\", null, `There is currently nothing in the service interface that defines how\nthe proxy should look like. It's up to the implementation to\ncreate a good API for it.`), mdx(\"p\", null, `A proxy should always extend\nthe `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ServiceResourceProxy`), ` base class, which automatically closes\nthe resources if it is garbage-collected:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import system.services show ServiceResourceProxy\n\nclass DieProxy extends ServiceResourceProxy:\n  constructor client/ServiceClient handle/int:\n    super client handle\n\n  roll -> int:\n    return (client_ as RandomGeneratorServiceClient).roll-die_ handle_\n`)), mdx(\"p\", null, `The proxy takes the corresponding client and handle as arguments. As can be\nseen, a handle is serialized as an `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `int`), `, but for the most part this can\nbe ignored.`), mdx(\"p\", null, `The proxy simply forwards its 'roll' method to the client which needs to\nadd `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `create-die`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `roll-die_`), ` methods:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class RandomGeneratorServiceClient extends ServiceClient:\n  ...\n  create-die sides/int -> DieProxy:\n    handle := invoke_ RandomGeneratorService.CREATE-DIE-INDEX sides\n    proxy := DieProxy this handle\n    return proxy\n\n  roll-die_ handle/int -> int:\n    return invoke_ RandomGeneratorService.ROLL-DIE-INDEX handle\n`)), mdx(\"h3\", {\n    \"id\": \"using-a-resource\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-a-resource\",\n    \"aria-label\": \"using a resource permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Using a resource`), mdx(\"p\", null, `With all that machinery in place, we can now use create resources through\nour client and call methods on them:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  spawn::\n    service := RandomGeneratorServiceProvider\n    service.install\n\n  client := RandomGeneratorServiceClient\n  client.open\n  die := client.create-die 6\n  10.repeat:\n    print \"die roll = $(die.roll)\"\n  die.close\n`)), mdx(\"h3\", {\n    \"id\": \"resource-notifications\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#resource-notifications\",\n    \"aria-label\": \"resource notifications permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Resource notifications`), mdx(\"p\", null, `While most interactions with resources follow a simple request-response\npattern, it can be useful to be able to asynchronously notify users of\na resource of certain events. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ServiceResource`), ` and\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ServiceResourceProxy`), ` classes have built-in support for this through\nnotifications. A notification is any kind of serializable object sent\nfrom the resource to the proxy. The resources that take part in this\nmust be marked notifiable at construction time:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class DieResource extends ServiceResource:\n  ...\n  constructor .sides_ provider/ServiceProvider client/int:\n    super provider client --notifiable\n  ...\n`)), mdx(\"p\", null, `Even though you probably wouldn't expect dice to ping you periodically, we can\nnow experiment with the behavior by adding periodic notifications like this:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class DieResource extends ServiceResource:\n  sides_/int ::= ?\n  task_ := null\n\n  constructor .sides_ provider/ServiceProvider client/int:\n    super provider client --notifiable\n    task_ = task:: notify-periodically\n\n  roll -> int:\n    return random sides_\n\n  notify-periodically -> none:\n    while not Task.current.is-canceled:\n      sleep --ms=(random 500) + 500\n      notify_ 87\n\n  on-closed -> none:\n    task_.cancel\n`)), mdx(\"p\", null, `The notifications will show up on the proxy side through calls to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on-notified_`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class DieProxy extends ServiceResourceProxy:\n  ...\n  on-notified_ notification/any -> none:\n    print \"got notified: $notification\"\n  ...\n`)), mdx(\"p\", null, `You'll need to wait a bit in `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `main`), ` for the notifications to start showing up:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  ...\n  die := client.create-die 6\n  10.repeat:\n    print \"die roll = $(die.roll)\"\n  sleep (Duration --s=10)\n  die.close\n`)), mdx(\"h2\", {\n    \"id\": \"example-network-by-proxy\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#example-network-by-proxy\",\n    \"aria-label\": \"example network by proxy permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Example: Network by proxy`), mdx(\"p\", null, `We have used the service framework to allow providing a full network\nimplementation from a separate container. The core of this is the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `NetworkService`), ` interface and the associated `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `NetworkServiceClient`), `:`), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitlang/toit/blob/master/lib/system/api/network.toit\"\n  }, `https://github.com/toitlang/toit/blob/master/lib/system/api/network.toit`)), mdx(\"p\", null, `We use them to build proxying sockets like `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `SocketResourceProxy_`), `\nthat forward reads and writes to the network service:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `class SocketResourceProxy_ extends ServiceResourceProxy:\n  static WRITE-DATA-SIZE-MAX_ /int ::= 2048\n  ...\n  write data from=0 to=data.size -> int:\n    to = min to (from + WRITE-DATA-SIZE-MAX_)\n    return (client_ as NetworkServiceClient).socket-write handle_ data[from..to]\n  ...\n`)), mdx(\"p\", null, `You can find all the helpers in the main repository:`), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitlang/toit/blob/master/lib/system/base/network.toit\"\n  }, `https://github.com/toitlang/toit/blob/master/lib/system/base/network.toit`)), mdx(\"p\", null, `All in all, this allows a cellular driver to provide a network to all other\napps that a blissfully unaware that their data flows through a good\nold-fashioned sequence of\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Hayes_command_set\"\n  }, `AT commands`), `.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#services","title":"Services","items":[{"url":"#architecture","title":"Architecture"},{"url":"#service-interfaces","title":"Service interfaces"},{"url":"#service-providers","title":"Service providers","items":[{"url":"#using-a-service-provider","title":"Using a service provider"},{"url":"#service-provider-lifecycle","title":"Service provider lifecycle"}]},{"url":"#service-clients","title":"Service clients","items":[{"url":"#using-a-service-client","title":"Using a service client"}]},{"url":"#serialization","title":"Serialization"},{"url":"#service-resources-and-proxies","title":"Service resources and proxies","items":[{"url":"#resources-on-the-provider","title":"Resources on the provider"},{"url":"#resources-on-the-client","title":"Resources on the client"},{"url":"#using-a-resource","title":"Using a resource"},{"url":"#resource-notifications","title":"Resource notifications"}]},{"url":"#example-network-by-proxy","title":"Example: Network by proxy"}]}]}}},"pageContext":{"title":"Services","id":"d10ef618-d626-5eee-8a6a-ee91703b932c"}},
    "staticQueryHashes": ["2197327828"]}