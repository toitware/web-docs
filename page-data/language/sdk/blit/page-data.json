{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/sdk/blit",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"bit-blit\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#bit-blit\",\n    \"aria-label\": \"bit blit permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Bit blit`), mdx(\"p\", null, `The bitmap library contains a powerful tool for manipulating byte arrays, called blit.`), mdx(\"p\", null, `The full API is documented in the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/bitmap/library-summary\"\n  }, `library documentation`), `.\nThis document provides more of a conceptual overview.`), mdx(\"h2\", {\n    \"id\": \"motivation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#motivation\",\n    \"aria-label\": \"motivation permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Motivation`), mdx(\"p\", null, `Tight loops manipulating byte arrays often follow a set pattern. The blit\nfunction is implemented in C++ and can be faster than pure Toit code for\nmanipulations that can be expressed as a traversal of a byte array, seen as a\ntwo-dimensional array of values.`), mdx(\"h2\", {\n    \"id\": \"model\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#model\",\n    \"aria-label\": \"model permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Model`), mdx(\"p\", null, `Blit reads a series of lines from a source byte array, manipulates the\nbytes, and then writes them to a destination byte array. The number of\nbytes per line is specified, and the operation stops when it hits the\nend of either the source array or destination array. Only whole lines\nare processed, so the operation may stop early if the byte array size\nis not a multiple of the line size.`), mdx(\"p\", null, `If the whole array is not to be processed, for example if you want to start\nat an offset other than zero, or stop before the end, byte array\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../syntax#indexing-syntax\"\n  }, `slices`), `\nare used to describe the extent of the blit operation.`), mdx(\"p\", null, `If the array is not arranged as a two-dimensional array, the line length\ncan be specified to match the entire length of the array, and it will be\nprocessed as one line.`), mdx(\"p\", null, `For example to create a new byte array with only the low four bits of\neach byte in a source array you can write:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import bitmap show blit\n\nmask-four-bits source/ByteArray -> ByteArray:\n  destination := ByteArray source.size\n  blit\n    source\n    destination\n    source.size  // Line length is whole array.\n    --mask=0xf   // Perform dest-byte = source-byte & 0xf.\n  return destination\n\nmain:\n  source := #[0xff, 0x3e, 0x9f]\n  print (mask-four-bits source)  // => #[0xf, 0xe, 0xf]\n`)), mdx(\"p\", null, `You can specify a pixel stride for source and destination. This\nlets you read or write only every 2nd (or nth) byte. For example\nyou might want to double the size of a byte array, writing alternately\nthe high and low halves of the original byte array:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import bitmap show blit\n\nexplode-nibbles source/ByteArray -> ByteArray:\n  destination := ByteArray source.size * 2\n  // Put high nibble in even destination bytes.\n  blit\n    source\n    destination\n    source.size       // Line length is whole array.\n    --destination-pixel-stride=2\n    --shift=4         // Rotate 4 bits to the left\n    --mask=0xf        // Extract the high nibble after rotation.\n  // Put low nibble in odd destination bytes.\n  blit\n    source\n    destination[1..]  // Write into destination with offset 1.\n    source.size       // Line length is whole array.\n    --destination-pixel-stride=2\n    --mask=0xf        // Extract the low nibble\n  return destination\n\nmain:\n  source := #[0xff, 0x3e, 0x9f]\n  print (explode-nibbles source)  // => #[0xf, 0xf, 0x3, 0xe, 0x9, 0xf]\n`)), mdx(\"h2\", {\n    \"id\": \"line-strides\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#line-strides\",\n    \"aria-label\": \"line strides permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Line strides`), mdx(\"p\", null, `When using blit for line-oriented operations it is often the case that the\nlines are not adjacent. Or you might be writing only the first 4 bytes of each\nline, but each line has 10 bytes in it. In this case you can use\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--destination-line-stride`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--source-line-stride`), ` to specify the\ndistance in bytes between adjacent lines. You can also use this to\nmanipulate only every second line, by specifying a line stride that is\ntwice as large as the line length.`), mdx(\"p\", null, `By making use of both slices and line strides, you can copy an arbitrary\nrectangle from one byte array into a rectangle of another byte array.\nIn the example below we place the image in the top left of the\ndestination, but we could place it anywhere by using a slice of the\ndestination byte array.`), mdx(\"img\", {\n    src: BlitDiagram,\n    alt: \"Diagram showing blit operation\"\n  }), mdx(\"p\", null, `By using `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `destination-pixel-stride`), ` you can write every second byte\nin the output, giving the following result.`), mdx(\"img\", {\n    src: BlitStrideDiagram,\n    alt: \"Diagram showing blit operation with --destination-pixel-stride=2\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#bit-blit","title":"Bit blit","items":[{"url":"#motivation","title":"Motivation"},{"url":"#model","title":"Model"},{"url":"#line-strides","title":"Line strides"}]}]}}},"pageContext":{"title":"Bit blit","id":"42ad5e79-2b02-5472-b5f4-903b9f01b639"}},
    "staticQueryHashes": ["2197327828"]}