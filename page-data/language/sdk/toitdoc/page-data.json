{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/sdk/toitdoc",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"documentation-convention\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#documentation-convention\",\n    \"aria-label\": \"documentation convention permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Documentation convention`), mdx(\"p\", null, `This document describes Toit's documentation convention. Not everything is implemented yet, but the following rules should make it possible to write tools that take advantage of the established conventions.`), mdx(\"h2\", {\n    \"id\": \"general\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#general\",\n    \"aria-label\": \"general permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `General`), mdx(\"p\", null, `Documentation should be helpful to the users of the element. Users can either be callers of an API, or developers that subclass a given class. Both should get useful information for their task.`), mdx(\"p\", null, `A consistent documentation helps to parse the comments and makes it easier to find relevant information when needed. Conventions (see below) make it furthermore possible to improve IDE support (the editing experience) and the generated documentation (as an HTML file).`), mdx(\"p\", null, `If preferred, or for completeness (if every other member has a comment), these comments may still be present.`), mdx(\"h2\", {\n    \"id\": \"syntax\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#syntax\",\n    \"aria-label\": \"syntax permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Syntax`), mdx(\"p\", null, `Comments are recognized as Toitdocs if they are either:`), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `///`), ` - triple-slash comments, or`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `/** ... */`), ` - Multi-line comments with two stars at the beginning.`))), mdx(\"p\", null, `We recommend to use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `///`), ` only for one, or two-line comments. Even then, single-line `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `/** This is a comment. */`), ` comments are preferred, since they have an easier time evolving to bigger comments.`), mdx(\"p\", null, `Multi-line comments are the preferred documentation for longer comments. The individual lines should `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `not`), ` have any leading `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `*`), `, and should be aligned with the first `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `/`), `.`), mdx(\"p\", null, `Examples:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `/** This is a shorter comment for a class. */\nclass A:\n  /**\n  This is a longer comment for a method.\n  It spans multiple lines.\n  */\n  member := 0\n\n  /// Triple-comments are also supported.\n  member2 := 0\n`)), mdx(\"h3\", {\n    \"id\": \"rationale\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#rationale\",\n    \"aria-label\": \"rationale permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Rationale`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `/**`), ` syntax fits on one line, and is easy to evolve to take up additional lines. It doesn't need any indentation. Copy/pasting code from and into these comments is easy, since lines don't start with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `*`), `.`), mdx(\"p\", null, `Syntax highlighting makes it easy to distinguish these comment blocks from the code, making leading `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `*`), ` unnecessary.`), mdx(\"h2\", {\n    \"id\": \"markdown\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#markdown\",\n    \"aria-label\": \"markdown permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Markdown`), mdx(\"p\", null, `The used syntax for Toitdoc is a modified version of markdown.`), mdx(\"p\", null, `Contrary to markdown (and as the biggest difference), Toitdoc treats new lines as new paragraphs, unless they are indented more than the previous line. For example, the following Toitdoc is rendered as three paragraphs and not just as one (as would be the case in markdown):`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `  /**\n  Calls the given $block on each element of the given $collection\n  Users must not modify the collection during iteration.\n  If the $block call throws an exception, then the\n    given $error value is returned.\n  */\n  do collection error [block]:\n    // ...\n`)), mdx(\"h3\", {\n    \"id\": \"code-spans\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#code-spans\",\n    \"aria-label\": \"code spans permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Code spans`), mdx(\"p\", null, `Text enclosed in backticks (`, `\\``, `) is formatted as code: `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `code`), `. Whitespace in code spans is reduced and replaced with one space. That is, multiple spaces/newlines are converted to one space. For example,`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `\\`foo   bar\n   gee\\`\n`)), mdx(\"p\", null, `is rendered as `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `foo bar gee`), `.\nThis makes it possible to write longer code spans that break at the end of line.`), mdx(\"h3\", {\n    \"id\": \"code-blocks\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#code-blocks\",\n    \"aria-label\": \"code blocks permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Code blocks`), mdx(\"p\", null, `Longer code, or code that relies on indentation can be inserted using triple backticks(`, `\\``, `\\``, `\\``, `):`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `/**\n\\`\\`\\`\na longer code\nspanning multiple lines\n\\`\\`\\`\n*/\n`)), mdx(\"p\", null, `The advantage of using fenced blocks (compared to indentation based blocks), is that two code blocks next to each other are easier to detect. Say, a Toitdoc wants to show two examples:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `/**\nExamples:\n\\`\\`\\`\nfoo 1\n\\`\\`\\`\n\\`\\`\\`\nbar 2\n\\`\\`\\`\n*/\n`)), mdx(\"p\", null, `By using separate fenced blocks, these examples will be shown as separated entities, which would not be possible with indentation-based code blocks:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `\\`\\`\\`\n  foo 1\n\\`\\`\\`\n\n\\`\\`\\`\n  bar 2\n\\`\\`\\`\n`)), mdx(\"h3\", {\n    \"id\": \"emphasis\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#emphasis\",\n    \"aria-label\": \"emphasis permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Emphasis`), mdx(\"p\", null, `Text enclosed by `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `*`), `, is rendered emphasized: `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `important`), `.`), mdx(\"h3\", {\n    \"id\": \"lists\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#lists\",\n    \"aria-label\": \"lists permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Lists`), mdx(\"p\", null, `Either bullet lists (starting a line with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `-`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `+`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `*`), `), or ordered lists (starting a line with a digit).`), mdx(\"h3\", {\n    \"id\": \"sections\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sections\",\n    \"aria-label\": \"sections permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Sections`), mdx(\"p\", null, `Lines beginning with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `#`), ` (or multiple `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `#`), `s) are sections. The more `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `#`), `s the deeper the section. Some sections have meaning and are treated specially in the output (like `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `# Advanced`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `# Inheritance`), `). See below.`), mdx(\"h3\", {\n    \"id\": \"links\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#links\",\n    \"aria-label\": \"links permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Links`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `$foo`), ` links to the element (member, class, global variable or global function) with the resolved name.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `$(foo x y)`), ` resolves to the element `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `foo`), ` that takes 2 arguments.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `URLs inside the comment are automatically linked: `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `http://www.example.com`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `file://foo.toit`), ` don't need markers.`)), mdx(\"h2\", {\n    \"id\": \"sections-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#sections-1\",\n    \"aria-label\": \"sections 1 permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Sections`), mdx(\"p\", null, `Toitdoc supports sections, some of which have special meaning in Toitdoc.`), mdx(\"p\", null, `The following sections have special meaning or should be used as conventions:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Advanced`), `: This section is non-essential for most users and can safely be ignored in general. For example, this section may explain the algorithm that is used to perform the specific action. By default this section is collapsed in the generated Toitdoc.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Inheritance`), `: This section is only useful for developers that implement or extend a given class. IDEs should ignore this section when showing contextual information on calls.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Examples`), `: Contains examples for the given element. Individual examples that exhibit different properties can be in their own subsections. It is common to start each individual example-(sub)section with \"This example demonstrates \". Since example sections can be very big, they should be the last section in a Toitdoc (except for `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Categories`), `).`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Categories`), `: This section is used in the Toitdoc tool to assign members to specific categories. For example, a `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `File`), ` class could have the categories, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Write`), `, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Read`), `, and `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Query`), `. The Toitdoc tool can then group those members into the given categories to make it easier to find relevant methods. Categories are optional. They are not emitted in the Toitdoc-generated pages. The `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Categories`), ` section only consists of a markdown list.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Errors`), `: This section should treat errors and exceptions, and/or discuss how to deal with common errors. Note that important prerequisites can/should be in the initial section. For example, the sentence \"Users must not modify the collection while iteration over it\", does not require a separate \"Errors\" section, but can be part of the top section. This section may also contain common mistakes in the usage of the API.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Aliases`), `: This section contains a (markdown) list of aliases that can help finding the function. Typically, this list contains names of similar functions in other languages. For example, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `List.add`), ` should have `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `push`), `, and `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `push-back`), ` as alias, since these are the names that are used in JavaScript and C++ respectively.`)), mdx(\"h2\", {\n    \"id\": \"conventions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#conventions\",\n    \"aria-label\": \"conventions permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Conventions`), mdx(\"p\", null, `This section discusses conventions and best practices for writing Toitdoc. By having a common vocabulary and phrasing, comments can be understood faster, and also be written more efficiently.`), mdx(\"p\", null, `Furthermore, we introduce conventions that make it possible for IDEs to present the most relevant information when needed.`), mdx(\"p\", null, `Don't code-format true, false, or null. Write them as normal text (just like in the previous sentence).`), mdx(\"p\", null, `Use the following terms:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `\"Class\".`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `\"Global\": a global variable.`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `\"Function\": a global function.`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `\"Constructor\".`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `\"Factory\".`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `\"Field\".`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `\"Method\" for member methods. One may also use \"getter\" and \"setter\" when appropriate.`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `\"Block\".`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `\"Lambda\". The term \"closure\" is also commonly used, but we should strive to minimize the number of terms.`))), mdx(\"p\", null, `In general, don't feel obligated to avoid repetitions in Toitdocs. It is OK to use the same term multiple times for the same element.`), mdx(\"p\", null, `Start every documentation with a short description. This sentence should convey the core idea of what the element does (or is for). It is OK to duplicate the element name for this purpose:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `/**\nRuns the given $task.\n\n# Advanced\nThis is the reason for this Toitdoc.\n*/\nrun task:\n  // ...\n`)), mdx(\"p\", null, `Start functions and methods Toitdocs with 3rd person verbs. Readers implicitly add \"this element\" in front of such a sentence. For example: \"Runs the given $block\".`), mdx(\"p\", null, `Start classes, globals and fields as if the comment started with \"This is/contains\". For example, a class comment could start with \"A container for xyz.\", and a global with \"The number of emitted things.\". As an exception, use \"Whether ...\" for boolean globals and fields.`), mdx(\"p\", null, `Getters can either be documented as if they were fields, or as a method. If a pair of getter/setter exists, the setter can just have the documentation \"/// Setter for $x.\".`), mdx(\"p\", null, `Usually, this style of documentation does not require to refer to the commented element from within the Toitdoc. Whenever that's necessary, use the prefix \"this\". For example \"Whenever this class is instantiated, ... \".`), mdx(\"p\", null, `In instance members and constructors, use \"this instance\" when referring to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `this`), `. For example, \"Calls the given $block on each element of this instance\". This convention has the advantage that the comment is still valid for subclasses (compared to the alternative of referring to the class name).`), mdx(\"p\", null, `Parameters should be referred to as \"the given $parameter-name\". When it is clear that the text talks about a given parameter, one may drop \"given\". When providing more information for parameters, start the paragraph with \"The parameter $parameter-name ...\". For substantial discussions of parameters consider a (additional) section \"# Parameter $parameter-name\".`), mdx(\"p\", null, `When referring to parameter with a boolean default value make it clear when to pass the boolean flag. Either mention which value is the default, or preferential mention the case where the flage needs to be passed. For example, for a parameter `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `flag`), ` with a false default value: \"If $flag is true, then ... Otherwise, ...\". Or \"If $flag is true (the default), then ...\".`), mdx(\"p\", null, `IDEs should eventually be able to provide contextual help. Specifically, when filling in an argument, editors can show the documentation for the current argument. It should do that by searching for references to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `$arg-name`), `. If the documentation has a section with the argument, that's the documentation it should show. If not a sentence starting with \"The argument $arg-name\" would be shown. Finally, if neither exists, paragraphs linking to the argument are highlighted.`), mdx(\"p\", null, `The documentation for return values should be by starting a sentence with \"Returns ...\". Multiple of these sentences are permitted. For example \"Returns 0 if x. Returns 1 if y. Returns 2 otherwise.\".`), mdx(\"p\", null, `Use the word \"whether\" liberally when talking about boolean values.`), mdx(\"p\", null, `Overridden methods don't need any Toitdoc. Documentation is inherited. Users may, however, just write \"See $super.\" to explicitly inherit the documentation. If additional information is provided then the comment could start with \"See $super.\", followed by the additional documentation.`), mdx(\"p\", null, `Overloaded methods can either duplicate the documentation (if it's sufficiently different), or use one of the two following methods:`), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Document one method (usually the most general one), and then use \"Variant of $foo(foo a b c).\", followed by a specific documentation.`), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Document one method (usually the most general one) with an \"# Overloaded\" section. For all other methods, use the following pattern: \"Variant of $foo(foo a b c).\", and then add an \"# Overloaded\" section in the same comment. The Toitdoc generator will eventually take the original comments and replaces the \"Overloaded\" section for each generated comment. (Or, more likely, generates an overloaded documentation as can be seen here: `, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.cppreference.com/w/cpp/container/vector/push_back\"\n  }, `https://en.cppreference.com/w/cpp/container/vector/push_back`), `).`)), mdx(\"p\", null, `Don't add implementation comments in Toitdocs. For example `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `TODO...`), ` should be in a non-Toitdoc comment. Generally, the Toitdoc should come first, followed by implementation comments:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `/**\nToitdoc goes here.\n*/\n/*\nImplementation doc.\n*/\nthe-member:\n`)), mdx(\"p\", null, `Errors should either be in their `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `# Errors`), ` section, or (if they only take a sentence) be written as follows: \"It's an error ...\", or using \"must\" (as in \"This instance must have at least two elements\").`), mdx(\"p\", null, `When a class can contain multiple elements use the term \"elements\" (and not \"entries\"). Use \"slot\" to refer to a specific place in an indexed object: \"Replaces the element in slot $index with the given $replacement\".`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#documentation-convention","title":"Documentation convention","items":[{"url":"#general","title":"General"},{"url":"#syntax","title":"Syntax","items":[{"url":"#rationale","title":"Rationale"}]},{"url":"#markdown","title":"Markdown","items":[{"url":"#code-spans","title":"Code spans"},{"url":"#code-blocks","title":"Code blocks"},{"url":"#emphasis","title":"Emphasis"},{"url":"#lists","title":"Lists"},{"url":"#sections","title":"Sections"},{"url":"#links","title":"Links"}]},{"url":"#sections-1","title":"Sections"},{"url":"#conventions","title":"Conventions"}]}]}}},"pageContext":{"title":"Documentation convention","id":"6de46283-3fcb-5a39-bda9-27088c01ac0f"}},
    "staticQueryHashes": ["2197327828"]}