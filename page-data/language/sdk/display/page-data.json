{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/sdk/display",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"display\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#display\",\n    \"aria-label\": \"display permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Display`), mdx(\"p\", null, `The Toit SDK includes support for simple user interfaces on displays.\nWe highlight in this section the basic functions of display use. You can also learn more about the different fonts available in the SDK by studying the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../fonts\"\n  }, `font basics`), `.`), mdx(\"p\", null, `These examples assume you have installed the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitware/toit-pixel-display\"\n  }, `pixel_display`), ` package into\nyour project. See the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../package/pkgguide\"\n  }, `Packages quick start guide`), `\nfor information on getting started with packages.`), mdx(\"p\", null, `You will also need at least one display driver, for example the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitware/toit-ssd1306\"\n  }, `SSD1306 driver`), `\nwhich is also available as a package, called `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ssd1306`), `. A color TFT driver that supports many common displays is available\nin the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitware/toit-color-tft\"\n  }, `toit-color-tft`), ` and can be installed as the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `color-tft`), ` package.`), mdx(\"h2\", {\n    \"id\": \"getting-the-display-driver-and-pixeldisplay-object\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#getting-the-display-driver-and-pixeldisplay-object\",\n    \"aria-label\": \"getting the display driver and pixeldisplay object permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Getting the display driver and PixelDisplay object`), mdx(\"p\", null, `Both the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `color-tft`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ssd1306`), ` packages have some helpful examples which you can see by cloning the\ngithub repos linked above. We will assume that you have a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `get_display.toit`), ` file in your project, which\nmight look something like the following. Details will depend on your hardware configuration, in particular which\npins and bus you are using to connect your display.`), mdx(\"p\", null, `Example contents of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `get_display.toit`)), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import gpio\nimport i2c\nimport ssd1306 show *\nimport pixel-display show *\n\nget-display -> PixelDisplay:\n  scl := gpio.Pin 4\n  sda := gpio.Pin 5\n  bus := i2c.Bus\n    --sda=sda\n    --scl=scl\n    --frequency=800_000\n\n  devices := bus.scan\n  if not devices.contains Ssd1306.I2C-ADDRESS:\n    throw \"No SSD1306 display found\"\n\n  driver := Ssd1306.i2c (bus.device Ssd1306.I2C-ADDRESS)\n\n  return PixelDisplay.two-color driver\n  // Alternatively: return PixelDisplay.two-color --portrait --inverted driver\n`)), mdx(\"h1\", {\n    \"id\": \"display-architecture\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#display-architecture\",\n    \"aria-label\": \"display architecture permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Display architecture`), mdx(\"p\", null, `A display will be an subclass of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `PixelDisplay`), `.  These are created with named\nconstructors.`), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `PixelDisplay.two-color`), ` for black/white displays.`), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `PixelDisplay.three-color`), ` for black/white/red displays (usually e-paper).`), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `PixelDisplay.four-gray`), ` for 4-tone grayscale displays (usually e-paper).`), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `PixelDisplay.true-color`), ` for color displays like the ones supported by the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `color-tft`), ` driver.`), mdx(\"p\", null, `A display maintains a tree of objects that it is currently displaying.\nThese objects are called `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Element`), `s.  As in HTML, one of the popular\nelements is called `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Div`), ` and it is primarily used to group other\nelements. The main element for displaying text is called `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Label`), `.`), mdx(\"p\", null, `Elements are mutable objects that represent a shape on the display. For example\na geometric shape or a piece of text. Together, the elements added to a display\ndescribe a scene.`), mdx(\"p\", null, `To update the display, you add or remove elements, or modify the\nexisting elements. When you have made your changes you update the\nphysical display by calling the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `draw`), ` method on the display object.`), mdx(\"p\", null, `Normally you will import all the common elements\ninto your namespace with an import like `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import pixel-display show *`), `\nThe `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `true-color`), ` displays use web-like six-digit hex color codes in the style\n0xRRGGBB, while other displays have useful constants like `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `BLACK`), `,\nand `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `WHITE`), `, which can be imported with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import pixel-display.two-color show *`), `.`), mdx(\"h2\", {\n    \"id\": \"write-with-built-in-sans-font\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#write-with-built-in-sans-font\",\n    \"aria-label\": \"write with built in sans font permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Write with built-in sans font`), mdx(\"p\", null, `Let us start with a simple example using a Label element. In this\nexample we use the sans10 font, which is a simple ASCII-only font\nthat is built in to the Toit SDK and does not need to be\nimported with a package.`), mdx(\"p\", null, `We build up a 'scene' consisting of only one text\nelement, and immediately render it to the screen with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `draw`), `.\nAfterwards we exit the program, which (depending on the driver)\nleaves the image on the screen.\nIn this example there is no way to update the scene later, since\nthe program has terminated.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import font show *\nimport pixel-display show *\nimport pixel-display.two-color show *  // Provides WHITE and BLACK.\n\nimport .get-display  // Import file in current project, see above.\n\nSANS ::= Font.get \"sans10\"\n// Edit get-display.toit to get a rotated display.\nDISPLAY ::= get-display\nSTYLE := Style --color=BLACK --font=SANS\n\nmain:\n  DISPLAY.background = WHITE\n  DISPLAY.add\n      Label --x=60 --y=50 --text=\"Hello from Toit!\" --style=STYLE\n  DISPLAY.draw\n  sleep --ms=1000\n`)), mdx(\"p\", null, `When creating an element to add to the scene there are a huge\nnumber of parameters to specify. This includes the color, the\norientation, the font, and the coordinate system. We combine\nalmost all these parameters into an immutable object called a\nstyle.`), mdx(\"p\", null, `In the above example we created a style that\ndraws in black, and uses the\nbuilt-in sans10 font for text objects.  Often styles are\nused with elements using maps that are reminiscent of CSS.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  // Create a new style for white elements.\n  white-style := Style --color=WHITE --font=SANS\n`)), mdx(\"h2\", {\n    \"id\": \"using-additional-fonts\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#using-additional-fonts\",\n    \"aria-label\": \"using additional fonts permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Using additional fonts`), mdx(\"p\", null, `More fonts are available in the packages `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `font-x11-adobe`), `,\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `font-clear`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `font-clearly-u`), `, and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `font-tiny`), ` packages.`), mdx(\"p\", null, `Once you have installed the package in your project,\nimport specific fonts from `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `font-x11-adobe`), ` with:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import font show *\nimport font-x11-adobe.sans-10-bold\nimport font-x11-adobe.sans-24-bold\nimport pixel-display show *\nimport pixel-display.two-color show WHITE BLACK\n\nimport .get-display  // Import file in current project, see above.\n\nmain:\n  SANS-10-BOLD ::= Font [\n    sans-10-bold.ASCII,\n    sans-10-bold.LATIN-1-SUPPLEMENT]\n  SANS-24-FONT ::= Font [\n    sans-24-bold.ASCII,\n    sans-24-bold.LATIN-1-SUPPLEMENT]\n  display/PixelDisplay ::= get-display\n\n  sans-10 := Style\n    --font = SANS-10-BOLD\n    --color = BLACK\n    --align-right\n\n  sans-24 := Style\n    --font = SANS-24-FONT\n    --color = BLACK\n    --align-center\n\n  [\n      Label --style=sans-10 --x=40 --y=30 --text=\"Hello from\",\n      Label --style=sans-24 --x=18 --y=65 --text=\"TOITWARE\",\n  ].do: display.add it\n  display.draw\n`)), mdx(\"p\", null, `Learn more about all available fonts `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../fonts\"\n  }, `here`), `.`), mdx(\"h2\", {\n    \"id\": \"using-icons\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#using-icons\",\n    \"aria-label\": \"using icons permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Using icons`), mdx(\"p\", null, `All `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://materialdesignicons.com/\"\n  }, `Material Design`), ` icons are available for use in Toit programs.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import pixel-display show *\nimport pixel-display.two-color show BLACK WHITE\n// Use \"jag pkg install pictogrammers_icons\" to get this package.\nimport pictogrammers-icons.size-48 as icons\n\nimport .get-display  // Import file in current project, see above.\n\nmain:\n  display/PixelDisplay := get-display\n  display.background = BLACK\n  // For this label we use \\`--icon\\` instead of \\`--text\\`.\n  display.add\n      Label --x=63 --y=85 --icon=icons.HUMAN-SCOOTER --color=WHITE\n  display.draw\n`)), mdx(\"h2\", {\n    \"id\": \"updating-the-display\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#updating-the-display\",\n    \"aria-label\": \"updating the display permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Updating the display`), mdx(\"p\", null, `In order to update the display we can build up a scene, then create a loop\nthat updates the scene as new data arrives. Here is a bigger example that\nsubscribes to an MQTT topic for its weather information, and uses the\nlocal time to update a digital clock on the same display.`), mdx(\"p\", null, `This example also shows the use of a style built up with maps, to let\nmultiple elements be styled with the same parameters.  We can use\nthe syntax `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--id=\"my-name\"`), ` to given an element a name, much like\nthe HTML syntax `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<div id=\"my-name\">`), `.  Similarly, we can give an element a\nclass with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--classes=[\"my-class\"]`), `, which is analogous to\nthe HTML syntax `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<div class=\"my-class\">`), `.  We don't use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--class`), ` because\nthat is a reserved keyword in Toit.`), mdx(\"p\", null, `A composite style like this for the entire display must be applied to the\ndisplay with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `display.set-styles [STYLE]`), ` before the display is drawn.`), mdx(\"img\", {\n    src: WeatherExample,\n    alt: \"Weather station example screenshot\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import encoding.json\nimport font show *\nimport font-x11-adobe.sans-14-bold\nimport monitor show Mutex\nimport mqtt\n\nimport pictogrammers-icons.size-48 as icons\nimport pixel-display.two-color show *\nimport pixel-display show *\n\nimport .get-display  // Import file in current project, see above.\n\n// Search for icon names on https://materialdesignicons.com/\n// (hover over icons to get names).\nWMO-4501-ICONS ::= [\n  icons.WEATHER-SUNNY,\n  icons.WEATHER-CLOUDY,\n  icons.WEATHER-SNOWY,\n  icons.WEATHER-SNOWY-HEAVY,\n  icons.WEATHER-FOG,\n  icons.WEATHER-PARTLY-RAINY,\n  icons.WEATHER-RAINY,\n  icons.WEATHER-SNOWY,\n  icons.WEATHER-PARTLY-RAINY,\n  icons.WEATHER-LIGHTNING,\n]\n\n// We don't want separate tasks updating the display at the\n// same time, so this mutex is used to ensure the tasks only\n// have access one at a time.\ndisplay-mutex := Mutex\n\nWIDTH ::= 128\nHEIGHT ::= 64\n\ndisplay := get-display\n\nmain:\n  sans-14-font ::= Font [\n    sans-14-bold.ASCII,  // Regular characters.\n    sans-14-bold.LATIN-1-SUPPLEMENT,  // Degree symbol.\n  ]\n\n  // Circle as background of weather icon.\n  DIAMETER ::= 56\n  CORNER-RADIUS ::= DIAMETER / 2\n\n  display.background = BLACK\n\n  STYLE ::= Style\n      --class-map = {\n          \"top\": Style --x=0 --y=0 --w=WIDTH --h=HEIGHT\n              --background=BLACK\n              --border=(RoundedCornerBorder --radius=8),\n          \"rounded\": Style --x=68 --y=4\n              --w = DIAMETER\n              --h = DIAMETER\n              --border = RoundedCornerBorder --radius=CORNER-RADIUS\n              --background = WHITE,\n          \"temp-box\": Style --x=0 --y=0 --w=64 --h=32 --background=WHITE,\n          \"clock-box\": Style --x=0 --y=32 --w=64 --h=32 --background=BLACK,\n      }\n      --id-map = {\n          \"icon\": Style --x=(DIAMETER / 2) --y=(16 + DIAMETER / 2) --color=BLACK --align-center,\n          \"temp\": Style --x=32 --y=23 --font=sans-14-font --color=BLACK --align-center,\n          \"time\": Style --x=32 --y=23 --font=sans-14-font --color=WHITE --align-center,\n      }\n\n  // The Div element takes a list as a parameter, which allows you to\n  // specify the children that it contains.  This lets us build up\n  // a display with a syntactic tree of elements, and since Toit does\n  // not have a \\`new\\` keyword the result is a bit like a DSL.\n  display.add\n      Div.clipping --classes=[\"top\"] [\n          Div.clipping --classes=[\"rounded\"] [\n              Label --id=\"icon\",\n          ],\n          Div --classes=[\"temp-box\"] [\n              Label --id=\"temp\",\n          ],\n          Div --classes=[\"clock-box\"] [\n              Label --id=\"time\",\n          ],\n      ]\n\n  // This applies the styles to all the elements that have been added to the\n  // display.\n  display.set-styles [STYLE]\n\n  task --background:: clock-task (display.get-element-by-id \"time\")\n  task --background:: weather-task (display.get-element-by-id \"icon\") (display.get-element-by-id \"temp\")\n\nweather-task weather-icon/Label temperature-element/Label:\n  client := mqtt.Client --host=\"127.0.0.1\"\n  client.start --client-id=\"toit-client-id\"\n  client.subscribe \"weather\":: | topic/string payload/ByteArray |\n    map := json.decode payload\n    code := map[\"wmo_4501\"]\n    temp := map[\"temperature_c\"]\n    display-mutex.do:\n      weather-icon.icon = WMO-4501-ICONS[code]\n      temperature-element.label = \"$(%.1f temp)°C\"\n      display.draw\n\nclock-task time-element/Label:\n  while true:\n    now := (Time.now).local\n    display-mutex.do:\n      // H:MM or HH:MM depending on time of day.\n      time-element.label = \"$now.h:$(%02d now.m)\"\n      display.draw\n    // Sleep this task until the next whole minute.\n    sleep-time := 60 - now.s\n    sleep --ms=sleep-time*1000\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#display","title":"Display","items":[{"url":"#getting-the-display-driver-and-pixeldisplay-object","title":"Getting the display driver and PixelDisplay object"}]},{"url":"#display-architecture","title":"Display architecture","items":[{"url":"#write-with-built-in-sans-font","title":"Write with built-in sans font"},{"url":"#using-additional-fonts","title":"Using additional fonts"},{"url":"#using-icons","title":"Using icons"},{"url":"#updating-the-display","title":"Updating the display"}]}]}}},"pageContext":{"title":"Display","id":"31cbf372-5ae3-5c79-92c9-cebacb017689"}},
    "staticQueryHashes": ["2197327828"]}