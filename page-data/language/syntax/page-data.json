{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/language/syntax",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"syntax-fundamentals\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#syntax-fundamentals\",\n    \"aria-label\": \"syntax fundamentals permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Syntax fundamentals`), mdx(\"p\", null, `This document describes the basics of the Toit language. To learn about Toit's\ndocumentation convention, see the language `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../sdk/toitdoc\"\n  }, `documentation\nconvention`), ` section.`), mdx(\"h2\", {\n    \"id\": \"whitespace-and-indentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#whitespace-and-indentation\",\n    \"aria-label\": \"whitespace and indentation permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Whitespace and indentation`), mdx(\"p\", null, `Toit uses whitespace and indentation to construct the code structure:\ncomment. For example:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// Defines globals first, and then uses main function to\n// print out something.\ni := 1\nj := 10\n\nmain:\n  while i < j:\n    print i\n    i = i + 1\n`)), mdx(\"h2\", {\n    \"id\": \"declaration-and-assignment\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#declaration-and-assignment\",\n    \"aria-label\": \"declaration and assignment permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Declaration and assignment`), mdx(\"p\", null, `In the above, we declared new variables `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `i`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `j`), ` using\ncolon-equals. We assigned a new value to the existing variable,\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `i`), `, using a single equals sign. To declare a variable without\ngiving it a value, you can use a question mark: `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `:= ?`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  x := 0\n  if (random 2) == 0:\n    x = 42\n\n  y := ?\n  if (random 2) == 0:\n    y = 1\n  else:\n    y = 42\n\n`)), mdx(\"p\", null, `The compiler will check that the new variable is assigned a value before it is\nused.`), mdx(\"h2\", {\n    \"id\": \"comments\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#comments\",\n    \"aria-label\": \"comments permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Comments`), mdx(\"p\", null, `In Toit, a single line comment begins with a double slash `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `//`), ` followed by the comment. For example:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// This is a single line comment in Toit.\n`)), mdx(\"p\", null, `For multi-line comments, use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `*/`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `/*\nsome multi-line\ncomment\n*/\n\n`)), mdx(\"h2\", {\n    \"id\": \"identifiers-and-keywords\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#identifiers-and-keywords\",\n    \"aria-label\": \"identifiers and keywords permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Identifiers and keywords`), mdx(\"p\", null, `Identifiers are names that identify globals, locals, functions, classes, libraries, and other objects in Toit.`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Identifier names can contain only letters, numbers, dashes (-) and underscores (`, `_`, `), but cannot contain\nspaces. Dashes must be enclosed by letters or numbers. Dashes are equated with underscores. That is,\n`, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `foo-bar`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `foo_bar`), ` refere to the same entity. When possible, prefer dashes.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Identifiers need to start with a letter or an underscore (`, `_`, `), but not with a number. The following characters can be alphanumeric or underscore.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Toit identifiers are case-sensitive.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Identifier names cannot be the same as keywords and built-in functions in Toit.`)), mdx(\"p\", null, `The following Toit keywords cannot be used for naming identifiers:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `as          abstract       assert\nbreak       class          continue\nelse        false          finally\nfor         if             import\nexport      null           return\nstatic      true           try\nwhile       or     and     not\n`)), mdx(\"p\", null, `In addition to these keywords, there are some \"pseudo keywords\" - like\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `constructor`), ` - that cannot be used in certain contexts. Trying these\npseudo-keywords as globals name will generally give an error message in the\nIDE.`), mdx(\"p\", null, `Another example of pseudo-keyword is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `operator`), ` that is allowed as a local but\ncannot be the name of a function. Similarly, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `string`), ` can be used like a normal\nglobal but would shadow the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `string`), ` type.`), mdx(\"h2\", {\n    \"id\": \"string-and-character-literals\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#string-and-character-literals\",\n    \"aria-label\": \"string and character literals permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `String and character literals`), mdx(\"p\", null, `Single quotes for are used for character literals and are equivalent to\ninteger literals of the corresponding Unicode code point, or\nrune.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  print 'A' // Prints \"65\", the ASCII code of 'A'.\n  print '*' // Prints \"42\", the ASCII code of '*'.\n  print 'æ' // Prints \"230\", the Unicode code point of 'æ'\n  print '€' // Prints \"8364\", the Unicode code point of the Euro symbol.\n  a /int := 'a'  // a now contains the integer 97.\n`)), mdx(\"p\", null, `Toit uses only double quotes `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\"`), ` to denote a string literal:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  print \"Hello, World!\"\n  str := \"a string\"  // str has type string.\n`)), mdx(\"p\", null, `If a string contains a double quote, a backslash, or a dollar sign,\nyou must use the backslash `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\\\\`), ` to\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../strings#escaped-characters\"\n  }, `escape`), ` it. The backslash\ncan also be used for characters that are `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../strings#escaped-characters\"\n  }, `difficult to\ntype`), `\nFor example:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `message := \"This is a \\\\\"valid\\\\\" string\"\n`)), mdx(\"p\", null, `The unescaped operator `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `$`), ` is used for `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../strings#string-interpolation\"\n  }, `string\ninterpolation`), `.`), mdx(\"p\", null, `The methods available on string objects are documented in\nthe `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/core/class-string\"\n  }, `string class`), `.\nSee also the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../strings\"\n  }, `guide to Toit strings`), `.`), mdx(\"h2\", {\n    \"id\": \"toit-globals-and-constants\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#toit-globals-and-constants\",\n    \"aria-label\": \"toit globals and constants permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Toit globals and constants`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `:=`), ` operator introduces a new global variable with the name of the given identifier (here \"global-name\").`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `global-name := 103\n`)), mdx(\"p\", null, `If the global is final (that is, can't be assigned to), then you can use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `::=`), ` as in:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `global-number ::= 42\n`)), mdx(\"p\", null, `Note that this in this case, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `global-number`), ` is actually a constant, and should thus be written in capital characters:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `GLOBAL-NUMBER ::= 42\n`)), mdx(\"p\", null, `A final global that isn't a constant could be something that is mutable itself, such as`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `some-global ::= []\n`)), mdx(\"p\", null, `In this case the global is initialized with an empty list. The content of the\nlist can change, but it will always be the same list.`), mdx(\"p\", null, `When you name a global, you should adhere to rules defined earlier about\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../syntax#identifiers-and-keywords\"\n  }, `identifiers`), `.`), mdx(\"p\", null, `Global variables (and `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../definitions\"\n  }, `static class\nvariables`), `) are initialized when\nthey are first used. This is noticeable if their value is\ndetermined by some function call, for example `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Time.now`)), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `TIME ::= Time.now  // Time.now is called on first use of TIME.\n\nmain:\n  print \"time: $Time.now\"  // Print time at program start.\n  sleep --ms=2000          // Sleep for two seconds.\n  print \"TIME: $TIME\"      // Print the global constant.\n  sleep  --ms=100\n  print \"TIME: $TIME\"      // The global constant remains unchanged.\n`)), mdx(\"p\", null, `This program will print two different times, the second one twice.`), mdx(\"h2\", {\n    \"id\": \"indexing-syntax\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#indexing-syntax\",\n    \"aria-label\": \"indexing syntax permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Indexing syntax`), mdx(\"p\", null, `Indexing into lists, maps, byte arrays, and strings can be\ndone with square brackets, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `[]`), `. The first element has an\nindex of zero.`), mdx(\"p\", null, `For example, an ASCII string is a sequence of characters,\nand you can access its elements using square\nbrackets [] and indexes.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `str := \"Toit String\"\nbyte-array := #[1, 42, 103]\nlist := [1, 10, 100, 1000]\nmap := {\n  \"foo\": 42,\n  \"bar\": 103,\n}\n\nmain:\n  print str[0]         // Prints \"84\", the ASCII code of 'T'.\n  print byte-array[1]  // Prints \"42\", the byte at position 1.\n  print list[3]        // Prints \"1000\", the integer at position 3.\n  print map[\"foo\"]     // Prints \"42\", the value with the key \"foo\".\n`)), mdx(\"p\", null, `Indexing into strings is done by `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../strings#string-representation\"\n  }, `UTF-8 byte\noffset`), `, so the\nstory is a little more complex for non-ASCII strings.`), mdx(\"p\", null, `Toit also has support for slices. These are views into part\nof a list, byte array, or string:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  print str[0..4] // Prints \"Toit\", the first 4 bytes of \"Toit String\".\n  print str[..4]  // Prints \"Toit\", the first 4 bytes of \"Toit String\".\n  print str[5..]  // Prints \"String\", the last part of \"Toit String\".\n`)), mdx(\"p\", null, `See also the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../strings#slices-of-strings\"\n  }, `description of slice\nsyntax`), ` in the string\nguide.`), mdx(\"p\", null, `A slice may keep the underlying object alive, preventing a\ngarbage collection. To avoid that you can use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `copy`), ` to\ncreate a new object containing only the elements in the\nslice:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `long-lived-global/ByteArray := #[]\n\nmain:\n  huge := ByteArray 1000000\n  // The slice keeps huge alive:\n  long-lived-global = huge[1000..1050]\n  // Makes a copy, so huge can be garbage collected:\n  long-lived-global = long-lived-global.copy\n`)), mdx(\"h2\", {\n    \"id\": \"continuation-of-statements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#continuation-of-statements\",\n    \"aria-label\": \"continuation of statements permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Continuation of statements`), mdx(\"p\", null, `Toit uses a newline character to separate statements. It places each statement on one line.\nHowever you can break very long statements into multiple lines.`), mdx(\"h3\", {\n    \"id\": \"line-breaks-in-function-arguments\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#line-breaks-in-function-arguments\",\n    \"aria-label\": \"line breaks in function arguments permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Line breaks in function arguments`), mdx(\"p\", null, `In a long list of arguments for a function call you\ncan use a new line for each argument.`), mdx(\"p\", null, `A long statement can also span multiple lines by using the backslash (`, `)`, ` character.`), mdx(\"p\", null, `The following example illustrates how to use per-argument\nnewlines, or the backslash (`, `)`, ` character to continue a\nstatement in the second line:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `// A method with many parameters.\nfoo a b c d e f g h i j: ...\n\nmain:\n  some-long-local1 := 1\n  some-long-local2 := 2\n  some-long-local3 := 3\n  some-long-local4 := 4\n  some-long-local5 := 5\n  some-long-local6 := 6\n  some-long-local7 := 7\n  some-long-local8 := 8\n  some-long-local9 := 9\n  some-long-local10 := 10\n  // Once there is a newline, all further arguments must be\n  // on their own line:\n  foo some-long-local1 some-long-local2 some-long-local3\n    some-long-local4\n    some-long-local5\n    some-long-local6\n    some-long-local7\n    some-long-local8\n    some-long-local9\n    some-long-local10\n  // We can also write all of them in one line:\n  foo some-long-local1 some-long-local2 some-long-local3 some-long-local4 some-long-local5 some-long-local6 some-long-local7 some-long-local8 some-long-local9 some-long-local10\n  // But that becomes hard to read fast.\n  // If we want to cut the line at some point we need a \\`\\\\\\` to conceptually continue the first line:\n  foo some-long-local1 some-long-local2 some-long-local3 \\\\\n      some-long-local4 some-long-local5 some-long-local6 \\\\\n      some-long-local7 some-long-local8 some-long-local9 \\\\\n      some-long-local10\n`)), mdx(\"p\", null, `Putting a line break between function arguments also has the effect\nof grouping the arguments, which can make parentheses\nunneccessary:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `two-arg-function a b:\n  return a + b\n\nthree-arg-function a b c:\n  return a + b + c\n\nmy-func a/int b/int c/int -> int:\n  // Long line with many parentheses.\n  x := three-arg-function (two-arg-function a b) (two-arg-function b c) (two-arg-function c a)\n\n  // One line per argument looks better:\n  y := three-arg-function\n    (two-arg-function a b)\n    (two-arg-function b c)\n    (two-arg-function c a)\n\n  // For a cleaner look we don't need parentheses around\n  // the arguments that have their own line.\n  z := three-arg-function\n    two-arg-function a b\n    two-arg-function b c\n    two-arg-function c a\n\n  return x + y + z\n`)), mdx(\"h3\", {\n    \"id\": \"line-breaks-in-operator-expressions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#line-breaks-in-operator-expressions\",\n    \"aria-label\": \"line breaks in operator expressions permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Line breaks in operator expressions`), mdx(\"p\", null, `If you need to break up a large expression, the second and subsequent\nlines should be indented more than the first:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `long-expr-function long-argument-name other-argument-name:\n  return long-argument-name\n    + 2 * other-argument-name\n    - long-argument-name.abs\n`)), mdx(\"p\", null, `As seen here, the preferred style is to put binary operators after\nthe line break, not before.`), mdx(\"h3\", {\n    \"id\": \"line-breaks-in-multi-line-or-very-long-string-literals\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#line-breaks-in-multi-line-or-very-long-string-literals\",\n    \"aria-label\": \"line breaks in multi line or very long string literals permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Line breaks in multi-line or very long string literals`), mdx(\"p\", null, `See the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../strings\"\n  }, `guide to strings`), ` on how to format\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../strings#multi-line-strings\"\n  }, `multi-line strings`), ` and how to line-break\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../strings#long-string-literals\"\n  }, `very long string literals`), `.`), mdx(\"h2\", {\n    \"id\": \"precedence\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#precedence\",\n    \"aria-label\": \"precedence permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Precedence`), mdx(\"p\", null, `Operators and other syntactic elements have precedence, like in other\nlanguages. From highest to lowest:`), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#postfix-operators\"\n  }, `Postfix operators`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `  ++    --\n`)), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#math-operators\"\n  }, `Math operators`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `  -    ~    (unary operators)\n  *    /    %\n  +    -\n  <<    >>>    >>\n  &\n  ^\n  |\n`)), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#type-operators\"\n  }, `Type operators`)), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `  is    is not    as\n`)), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#comparison-operators\"\n  }, `Comparison operators`)), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `  ==    !=    <    <=    >    >=\n`)), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#calls-and-arguments\"\n  }, `Calls and arguments`)), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#logical-operators\"\n  }, `Logical operators`)), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `  not\n  and\n  or\n  ?:\n`)), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#assignment-operators\"\n  }, `Assignment operators`)), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, `  =  :=  ::=  +=  -=  *=  /=  %=  |=  ^=  &=  <<=  >>=  >>>=\n`)), mdx(\"h3\", {\n    \"id\": \"postfix-operators\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#postfix-operators\",\n    \"aria-label\": \"postfix operators permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Postfix operators`), mdx(\"p\", null, `The postfix operators, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `++`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--`), ` have the highest precedence. Thus\nthe following two lines are equivalent:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  z1 := x + y++\n  z2 := x + (y++)\n`)), mdx(\"p\", null, `Toit does not have the prefix forms of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `++`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  for i :=0; i < 10; ++i:  // Error!  There is no prefix ++.\n    // ...\n`)), mdx(\"h3\", {\n    \"id\": \"math-operators\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#math-operators\",\n    \"aria-label\": \"math operators permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Math operators`), mdx(\"p\", null, `The `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../math\"\n  }, `math`), ` operators have the next highest precedence. In order of\ndescending precedence the order is:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Unary operators, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `-`), ` `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `~`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Multiplicative operators, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `*`), ` `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `/`), ` `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `%`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Additive operators, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `+`), ` `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `-`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Bit-shift operators, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `<<`), ` `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `>>>`), ` `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `>>`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Bit-and operator, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `&`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Bit-xor operator, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `^`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Bit-or operator, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `|`))), mdx(\"p\", null, `Thus the following pairs of lines are equivalent:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  a1 := ~x * 3\n  a2 := (~x) * 3\n\n  a3 := 4 + 2 * 3\n  a4 := 4 + (2 * 3)\n\n  a5 := x >> y + 1\n  a6 := x >> (y + 1)\n\n  a7 := x & mask << distance\n  a8 := x & (mask << distance)\n\n  b1 := x ^ y & z\n  b2 := x ^ (y & z)\n\n  b3 := x | y ^ z\n  b4 := x | (y ^ z)\n`)), mdx(\"p\", null, `The math operators group from left to right. Thus the following pairs of lines\nare equivalent`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  b5 := x / y / z\n  b6 := (x / y) / z\n\n  b7 := x * y / z\n  b8 := (x * y) / z\n`)), mdx(\"p\", null, `Note that the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../math#bit-operations\"\n  }, `bitwise operators`), ` have higher\nprecedence than the comparison operators in Toit. This is like Dart, but\nunlike C and Java. Thus the following are equivalent in Toit, but not in C:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  c1 := x & 1 == 0\n  c2 := (x & 1) == 0\n`)), mdx(\"p\", null, `See the full documentation of operators on\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/core/numbers/class-int\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, `int`)), ` and\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/core/numbers/class-float\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, `float`)), `.`), mdx(\"h3\", {\n    \"id\": \"type-operators\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#type-operators\",\n    \"aria-label\": \"type operators permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Type operators`), mdx(\"p\", null, `The next operators in the precedence order are the type operators, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `is`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `is not`), `, and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `as`), `.`), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `is`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `is not`), ` return a boolean depending on whether the runtime type\nof the left hand side has the type on the right.`), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `as`), ` is a cast, which dynamically checks the type and returns a value with the\ncorrect static type:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `my-function x y:\n  if x is int:\n    // Code that can use x as an integer\n  if y is not string:\n    // y must be something other than string\n  // The programmer knows somehow that y is a number.  This checks\n  // that the programmer is right and allows the program to pass the\n  // compiler's type checker:\n  return (y as num) + 1\n`)), mdx(\"h3\", {\n    \"id\": \"comparison-operators\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#comparison-operators\",\n    \"aria-label\": \"comparison operators permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Comparison operators`), mdx(\"p\", null, `The next operators in the precedence order are the comparison operators,\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `==`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `!=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `>`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `>=`), `.`), mdx(\"p\", null, `Thus the following pairs of lines are equivalent:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  c3 := x + 1 <= y * 2\n  c4 := (x + 1) >= (y * 2)\n\n  c5 := x + 1 <= y & -2\n  c6 := (x + 1) >= (y & -2)  // Equivalent in Toit, not in C.\n`)), mdx(\"p\", null, `The comparison operators form a group with ternary and other\nn-ary forms so that they can be used in the mathematical way. Thus the\nfollowing pairs are equivalent:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  // Test that x is in the range [0, y).\n  if 0 <= x < y:\n    // ...\n  if 0 <= x and x < y:\n    // ...\n\n  // Test that 'from' and 'to' are in the range [0, size),\n  // and that 'from' is less than or equal to 'to'.\n  if 0 <= from <= to < size:\n    // ...\n  if 0 <= from and from <= to and to < size:\n    // ...\n\n  // Test that 'base' is equal to 0, and that 'level' is in the\n  // range [0, top).\n  if 0 == base <= level < top:\n    // ...\n  if 0 == base and base <= level and level < top:\n    // ...\n`)), mdx(\"h3\", {\n    \"id\": \"calls-and-arguments\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#calls-and-arguments\",\n    \"aria-label\": \"calls and arguments permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Calls and arguments`), mdx(\"p\", null, `Calls and arguments are done with spaces in Toit, not with\nparentheses and commas. Thus we write:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import math show *\n\nmy-function x y z:\n  foo x y z          // In C: foo(x, y, z)\n  c7 := 2 * (sin x)  // In C: 2 * sin(x)\n`)), mdx(\"p\", null, `The mathematical operators all have higher precedence than calls,\nso the following are equivalent:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  foo x + 1 y + 2 z + 3\n  foo (x + 1) (y + 2) (z + 3)\n\n  cos x + PI / 4    // In C: cos(x + PI / 4)\n  cos (x + PI / 4)  // In C: cos(x + PI / 4)\n  cos(x + PI / 4)   // Looks like C call syntax.\n`)), mdx(\"p\", null, `The third form, with the redundant parentheses and no space, looks like\na C-style call syntax. However this is an illusion:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import math show *\n\nmy-function x/float y/float:\n  acos(x) + 100   // Not what it looks like!\n  acos (x + 100)  // Equivalent!\n\n  atan2 x y       // Correct.\n  atan2(x, y)     // Syntax error!\n`)), mdx(\"h3\", {\n    \"id\": \"logical-operators\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#logical-operators\",\n    \"aria-label\": \"logical operators permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Logical operators`), mdx(\"p\", null, `In descending precedence order:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `not`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `and`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `or`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `?:`), ` (the ternary operator)`)), mdx(\"p\", null, `The first three match the names used in Python and C++. In\nC++ these alphabetical forms are rarely used, and\nit is more common to see the symbolic forms, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `&&`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `||`), `, and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `!`), `.\nThe symbolic forms are not available in Toit.`), mdx(\"p\", null, `The following pairs are equivalent:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `my-function a b c:\n  if not a and b == 0:\n    // ...\n  if (not a) and (b == 0):\n    // ...\n\n  if a == 0 or b == 0 and c == 0:\n    // ...\n  if (a == 0) or ((b == 0) and (c == 0)):\n    // ...\n`)), mdx(\"p\", null, `Since the logical operators are lower than the calls and arguments\nwe have to group them:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `my-unary-function x/bool:\n  // ...\n\nis-odd x/int -> bool:\n  return x % 2 == 1\n\nmy-function condition-a/bool condition-b/bool x/int y/int:\n  my-unary-function (condition-a and condition-b)  // Parentheses needed.\n\n  // The following two forms are equivalent.\n  if is-odd x and is-odd y:\n    // ...\n  if (is-odd x) and (is-odd y):\n    // ...\n`)), mdx(\"h3\", {\n    \"id\": \"assignment-operators\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#assignment-operators\",\n    \"aria-label\": \"assignment operators permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Assignment operators`), mdx(\"p\", null, `The lowest operators in the precedence order are the assignment operators,\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `:=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `::=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `+=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `-=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `*=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `/=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `%=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `|=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `^=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `&=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<<=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `>>=`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `>>>=`), `.`), mdx(\"p\", null, `Since they are below the logical operators and calls, we can write\nequivalently:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  angle-1 := atan2 x y\n  angle-2 := (atan2 x y)\n\n  condition-1 := condition-a and condition-b\n  condition-2 := (condition-1 and condition-b)\n`)), mdx(\"p\", null, `Assignment operators are only allowed at the start of statements and\nin the first clause of a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `for`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `if`), `, or `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `while`), ` statement.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  while data := reader.read:\n    // data was not null.\n\n  if parsed := (int.parse str --on-error=: null):\n    // parsed is not null and thus a valid number.\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#syntax-fundamentals","title":"Syntax fundamentals","items":[{"url":"#whitespace-and-indentation","title":"Whitespace and indentation"},{"url":"#declaration-and-assignment","title":"Declaration and assignment"},{"url":"#comments","title":"Comments"},{"url":"#identifiers-and-keywords","title":"Identifiers and keywords"},{"url":"#string-and-character-literals","title":"String and character literals"},{"url":"#toit-globals-and-constants","title":"Toit globals and constants"},{"url":"#indexing-syntax","title":"Indexing syntax"},{"url":"#continuation-of-statements","title":"Continuation of statements","items":[{"url":"#line-breaks-in-function-arguments","title":"Line breaks in function arguments"},{"url":"#line-breaks-in-operator-expressions","title":"Line breaks in operator expressions"},{"url":"#line-breaks-in-multi-line-or-very-long-string-literals","title":"Line breaks in multi-line or very long string literals"}]},{"url":"#precedence","title":"Precedence","items":[{"url":"#postfix-operators","title":"Postfix operators"},{"url":"#math-operators","title":"Math operators"},{"url":"#type-operators","title":"Type operators"},{"url":"#comparison-operators","title":"Comparison operators"},{"url":"#calls-and-arguments","title":"Calls and arguments"},{"url":"#logical-operators","title":"Logical operators"},{"url":"#assignment-operators","title":"Assignment operators"}]}]}]}}},"pageContext":{"title":"Syntax fundamentals","id":"1c11f13c-144f-538e-bda1-0d4b83593883"}},
    "staticQueryHashes": ["2197327828"]}