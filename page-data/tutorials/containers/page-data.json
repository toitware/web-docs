{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/containers",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"containers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#containers\",\n    \"aria-label\": \"containers permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Containers`), mdx(\"p\", null, `Toit uses virtual machine technology to support running multiple\ncontainers on your device. The containers are developed and\nmaintained independently from each other and the virtual machine\nprovides the capabilities for safely running your platform-independent\napplications, services, and drivers side-by-side.`), mdx(\"img\", {\n    src: Architecture,\n    alt: \"Toit Architecture\"\n  }), mdx(\"p\", null, `Containers can be installed dynamically, in which case a program\non the device downloads the container and installs it. Installing\ncontainers this way does not require a firmware update. In fact,\nthe container can be started without even rebooting the device.\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitlang/jaguar\"\n  }, `Jaguar`), `, Toit's development\ntool, uses this method to install containers, and provide rapid\ndevelopment cycles.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `Containers must be compiled with the same SDK version as the firmware.`)), mdx(\"p\", null, `Alternatively, containers can be installed statically, where they\nare bundled together with a firmware. These bundles are called\nenvelopes and are an integral part of Toit's firmware process.`), mdx(\"p\", null, `When flashing a device, Toit's tools take a firmware envelope as input\nand flash it onto the device. Similarly, Toit use firmware\nenvelopes as input for over-the-air updates.`), mdx(\"p\", null, `Different tools have different capabilities:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `the `, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./toit-sdk\"\n  }, `SDK tools`), ` are specialized for working with\nenvelopes (typically before flashing).`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./jaguar\"\n  }, `Jaguar`), ` only modifies containers dynamically.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./artemis\"\n  }, `Artemis`), ` bundles containers with the OTA firmware,\nbut can also install containers dynamically without\nneeding a firmware update.`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#containers","title":"Containers"}]}}},"pageContext":{"title":"Containers","id":"4b555d66-7b94-5410-8b80-1d749a0890f8"}},
    "staticQueryHashes": ["2197327828"]}