{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/starter/weatherstation",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"weather-station\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#weather-station\",\n    \"aria-label\": \"weather station permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Weather station`), mdx(\"p\", null, `In this tutorial we are using an ESP32 with the Bosch `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bme280-ds002.pdf\"\n  }, `BME280 sensor`), `; an environmental sensor measuring temperature, the relative humidity, and the atmospheric pressure.`), mdx(\"p\", null, `The code examples shown in this tutorial are also available `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitware/bme280_post/tree/main/weather-station\"\n  }, `here`), `.`), mdx(\"h2\", {\n    \"id\": \"connect-the-sensor\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#connect-the-sensor\",\n    \"aria-label\": \"connect the sensor permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Connect the sensor`), mdx(\"img\", {\n    src: Qwiic,\n    alt: \"BME280\",\n    width: \"100%\"\n  }), mdx(\"p\", null, `Follow the steps `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../../peripherals/drivers/bme280\"\n  }, `here`), ` to connect the BME280 sensor with your ESP32 using a Qwiic cable.`), mdx(\"h2\", {\n    \"id\": \"install-package\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#install-package\",\n    \"aria-label\": \"install package permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Install package`), mdx(\"p\", null, `In order to get data from the sensor we make use of the BME280 driver available as a `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `package`), ` from\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Fbme280-driver\"\n  }, `pkg.toit.io`), `.`), mdx(\"p\", null, `Open Visual Studio Code, and create a new file. Paste the following Toit program into the file and save the file as: `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `weather-station.toit`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `/**\nProgram measuring temperature, relative humidity, and atmospheric pressure\n  with a BME280.\n*/\n\nimport gpio\nimport i2c\nimport bme280\n\nmain:\n  bus := i2c.Bus\n    --sda=gpio.Pin 21\n    --scl=gpio.Pin 22\n\n  device := bus.device bme280.I2C-ADDRESS-ALT\n\n  driver := bme280.Driver device\n\n  print \"Temperature: $driver.read-temperature C\"\n  print \"Humidity: $driver.read-humidity %\"\n  print \"Pressure: $driver.read-pressure Pa\"\n`)), mdx(\"p\", null, `Then, open a terminal window in VS Code and execute the following commands in order to install the BME280 driver package locally:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg init\njag pkg install github.com/toitware/bme280-driver\n`)), mdx(\"h2\", {\n    \"id\": \"run-toit-program\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#run-toit-program\",\n    \"aria-label\": \"run toit program permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Run Toit program`), mdx(\"p\", null, `If you want to know more about what is happening in each step in the Toit program above, see `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../../peripherals/drivers/bme280#i2cbus\"\n  }, `here`), `.`), mdx(\"p\", null, `To run the program once on the ESP32, execute the CLI command`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag run weather-station.toit\n`)), mdx(\"p\", null, `If you haven't set your default device in the CLI, you can set it\nwith the command `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag scan`), `.  (Your workstation and your device must\nbe on the same WiFi network.)`), mdx(\"p\", null, `Alternatively, you can add `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `-d device-name`), ` to\nthe run command, where `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `device-name`), ` is the name of your ESP32.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `$ jag run weather-station.toit\nRunning 'weather-station.toit' on 'mydevice' ...\nSuccess: Sent 37KB code to 'mydevice'\n`)), mdx(\"p\", null, `You can see the program's output on the USB/serial port using\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag monitor`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `[jaguar] INFO: program 7a3d83f9-837c-589d-a6e4-8f95ecb3cab4 started\nTemperature: 25.769999999999999574 C\nHumidity: 42.111328125 %\nPressure: 101686.515625 Pa\n[jaguar] INFO: program 7a3d83f9-837c-589d-a6e4-8f95ecb3cab4 stopped\n`)), mdx(\"p\", null, `Running a Toit program in this way means that it will be uninstalled from the device once the program has terminated.`), mdx(\"h2\", {\n    \"id\": \"deploy-app\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#deploy-app\",\n    \"aria-label\": \"deploy app permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Deploy app`), mdx(\"p\", null, `If we want the program to survive reboots, we have to install it as a container.`), mdx(\"p\", null, `Deploy the application as follows:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag container install weather weather-station.toit\n`)), mdx(\"p\", null, `Doing so will install the application so that it is automatically started whenever the\nESP32 boots.`), mdx(\"p\", null, `At the current state this isn't very useful, as the program stops after one iteration.`), mdx(\"p\", null, `We have two options to fix this:`), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Use an infinite loop inside the program, that sleeps, or`), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Go into deep sleep and wake up after a few seconds. Waking up from\ndeep sleep counts as rebooting, and will thus cause the container to\nbe restarted.`)), mdx(\"h3\", {\n    \"id\": \"infinite-loop\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#infinite-loop\",\n    \"aria-label\": \"infinite loop permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Infinite loop`), mdx(\"p\", null, `Change your program to:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `/**\nProgram measuring temperature, relative humidity, and atmospheric pressure\n  with a BME280.\n*/\n\nimport gpio\nimport i2c\nimport bme280\n\nmain:\n  bus := i2c.Bus\n    --sda=gpio.Pin 21\n    --scl=gpio.Pin 22\n\n  device := bus.device bme280.I2C-ADDRESS-ALT\n\n  driver := bme280.Driver device\n\n  while true:\n    print \"Temperature: $driver.read-temperature C\"\n    print \"Humidity: $driver.read-humidity %\"\n    print \"Pressure: $driver.read-pressure Pa\"\n    sleep --ms=5000\n`)), mdx(\"p\", null, `Deploy the new version with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag container install weather weather-station.toit`), ` to\nreplace the old version.`), mdx(\"p\", null, `With this small modification, the program now runs continuously and outputs the\nmeasured values every 5 seconds.`), mdx(\"h3\", {\n    \"id\": \"deep-sleep\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#deep-sleep\",\n    \"aria-label\": \"deep sleep permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Deep sleep`), mdx(\"p\", null, `We first need to import ESP32 specific functions by adding the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `esp32`), ` import:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import esp32\n`)), mdx(\"p\", null, `This provides the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `deep-sleep`), ` function which immediately puts the ESP32 into deep\nsleep. We need to be a bit careful with this function, though. If we call\ndeep sleep too early, then the Jaguar service on the ESP32 won't have the time\nto connect to the WiFi and receive new commands. While you use Jaguar\nfor development, it is a good idea to add a few seconds of delay before calling\ndeep sleep. This way, Jaguar can start up and receive commands before your\nprogram shuts down the ESP32.`), mdx(\"p\", null, `If you forget the timeout or set it too low, then you can always use the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag flash`), ` command to recover your ESP32.`), mdx(\"p\", null, `Here is the updated version of our program that uses deep sleep:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `/**\nProgram measuring temperature, relative humidity, and atmospheric pressure\n  with a BME280.\n*/\n\nimport gpio\nimport i2c\nimport bme280\nimport esp32\n\nmain:\n  bus := i2c.Bus\n    --sda=gpio.Pin 21\n    --scl=gpio.Pin 22\n\n  device := bus.device bme280.I2C-ADDRESS-ALT\n\n  driver := bme280.Driver device\n\n  print \"Temperature: $driver.read-temperature C\"\n  print \"Humidity: $driver.read-humidity %\"\n  print \"Pressure: $driver.read-pressure Pa\"\n  sleep --ms=5000  // Give Jaguar time to receive commands.\n  esp32.deep-sleep (Duration --s=10)\n`)), mdx(\"p\", null, `Deploy the new version with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag container install weather weather-station.toit`), ` to\nreplace the old version.`), mdx(\"p\", null, `When using `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag monitor`), ` you should see new measurements every 15 seconds.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#weather-station","title":"Weather station","items":[{"url":"#connect-the-sensor","title":"Connect the sensor"},{"url":"#install-package","title":"Install package"},{"url":"#run-toit-program","title":"Run Toit program"},{"url":"#deploy-app","title":"Deploy app","items":[{"url":"#infinite-loop","title":"Infinite loop"},{"url":"#deep-sleep","title":"Deep sleep"}]}]}]}}},"pageContext":{"title":"Weather station","id":"c494eb32-ed78-56cf-aa9a-d70dc1b80f38"}},
    "staticQueryHashes": ["2197327828"]}