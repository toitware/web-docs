{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/starter",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"log-the-date-and-time\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#log-the-date-and-time\",\n    \"aria-label\": \"log the date and time permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Log the date and time`), mdx(\"p\", null, `In this tutorial we show you how to run a simple data-logging program on your device.\nThe program logs the current date and time, which can then be viewed in the serial\noutput of your device.`), mdx(\"p\", null, `The following Toit program uses `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `print`), ` to log the current date and time.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  time := Time.now.local\n  print \"Time: $(%02d time.h):$(%02d time.m)\"\n  print \"Date: $(%04d time.year)-$(%02d time.month)-$(%02d time.day)\"\n`)), mdx(\"p\", null, `Save the above Toit program in a file named `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `time.toit`), `, and run the command`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `$ jag run time.toit\nRunning 'time.toit' on 'mydevice' ...\nSuccess: Sent 37KB code to 'mydevice'\n`)), mdx(\"p\", null, `This runs the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `time.toit`), ` program on your default device. If you have\nmore than one device and haven't defined a default device yet, you can\nuse the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `-d`), ` option to specify on which device the program should run.`), mdx(\"p\", null, `To see the output of the program you need to monitor the serial line, which\nyou can do in a different terminal window with the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag monitor`), ` command.`), mdx(\"p\", null, `The output in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag monitor`), ` will look like`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `[jaguar] INFO: program 7a3d83f9-837c-589d-a6e4-8f95ecb3cab4 started\nTime: 00:00\nDate: 1970-01-01\n[jaguar] INFO: program 7a3d83f9-837c-589d-a6e4-8f95ecb3cab4 stopped\n`)), mdx(\"p\", null, `The reason you see this date from the 1970s is that the system time\nhas not been updated on your device yet.\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitlang/pkg-ntp/blob/master/examples/settime.toit\"\n  }, `Here`), `\nis a small program that can be run after power-up to fix that.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#log-the-date-and-time","title":"Log the date and time"}]}}},"pageContext":{"title":"Log the date and time","id":"b85d4bdb-9e61-5e64-91e1-ff41de7bd560"}},
    "staticQueryHashes": ["2197327828"]}