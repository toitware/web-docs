{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/hardware/neopixel",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"neopixel\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#neopixel\",\n    \"aria-label\": \"neopixel permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Neopixel`), mdx(\"p\", null, `Neopixels are Adafruit's brand for WS2812 indivually-addressable RGB color pixel\nstrips. In this tutorial we will use the term Neopixel to refer to any WS2812\ncompatible LED strip (including the SK6812, which have an additional white LED, and\nthus an existing color byte for each LED).`), mdx(\"p\", null, `Neopixels are connected in series. Each LED has a data input pin (DI) and a data\noutput pin (DO). The DO pin of the first LED is connected to the DI pin of the second\nLED, and so on. The DO pin of the last LED is not connected to anything.`), mdx(\"p\", null, `When the first LED receives a signal on its DI pin, it will read the first 24 bits\n(or 32 bits for SK6812) of the signal and then pass the rest on to the next LED.\nThe first 24 bits are interpreted as three 8-bit color values: red, green and blue\n(and white for SK6812). The LED will then light up with the specified color, and\npass the rest of the signal on to the next LED.`), mdx(\"h2\", {\n    \"id\": \"prerequisites\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Prerequisites`), mdx(\"p\", null, `We assume that you have set up your development environment as described\nin `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/ide\"\n  }, `the IDE tutorial`), `.`), mdx(\"p\", null, `We also assume that you have flashed your device with Jaguar and that\nyou are familiar with running Toit programs on it.\nIf not, have a look at the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/firstprogram\"\n  }, `Hello world`), ` tutorial.`), mdx(\"h2\", {\n    \"id\": \"setup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#setup\",\n    \"aria-label\": \"setup permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Setup`), mdx(\"p\", null, `Connect the LED strip as follows:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Connect the 5V/power pin of the LED strip to the 5V pin of the ESP32. The\n5V pin of the ESP32 is often marked as VIN, since that's the 5V input that\nis provided by the USB connector.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Connect the GND pin of the LED strip to the GND pin of the ESP32.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Connect pin 13 of the ESP32 to the DI pin of the LED strip.`)), mdx(\"img\", {\n    src: NeopixelDiagram,\n    alt: \"Wiring diagram for a Neopixel LED strip\"\n  }), mdx(\"img\", {\n    src: NeopixelSchematics,\n    alt: \"Schematics for a Neopixel LED strip\"\n  }), mdx(\"h2\", {\n    \"id\": \"packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#packages\",\n    \"aria-label\": \"packages permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Packages`), mdx(\"p\", null, `The driver for pixel strips is not part of the standard Toit distribution,\nbut must be downloaded as package. See the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/packages\"\n  }, `packages`), `\ntutorial for details.`), mdx(\"p\", null, `We are using the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Ftoit-pixel-strip\"\n  }, `pixel_strip`), `\npackage. To install it, run the following command in your project directory:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, `jag pkg install github.com/toitware/toit-pixel-strip@v0.3\n`)), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `You can probably just write `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg install pixel-strip`), `, but the full ID together\nwith the version is more explicit, and will make sure you get the right package.`)), mdx(\"h2\", {\n    \"id\": \"code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#code\",\n    \"aria-label\": \"code permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Code`), mdx(\"p\", null, `Open a new file and save it as `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `neopixel.toit`), `,and watch it with Jaguar.`), mdx(\"p\", null, `Insert the following program:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import gpio\nimport pixel-strip show PixelStrip\n\nPIXELS ::= 12\n\nmain:\n  pin := gpio.Pin 13\n  strip := PixelStrip.uart PIXELS --pin=pin\n\n  r := ByteArray PIXELS\n  g := ByteArray PIXELS\n  b := ByteArray PIXELS\n\n  current := 0\n  while true:\n    // Decrease intensity of all LEDs.\n    PIXELS.repeat:\n      r[it] = r[it] / 3\n      g[it] = g[it] / 3\n      b[it] = b[it] / 3\n\n    // Set the current LED to full brightness.\n    r[current] = 255\n    g[current] = 255\n    b[current] = 255\n\n    // Show the current configuration.\n    strip.output r g b\n\n    // Sleep.\n    sleep --ms=70\n\n    // Prepare for the next round.\n    current = (current + 1) % PIXELS\n`)), mdx(\"p\", null, `We are using the Uart version of the pixel-strip class. This means that the\npackage uses the ESP32's UART peripheral to implement the WS2812 protocol.\nSince the UART functionality is well optimized the Toit program can continue\nrunning while the LEDs are updated. In our case there are only 12 LEDs, and\ncommunicating with them doesn't take a long time, but when a pixel string\nhas 300 LEDs or more, it's crucial that the hardware does most of the work.`), mdx(\"p\", null, `We allocate three byte arrays. Each has PIXELS (set to 12) elements, and can\nbe used to set the red, green or blue color-components respectively.\nInitially each byte is set to 0.`), mdx(\"p\", null, `We then start an infinite loop (`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `while true`), `). Inside it we first decrease\nthe existing values by a factor of 3. In the very first iteration all values\nare 0 and therefore nothing happens, but in later iterations this will\ndim all lights.`), mdx(\"p\", null, `Then we set the current LED to full brightness.`), mdx(\"p\", null, `Finally, we send the new values to the strip, and wait 70ms.`), mdx(\"p\", null, `Before the next iteration we move to the next LED.`), mdx(\"h2\", {\n    \"id\": \"exercises\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#exercises\",\n    \"aria-label\": \"exercises permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Exercises`), mdx(\"p\", null, `The LED ring can draw a lot of power if many LEDs are at full brightness. This\ncan lead to brownouts where the ESP32 doesn't get enough power and\nreboots/shuts down.`), mdx(\"p\", null, `If this happens for `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../containers\"\n  }, `installed containers`), `, Jaguar\nmight be unable to change the installed program, leading to a boot-loop.\nIn this case just unplug the power for the LEDs and install a program that\nuses less power.`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Change the speed of the cycling LED.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Change the color of the cycling LED. Google for RGB values to find some interesting colors.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Instead of dimming the existing values equally, divide the individual color\ncomponents differently. For example /2 for red, /3 for green and /4 for blue.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Show a color wheel. Search for \"RGB color wheel\".`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Turn that wheel.`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#neopixel","title":"Neopixel","items":[{"url":"#prerequisites","title":"Prerequisites"},{"url":"#setup","title":"Setup"},{"url":"#packages","title":"Packages"},{"url":"#code","title":"Code"},{"url":"#exercises","title":"Exercises"}]}]}}},"pageContext":{"title":"Neopixel","id":"8dded312-622b-553a-939f-b5045381e765"}},
    "staticQueryHashes": ["2197327828"]}