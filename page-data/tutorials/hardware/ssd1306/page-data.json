{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/hardware/ssd1306",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"oled-display\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#oled-display\",\n    \"aria-label\": \"oled display permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `OLED display`), mdx(\"p\", null, `The SSD1306 OLED display is a cheap and popular display. It is, for\nexample, the display that is used on the Makerfabs ESP32 board.`), mdx(\"p\", null, `In this tutorial we will write text on it, and draw some icons.`), mdx(\"h2\", {\n    \"id\": \"prerequisites\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Prerequisites`), mdx(\"p\", null, `This tutorial assumes that you have done the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../i2c\"\n  }, `i2c`), ` tutorial.`), mdx(\"p\", null, `We recommend to have read the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/packages\"\n  }, `packages`), ` tutorial,\nsince we are going to use a package for the SSD1306 driver.`), mdx(\"h2\", {\n    \"id\": \"setup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#setup\",\n    \"aria-label\": \"setup permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Setup`), mdx(\"p\", null, `Connect the display to the ESP32 board as follows:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `VCC/VIN to 3V3`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `GND to GND`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `SCL to pin 25`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `SDA to pin 26`)), mdx(\"p\", null, `Many boards that have an SSD1306 display integrated (like\nthe `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.makerfabs.com/makepython-esp32.html\"\n  }, `Makerfabs MaESP Oled`), ` or\nthe Wemos Lolin) have the\ndisplay connected to pins 4 (SDA) and 5 (SCL). If you use one of these\nboards you have to change the code below to use these pins.`), mdx(\"img\", {\n    src: Makerfabs,\n    alt: \"Makerfabs ESP32 board with integrated SSD1306 display\"\n  }), mdx(\"p\", null, `The Heltec boards with integrated displays, use the following pins:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `v2: SDA=4, SCL=15`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `v3: SDA=17, SCL=18`)), mdx(\"p\", null, `Note that we use the Adafruit 128x32 display in the following diagrams. The\nconnections are the same for 128x64 displays.`), mdx(\"img\", {\n    src: Ssd1306Diagram,\n    alt: \"Wiring diagram for an SSD1306 display\"\n  }), mdx(\"img\", {\n    src: Ssd1306Schematics,\n    alt: \"Schematics for an SSD1306 display\"\n  }), mdx(\"h2\", {\n    \"id\": \"packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#packages\",\n    \"aria-label\": \"packages permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Packages`), mdx(\"p\", null, `The driver for the SSD1306 is not part of the standard Toit distribution,\nbut must be downloaded as package. See the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/packages\"\n  }, `packages`), `\ntutorial for details.`), mdx(\"p\", null, `We are using the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Ftoit-ssd1306@v2\"\n  }, `ssd1306`), `\npackage. To install it, run the following command in your project directory:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, `jag pkg install github.com/toitware/toit-ssd1306@v2\n`)), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `You can probably just write `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg install ssd1306`), `, but the full ID together\nwith the version is more explicit, and will make sure you get the right package.`)), mdx(\"p\", null, `Similarly, install the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Ftoit-pixel-display@v2\"\n  }, `pixel-display package`), `\nto provide convenience methods to draw on the display:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, `jag pkg install toitware/toit-pixel-display@v2\n`)), mdx(\"p\", null, `For information about how to use the display libraries,\nsee the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../../language/sdk/display\"\n  }, `display documentation`), `.`), mdx(\"p\", null, `In this tutorial, we are just going to show a few examples.`), mdx(\"h2\", {\n    \"id\": \"text\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#text\",\n    \"aria-label\": \"text permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Text`), mdx(\"p\", null, `Start a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ssd1306_text.toit`), ` program and watch it with Jaguar.`), mdx(\"p\", null, `Enter the following program:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import font show *\nimport gpio\nimport i2c\nimport pixel-display show *\nimport pixel-display.two-color show *\nimport ssd1306 show *\n\ncurrent-date:\n  now := Time.now.local\n  return \"$now.year-$(%02d now.month)-$(%02d now.day)\"\n\ncurrent-time:\n  now := Time.now.local\n  return \"$(%02d now.h):$(%02d now.m):$(%02d now.s)\"\n\nmain:\n  sda := gpio.Pin 26\n  scl := gpio.Pin 25\n  frequency := 400_000\n\n  bus := i2c.Bus --sda=sda --scl=scl --frequency=frequency\n\n  devices := bus.scan\n  if not devices.contains Ssd1306.I2C-ADDRESS:\n    throw \"No SSD1306 display found\"\n\n  device := bus.device Ssd1306.I2C-ADDRESS\n  driver := Ssd1306.i2c device\n  display := PixelDisplay.two-color driver\n  display.background = BLACK\n\n  sans := Font.get \"sans10\"\n  [\n    Label --x=30 --y=20 --text=\"Toit\",\n    Label --x=30 --y=40 --id=\"date\",\n    Label --x=30 --y=60 --id=\"time\",\n  ].do: display.add it\n\n  STYLE ::= Style\n      --type-map={\n          \"label\": Style --font=sans --color=WHITE,\n      }\n  display.set-styles [STYLE]\n\n  date/Label := display.get-element-by-id \"date\"\n  time/Label := display.get-element-by-id \"time\"\n  while true:\n    date.text = current-date\n    time.text = current-time\n    display.draw\n    sleep --ms=250\n`)), mdx(\"p\", null, `As a first step we create an `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/i2c/library-summary\"\n  }, `i2c`), `\nbus object with:\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `i2c.Bus --sda=sda --scl=scl --frequency=frequency`), `.\nThis calls the constructor of the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://libs.toit.io/i2c/class-Bus\"\n  }, `Bus`), `\nclass, passing in the named arguments.\nThe display supports the \"fast\" mode of i2c which is why we can set the\nfrequency to 400KHz (and not just 100KHz). The code would work the\nsame way with 100KHz.  Usually, 700kHz works too, and makes for slightly\nfaster updates.`), mdx(\"p\", null, `We then instantiate an `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/github.com/toitware/toit-ssd1306@2.0.1/docs/ssd1306/class-Ssd1306\"\n  }, `Ssd1306`), ` object by calling its i2c constructor.\nAs argument it receives the i2c device with ID `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Ssd1306.I2C-ADDRESS`), `.\nThe value of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Ssd1306.I2C-ADDRESS`), ` is equal to 60, thus\nidentifying the display on the bus.`), mdx(\"p\", null, `With the driver object we can then build a\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/github.com/toitware/toit-pixel-display@2.3.0/docs/pixel_display/pixel-display/class-PixelDisplay\"\n  }, `display`), `\nobject which\ngives us some useful methods to operate the display. We can set\nthe background color to BLACK, and then use the WHITE constant\nto write later.`), mdx(\"p\", null, `Writing text is done by adding\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/github.com/toitware/toit-pixel-display@2.3.0/docs/pixel_display/pixel-display/class-Label\"\n  }, `Label`), `\nelements to the display, then styling them with a\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/github.com/toitware/toit-pixel-display@2.3.0/docs/pixel_display/pixel-display/class-Style\"\n  }, `Style`), `\nobject.  The style object sets the font and color for the Label elements.`), mdx(\"p\", null, `Note that operations on the display don't immediately interact\nwith the physical display but build up a drawing queue/graph instead.\nOnly with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `display.draw`), ` is the content constructed and sent to the\nphysical display.`), mdx(\"p\", null, `This has two major advantages. We can reuse the graph and simply\nupdate the parts that change. In our example we have a while-true\nloop that just updates the objects we received from the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `get-element-by-id`), `\ncalls. We could also call `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `move-to`), ` on the object to move it\nsomewhere.`), mdx(\"p\", null, `The program writes 3 lines:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Toit`), `,`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `the date in ISO 8601 format, and`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `the time.`)), mdx(\"h4\", {\n    \"id\": \"time\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#time\",\n    \"aria-label\": \"time permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Time`), mdx(\"p\", null, `By default the device starts with a time set to 1970. You can use the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitlang%2Fpkg-ntp@v1.0.0\"\n  }, `ntp package`), `\nto synchronize the device's time.`), mdx(\"p\", null, `See this `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitlang/pkg-ntp/blob/master/examples/settime.toit\"\n  }, `example`), `.`), mdx(\"h2\", {\n    \"id\": \"icons\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#icons\",\n    \"aria-label\": \"icons permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Icons`), mdx(\"p\", null, `As the name implies, it is possible to draw individual pixels onto a\ndisplay. However, in many cases, icons are completely sufficient.`), mdx(\"p\", null, `Toit provides a package with icons from the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pictogrammers.com/\"\n  }, `Pictogrammers`), `\nproject. To use them, install the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Ftoit-icons-pictogrammers@v1\"\n  }, `pictogrammers_icons`), `:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitware/toit-icons-pictogrammers@v1\n`)), mdx(\"p\", null, `Start a new file and save it as display_icon.toit. Use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag watch`), ` to\nrun it whenever it is saved.`), mdx(\"p\", null, `Enter the following code into the new file:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import pictogrammers-icons.size-48 as icons\nimport gpio\nimport i2c\nimport pixel-display show *\nimport pixel-display.two-color show *\nimport ssd1306 show *\n\nget-display -> PixelDisplay:\n  sda := gpio.Pin 26\n  scl := gpio.Pin 25\n  frequency := 400_000\n\n  bus := i2c.Bus --sda=sda --scl=scl --frequency=frequency\n\n  devices := bus.scan\n  if not devices.contains Ssd1306.I2C-ADDRESS:\n    throw \"No SSD1306 display found\"\n\n  device := bus.device Ssd1306.I2C-ADDRESS\n  driver := Ssd1306.i2c device\n  return PixelDisplay.two-color driver\n\nmain:\n  display := get-display\n  display.background = BLACK\n\n  icon := Label --x=0 --y=50 --icon=icons.HUMAN-SCOOTER --color=WHITE\n  display.add icon\n  while true:\n    80.repeat:\n      icon.move-to it 50\n      display.draw\n      sleep --ms=1\n    sleep --ms=2_000\n`)), mdx(\"p\", null, `The code starts again by creating the display. This time we moved\nthe display-creation code into its own function\n(`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `get-display`), ` which returns a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `PixelDisplay`), `).`), mdx(\"p\", null, `If your display is only a 32-line display you need to add the\nargument `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--height=32`), ` to the driver creation. In some cases\nyou also need to play with the following arguments:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `--flip`), `, to flip the display vertically,`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `--inverse`), `, to invert black and white,`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `--layout=XXX`), ` where `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `XXX`), ` is one of `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `LAYOUT-SEQUENTIAL`), `,\n`, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `LAYOUT-SEQUENTIAL-SWITCHED`), `, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `LAYOUT-ALTERNATED`), `, or\n`, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `LAYOUT-ALTERNATED-SWITCHED`), `.`)), mdx(\"p\", null, `For this simple example, we don't create a style object. We just\npass the color to the constructor of the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Label`), `.`), mdx(\"p\", null, `We then add the icon-label to the display and start a loop. For each iteration, the\nposition is updated before every draw. This makes the icon move\nfrom left to right over the display.`), mdx(\"p\", null, `You can browse the icons at: `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://materialdesignicons.com/\"\n  }, `https://materialdesignicons.com/`), `.`), mdx(\"p\", null, `Often, devices are used for temperature measurements, in which\ncase icons that start with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `icons.WEATHER_`), ` are interesting. Use\nthe completion to see which icons exist.`), mdx(\"h2\", {\n    \"id\": \"exercises\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#exercises\",\n    \"aria-label\": \"exercises permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Exercises`), mdx(\"p\", null, `As long as the connections were done correctly you can't damage your\nhardware by changing your program.`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Change the text.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Fix the device's internal time before showing anything on the display.\nSee the `, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitlang%2Fpkg-ntp@v1\"\n  }, `ntp package`), `\nand the corresponding `, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/toitlang/pkg-ntp/blob/master/examples/settime.toit\"\n  }, `example`), `.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Invert the colors, so that the background is white and the text is black.`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#oled-display","title":"OLED display","items":[{"url":"#prerequisites","title":"Prerequisites"},{"url":"#setup","title":"Setup"},{"url":"#packages","title":"Packages"},{"url":"#text","title":"Text","items":[{"items":[{"url":"#time","title":"Time"}]}]},{"url":"#icons","title":"Icons"},{"url":"#exercises","title":"Exercises"}]}]}}},"pageContext":{"title":"OLED display","id":"1b67ad66-1160-501f-9d29-5ee3cbf43bdf"}},
    "staticQueryHashes": ["2197327828"]}