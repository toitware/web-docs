{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/hardware/leds",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"running-leds\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#running-leds\",\n    \"aria-label\": \"running leds permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Running LEDs`), mdx(\"p\", null, `In this tutorial we will connect multiple LEDs to the ESP32 and control them\nindependently. We will also see how to use a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `List`), ` to simplify the code.`), mdx(\"h2\", {\n    \"id\": \"prerequisites\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Prerequisites`), mdx(\"p\", null, `This tutorial assumes that you know how to control a single LED.\nIf necessary, have a look at the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../led\"\n  }, `single LED tutorial`), ` first.`), mdx(\"h2\", {\n    \"id\": \"setup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#setup\",\n    \"aria-label\": \"setup permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Setup`), mdx(\"p\", null, `Connect 4 LEDs, each with a\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../led#current-limiting-resistor\"\n  }, `current-limiting resistor`), `, to pins 32, 33, 25, and 26.`), mdx(\"p\", null, `As for the single LED case, remember that the long leg of the LED must be on the positive\nside (towards the pins of the ESP32).`), mdx(\"img\", {\n    src: LedsDiagram,\n    alt: \"LEDs diagram\"\n  }), mdx(\"img\", {\n    src: LedsSchematics,\n    alt: \"LEDs schematics\"\n  }), mdx(\"h2\", {\n    \"id\": \"code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#code\",\n    \"aria-label\": \"code permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Code`), mdx(\"p\", null, `We can control each LED by setting the corresponding pin to low or high.`), mdx(\"p\", null, `You can modify the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `led.toit`), ` from the single-LED tutorial and change the pin number.\nThe new LEDs should behave exactly the same as before.\nThe only difference is that they are connected to different pins.`), mdx(\"p\", null, `Let's use all LEDs at the same time. For this, create a new file and save it as\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `running_led.toit`), `.`), mdx(\"p\", null, `You could already start Jaguar to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag watch running_led.toit`), ` so you can\nimmediately see the changes you make to the file.`), mdx(\"p\", null, `Enter the following code into the file.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import gpio\n\nmain:\n  leds := [\n    gpio.Pin 32 --output,\n    gpio.Pin 33 --output,\n    gpio.Pin 25 --output,\n    gpio.Pin 26 --output,\n  ]\n\n  // Turn each LED on for 500ms.\n  leds.do:\n    it.set 1\n    sleep --ms=500\n    it.set 0\n\n  // Shut down each pin.\n  leds.do: it.close\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `leds.do`), ` is a method on `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `List`), ` that takes a `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../../language/blocks-and-lambdas\"\n  }, `block`), `\n(\"code\") as argument and calls it for every element in the list.\nHere there are four elements in the list, and the block is thus called four times.\nEach time the code is executed with it being set to the corresponding element.\nThe first time the block is called, it is thus equal to pin 32.\nThe next time it is equal to pin 33, ...`), mdx(\"p\", null, `This is a good start, but we would like to see the LEDs cycle continuously.\nLet's change the program to continue running through the LEDs in an infinite loop:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import gpio\n\nmain:\n  leds := [\n    gpio.Pin 32 --output,\n    gpio.Pin 33 --output,\n    gpio.Pin 25 --output,\n    gpio.Pin 26 --output,\n  ]\n\n  while true:\n    // Turn each LED on for 200ms.\n    leds.do:\n      it.set 1\n      sleep --ms=200\n      it.set 0\n`)), mdx(\"p\", null, `Note that you could also use an index variable to achieve the same behavior:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import gpio\n\nmain:\n  leds := [\n    gpio.Pin 32 --output,\n    gpio.Pin 33 --output,\n    gpio.Pin 25 --output,\n    gpio.Pin 26 --output,\n  ]\n\n  i := 0\n  while true:\n    // Take the next led and turn it on for 200ms.\n    led := leds[i]\n    led.set 1\n    sleep --ms=200\n    led.set 0\n    // Increment the index, wrapping around when we reach the\n    // end of the list.\n    i = (i + 1) % leds.size\n`)), mdx(\"h2\", {\n    \"id\": \"exercises\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#exercises\",\n    \"aria-label\": \"exercises permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Exercises`), mdx(\"p\", null, `As long as the connections were done correctly you can't damage your hardware\nby changing your program. If you change the connections, make sure that LEDs are\nalways in series with a resistor.`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Change the speed of the cycling.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Instead of turning the cycling LED on, have all LEDs turned on at the start\nand then turn off one LED at a time.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Instead of cycling the LED, let it move from left to right and back.\nA bit like the K.I.T.T lights from the Knight Rider series.`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#running-leds","title":"Running LEDs","items":[{"url":"#prerequisites","title":"Prerequisites"},{"url":"#setup","title":"Setup"},{"url":"#code","title":"Code"},{"url":"#exercises","title":"Exercises"}]}]}}},"pageContext":{"title":"Running LEDs","id":"376c56f0-81fa-566c-9353-da40f54ad247"}},
    "staticQueryHashes": ["2197327828"]}