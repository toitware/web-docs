{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/hardware/binary",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"binary-sensors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#binary-sensors\",\n    \"aria-label\": \"binary sensors permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Binary sensors`), mdx(\"p\", null, `We call \"binary sensors\" that can be in one of two states: on or off.\nMany of the common binary sensors take an analog input and compare\nit to a threshold. If the input is above the threshold, then the sensor\nis or, otherwise it is off (or vice versa).`), mdx(\"p\", null, `A lot of binary sensor modules can be recognized by the blue\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../potentiometer\"\n  }, `potentiometer`), ` on top of them. These sensors allow\nthe user to change the threshold by turning the potentiometer.`), mdx(\"h2\", {\n    \"id\": \"prerequisites\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Prerequisites`), mdx(\"p\", null, `Binary sensors are mostly just \"automated\" buttons. We recommend to\nhave a look at the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../buttons\"\n  }, `Buttons`), ` tutorial before starting this one.`), mdx(\"h2\", {\n    \"id\": \"hardware\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#hardware\",\n    \"aria-label\": \"hardware permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Hardware`), mdx(\"p\", null, `This tutorial works with any sensor that communicates its state using\na single pin that is either on or off.`), mdx(\"p\", null, `We have tested it with the following sensors:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `a vibration sensor`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `a noise sensor`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `an IR distance sensor`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `a light sensor`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `a `, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.olimex.com/Products/Components/Sensors/PIR-SB312/\"\n  }, `PIR motion detector`))), mdx(\"img\", {\n    src: Pir,\n    alt: \"PIR motion detector\"\n  }), mdx(\"h2\", {\n    \"id\": \"setup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#setup\",\n    \"aria-label\": \"setup permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Setup`), mdx(\"p\", null, `Connect the LED and the 330Î© resistor so that they are in series\nbetween pin 26 and GND. See the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../led\"\n  }, `LED`), ` and `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../leds\"\n  }, `LEDs`), ` tutorials\nfor more details.`), mdx(\"p\", null, `Connect the board's 3V3 pin to the sensor's VCC pin, GND to GND and the\nsensor's DO or I/O pin to pin 27.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `LEDs have a direction. The longer leg must point to the pin (the positive side).`)), mdx(\"img\", {\n    src: BinaryDiagram,\n    alt: \"Wiring diagram for a binary sensor\"\n  }), mdx(\"img\", {\n    src: BinarySchematics,\n    alt: \"Schematics for a binary sensor\"\n  }), mdx(\"h2\", {\n    \"id\": \"code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#code\",\n    \"aria-label\": \"code permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Code`), mdx(\"p\", null, `Create a new file `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `binary.toit`), ` and start `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag watch binary.toit`), ` to\nrun the program whenever you save.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import gpio\n\nmain:\n  led := gpio.Pin 5 --output\n  sensor := gpio.Pin 27 --input\n\n  while true:\n    sensor.wait-for 1\n    led.set 1\n    sleep --ms=1000\n    led.set 0\n`)), mdx(\"p\", null, `This program uses the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `wait-for`), ` method on the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Pin`), ` class to wait for\nthe sensor pin to reach the 1 state. If your LED triggers too easily or\nnot often enough, change the threshold by rotating the blue potentiometer.`), mdx(\"h3\", {\n    \"id\": \"vibration-sensor\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#vibration-sensor\",\n    \"aria-label\": \"vibration sensor permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Vibration sensor`), mdx(\"p\", null, `Vibration sensors can be quite difficult to calibrate. We found it easiest\nto turn the potentiometer to the left until the D0 LED turns off. Then turn\nthe sensitivity up again, until the LED turns on again. Check by clapping\nthe module alternating on both sides (which worked significantly better\nthan just one side).`), mdx(\"p\", null, `The sensor (SW-420) uses a spring inside the cylinder. So make sure to give\nit time to stabilize before attempting a new calibration.`), mdx(\"img\", {\n    src: Vibration,\n    alt: \"Vibration sensor\"\n  }), mdx(\"h3\", {\n    \"id\": \"ir-distance-sensor\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#ir-distance-sensor\",\n    \"aria-label\": \"ir distance sensor permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `IR distance sensor`), mdx(\"p\", null, `Many infrared sensors don't work in sunlight. Make sure to be in an\nenvironment where there isn't too much ambient infrared light.`), mdx(\"h2\", {\n    \"id\": \"exercises\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#exercises\",\n    \"aria-label\": \"exercises permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Exercises`), mdx(\"p\", null, `Without analyzing the sensor we have to assume that the OUT/DO pin may\nprovide more current than the ESP32 can handle. If the sensor's OUT/DO pin\nis connected to an ESP32 pin that is configured as output, then the sensor\nor the ESP32 could get damaged. Always make sure that the sensor's OUT/DO\npin is connected to an ESP32 pin that is configured as input.`), mdx(\"p\", null, `For additional safety one could add a 330Î© resistor between the sensor's\nOUT/DO pin and the ESP32.`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Using a noise sensor, turn on the LED when the noise sensor detects a\nclap. Turn it off again with the next clap.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Using a noise senso, let the LED blink when the noise sensor detects\na clap. Turn the blinking off again with the next clap. This exercise\nrequires the blinking code to run in parallel with the noise-detection\n(`, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `sensor.wait-for`), `) code. You probably want to use Toit's\n`, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"../..language/tasks\"\n  }, `tasks`), ` for this.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Take a light sensor and configure the sensitivity so that the sensor\ndetects when a cupboard is opened. If you have a battery pack, put the\nsensor into the cupboard and detect when someone opens it.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Do the same for the distance sensor.`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#binary-sensors","title":"Binary sensors","items":[{"url":"#prerequisites","title":"Prerequisites"},{"url":"#hardware","title":"Hardware"},{"url":"#setup","title":"Setup"},{"url":"#code","title":"Code","items":[{"url":"#vibration-sensor","title":"Vibration sensor"},{"url":"#ir-distance-sensor","title":"IR distance sensor"}]},{"url":"#exercises","title":"Exercises"}]}]}}},"pageContext":{"title":"Binary sensors","id":"036e3936-e3f8-5f30-823b-129dd3c1ba52"}},
    "staticQueryHashes": ["2197327828"]}