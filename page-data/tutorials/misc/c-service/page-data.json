{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/misc/c-service",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"communicating-with-c-code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#communicating-with-c-code\",\n    \"aria-label\": \"communicating with c code permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Communicating with C code`), mdx(\"p\", null, `In this tutorial we will learn how to communicate with C code from a Toit program.\nWe are going to add Espressif's\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://components.espressif.com/components/espressif/qrcode\"\n  }, `qrcode`), `\ncomponent as a C service that Toit code can then use.`), mdx(\"p\", null, `See `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitware/demo-custom-envelope\"\n  }, `the demo repository`), ` for\nthe complete code.`), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Introduction`), mdx(\"p\", null, `Toit is a powerful language that can be used to write most programs. However, there\nare times when you need to use C code. This can be because you have a library that\nonly exists in C, or because you need to do compute-intensive tasks that are better\nsuited for C.`), mdx(\"p\", null, `The Toit framework provides a way to call C code from Toit. This is done by creating\na C service that is built into the native firmware. Communication between\nthe Toit program and the C service is done using a simple protocol that allows to\nsend byte arrays back and forth.`), mdx(\"h2\", {\n    \"id\": \"prerequisites\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Prerequisites`), mdx(\"p\", null, `C services need to be compiled into the native firmware. As such, we need to\nbuild a custom envelope. Make sure to have finished the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../custom-envelope\"\n  }, `custom envelope tutorial`), ` before continuing.`), mdx(\"h2\", {\n    \"id\": \"the-c-service\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#the-c-service\",\n    \"aria-label\": \"the c service permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `The C service`), mdx(\"p\", null, `The `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitlang/template-custom-envelope\"\n  }, `template repository`), `\nalready contains a C service that serves as a good starting point. If you\ncompile the custom envelope with the service present, any Toit program\ncan connect to it, and use it.`), mdx(\"p\", null, `We are not going to discuss the C code of the echo service in this tutorial, but\nfeel free to look at it in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `components/echo`), ` directory of the template repository.\nIt is well documented and should be easy to understand.`), mdx(\"p\", null, `Here is the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `echo.toit`), ` program that is located in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `components/echo`), ` directory:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import system.external\n\nFUNCTION-ID ::= 0\n\nmain:\n  echo := external.Client.open \"toitlang.org/demo-echo\"\n  echo.set-on-notify:: print \"Got message: $it.to-string\"\n  echo.notify \"Hello, world!\"\n  response := echo.request FUNCTION-ID #[1, 2, 3]\n  print \"Got response: $response\"\n  echo.close\n`)), mdx(\"p\", null, `The program connects to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `echo`), ` service using the \"toitlang.org/demo-echo\" ID that\nthe service used to register itself. It then registers a notification callback that\nprints any notification message it receives.`), mdx(\"p\", null, `The program sends two messages: one as a notification, where it doesn't\nnecessarily expect a response, and one as a request.`), mdx(\"p\", null, `As the name suggests, the echo service is programmed to send back the messages it\nreceives. If it is a notification, it sends back the message as a notification,\nand if it is a request, it sends back the message as a response.`), mdx(\"p\", null, `Let's give it a try:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Build the custom envelope with the echo service.`, mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `make # Builds the build/esp32/firmware.envelope\ncp build/esp32/firmware.envelope my-envelope.envelope\n`))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Build the echo Toit program and add it to the snapshot. The `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `toit`), ` executable can be found in `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `build/host/sdk/bin`), `.`, mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `toit compile --snapshot -o echo.snapshot components/echo/echo.toit\ntoit tool firmware -e my-envelope.envelope container install echo echo.snapshot\n`))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Flash the envelope to your device.`, mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `toit tool firmware -e my-envelope.envelope flash --port /dev/ttyUSB0\n`)))), mdx(\"p\", null, `When the device starts you should see the following output:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `Got message: Hello, world!\nGot response: #[0x01, 0x02, 0x03]\n`)), mdx(\"p\", null, `As you can see, the Toit program successfully communicated with the C service.`), mdx(\"h2\", {\n    \"id\": \"qrcode-service\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#qrcode-service\",\n    \"aria-label\": \"qrcode service permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Qrcode service`), mdx(\"p\", null, `An echo service is nice, but not very useful. Let's create a more useful service\nthat generates QR codes. As of 2024-05-15 there doesn't exist a QR-code library\nthat is written in Toit, so we will use\nEspressif's `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://components.espressif.com/components/espressif/qrcode\"\n  }, `qrcode`), `\ncomponent that is written in C.`), mdx(\"h3\", {\n    \"id\": \"toit-qrcode-service\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#toit-qrcode-service\",\n    \"aria-label\": \"toit qrcode service permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Toit qrcode service`), mdx(\"p\", null, `Create a new `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `toit-qrcode`), ` directory next to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `echo`), ` directory in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `components`), ` folder.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `The ESP-IDF build system does not allow multiple components to have the same name. If you\nare just exposing an existing component, it is thus a good idea to prefix the component\nname with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `toit-`), ` to avoid conflicts. This also makes it clear that the component is\nspecifically for Toit.`)), mdx(\"p\", null, `Add the following `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CMakeLists.txt`), ` file to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `toit-qrcode`), ` directory:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmake\"\n  }, `idf_component_register(\n  REQUIRES toit\n  SRCS qrcode.c\n  WHOLE_ARCHIVE\n)\n`)), mdx(\"p\", null, `Then add the following `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `qrcode.c`), ` file to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `toit-qrcode`), ` directory:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, `#include <toit/toit.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n\nstatic toit_err_t on_rpc_request(void* user_data, int sender, int function, toit_msg_request_handle_t handle, uint8_t* data, int length) {\n  // TODO: Implement the RPC handler.\n  toit_msg_request_fail(handle, \"Not implemented\");\n  return TOIT_ERR_SUCCESS;\n}\n\nstatic void __attribute__((constructor)) init() {\n  toit_msg_cbs_t cbs = TOIT_MSG_EMPTY_CBS();\n  cbs.on_rpc_request = on_rpc_request;\n  toit_msg_add_handler(\"toitlang.org/tutorial-qrcode\", NULL, cbs);\n}\n`)), mdx(\"p\", null, `This is enough to create a new service that can be called from Toit.`), mdx(\"p\", null, `Here is a Toit program that uses the qrcode service. Let's add a qrcode.toit file:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import system.external\n\nFUNCTION-ID ::= 0\n\nmain:\n  qrcode := external.Client.open \"toitlang.org/tutorial-qrcode\"\n  response := qrcode.request FUNCTION-ID \"https://toitlang.org\".to-byte-array\n  print \"Got response: $response\"\n  qrcode.close\n`)), mdx(\"p\", null, `After building the custom envelope we can already start using it:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `make\ncp build/esp32/firmware.envelope my-envelope.envelope\ntoit compile --snapshot -o qrcode.snapshot components/toit-qrcode/qrcode.toit\ntoit tool firmware -e my-envelope.envelope container install qrcode qrcode.snapshot\ntoit tool firmware -e my-envelope.envelope flash --port /dev/ttyUSB0\n`)), mdx(\"p\", null, `When the device starts you should see an exception with:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `EXCEPTION error.\nNot implemented\n`)), mdx(\"p\", null, `That's the error string that the service sent back using the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `toit_msg_request_fail`), ` function.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `You are likely to see a \"No such file...\" followed with a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag decode`), ` instruction. Don't\nworry about that. Jaguar just couldn't find the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `qrcode.snapshot`), ` that\nwe just created. You could copy the snapshot to the specificed location to make\nJaguar happy and get a nice stacktrace.`)), mdx(\"h3\", {\n    \"id\": \"adding-the-qrcode-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#adding-the-qrcode-library\",\n    \"aria-label\": \"adding the qrcode library permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Adding the qrcode library`), mdx(\"p\", null, `We are using Espressif's qrcode component which can be added to our project by adding\nthe following `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `idf_component.yml`), ` file to your qrcode folder:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, `dependencies:\n  espressif/qrcode: \"^0.1.0~2\"\n  idf:\n    version: \">=4.1.0\"\n`)), mdx(\"p\", null, `If you have the ESP-IDF environment set up, you can also use the command that is\ngiven on the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://components.espressif.com/components/espressif/qrcode\"\n  }, `component page`), `.`), mdx(\"h3\", {\n    \"id\": \"implementing-the-qrcode-service\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#implementing-the-qrcode-service\",\n    \"aria-label\": \"implementing the qrcode service permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Implementing the qrcode service`), mdx(\"p\", null, `Now that the C library is added, we can implement the actual qrcode functionality.`), mdx(\"p\", null, `The qrcode API is described in the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/espressif/idf-extra-components/blob/5d01f78b7888cbbd874550ecf37152d5ec41ab50/qrcode/include/qrcode.h\"\n  }, `qrcode.h`), `\nfile. As described there, We just need to include `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `qrcode.h`), `, and then call\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `esp_qrcode_generate`), ` to generate the QR code. A few additional steps are then needed\nto convert the QR code to a byte array that can be sent back to the Toit program.`), mdx(\"p\", null, `Here is the updated `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `qrcode.c`), ` file:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, `#include <toit/toit.h>\n#include <qrcode.h>\n#include <esp_log.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <string.h>\n\ntoit_msg_request_handle_t current_handle;\n\nstatic void reply(void* data, int data_size) {\n  toit_err_t err = toit_msg_request_reply(current_handle, data, data_size, true);\n  if (err != TOIT_OK) {\n    ESP_LOGE(\"toit-qrcode\", \"Failed to send QR code: %d\", err);\n  }\n}\n\nstatic void fail(const char* message) {\n  toit_err_t err = toit_msg_request_fail(current_handle, message);\n  if (err != TOIT_OK) {\n    ESP_LOGE(\"toit-qrcode\", \"Failed to send exception '%s': %d\", message, err);\n  }\n}\n\nstatic void on_qrcode_generated(esp_qrcode_handle_t qrcode) {\n  int size = esp_qrcode_get_size(qrcode);\n  // 1 byte to store the size of the QR code.\n  // Then ceil(size * size / 8) bytes to store the data.\n  int data_size = 1 + (size * size + 7) / 8;\n  uint8_t* data = toit_calloc(1, data_size);\n  if (data == NULL) {\n    fail(\"Failed to allocate memory for QR code\");\n    return;\n  }\n  data[0] = size;\n  int bit_index = 8;\n  for (int x = 0; x < size; x++) {\n    for (int y = 0; y < size; y++) {\n      if (esp_qrcode_get_module(qrcode, x, y)) {\n        data[bit_index >> 3] |= 1 << (bit_index & 0x7);\n      }\n      bit_index++;\n    }\n  }\n  reply(data, data_size);\n}\n\nstatic toit_err_t on_rpc_request(void* user_data, int sender, int function, toit_msg_request_handle_t handle, uint8_t* data, int length) {\n  current_handle = handle;\n  if (data[length] != '\\\\0') {\n    fail(\"Invalid request\");\n    return TOIT_OK;\n  }\n  esp_qrcode_config_t config = {\n    .display_func = on_qrcode_generated,\n    .max_qrcode_version = 10,\n    .qrcode_ecc_level = ESP_QRCODE_ECC_LOW,\n  };\n  esp_err_t err = esp_qrcode_generate(&config, (const char*)data);\n  if (err == ESP_ERR_NO_MEM) {\n    toit_gc();\n    err = esp_qrcode_generate(&config, (const char*)data);\n  }\n  if (err != ESP_OK) fail(\"Failed to generate QR code\");\n  return TOIT_OK;\n}\n\nstatic void __attribute__((constructor)) init() {\n  toit_msg_cbs_t cbs = TOIT_MSG_EMPTY_CBS();\n  cbs.on_rpc_request = on_rpc_request;\n  toit_msg_add_handler(\"toitlang.org/tutorial-qrcode\", NULL, cbs);\n}\n`)), mdx(\"p\", null, `As documented by the qrcode library, the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on_qrcode_generated`), ` callback (set in\nthe `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `config`), ` parameter to the generate function) is called when the QR code is ready.\nIt contains a qrcode handle that can be used to get the size of the QR code and\nthe individual modules (black or white) of the QR code. The rest of the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on_qrcode_generated`), ` function is just converting the QR code to a byte array.\nand then sending that byte array back to the Toit program, using the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `toit_msg_request_reply`), ` function.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on_rpc_request`), ` function is called when the Toit program sends a request to\nthe service. It then calls the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `esp_qrcode_generate`), ` function to generate the QR code.\nAs parameter to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `esp_qrcode_generate`), ` function we pass a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `config`), ` struct that\ncontains the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on_qrcode_generated`), ` callback. Unfortunately, the config struct does\nnot have a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `void*`), ` user data field, so we need to use a global variable to store\nthe current request handle.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `The config struct is hard-coded to use a max-qrcode version of 10 and a low error\ncorrection level. One could, for example, use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `function`), ` parameter to the RPC\nhandler to pass on of these values (or both) to the service.`)), mdx(\"h3\", {\n    \"id\": \"using-the-qrcode-service\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-the-qrcode-service\",\n    \"aria-label\": \"using the qrcode service permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Using the qrcode service`), mdx(\"p\", null, `Now that the service is implemented, we can use it from a Toit program. Here is\nthe updated `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `qrcode.toit`), ` program:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import system.external\n\nFUNCTION-ID ::= 0\n\nmain:\n  qrcode := external.Client.open \"toitlang.org/tutorial-qrcode\"\n  response := qrcode.request FUNCTION-ID \"https://toitlang.org\"\n  size := response[0]\n  bit-pos := 8\n  size.repeat: | x |\n    line := \"\"\n    size.repeat: | y |\n      byte := response[bit-pos >> 3]\n      bit := byte & (1 << (bit-pos & 7))\n      line += bit == 0 ? \"  \" : \"██\"\n      bit-pos++\n    print line\n  qrcode.close\n`)), mdx(\"p\", null, `This program sends a request to the qrcode service with the URL \"`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://toitlang.org%22\"\n  }, `https://toitlang.org\"`), `. Note\nthat we don't need to add a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `0`), ` byte at the end of the byte array. The messaging service\nguarantees that strings are 0-terminated when they arrive at the receiver.`), mdx(\"p\", null, `The service then responds with a byte array that contains the size of the QR code in the\nfirst byte, and then the QR code itself. The code then undoes the encoding that the C\ncode did, and prints the QR code to the console.`), mdx(\"p\", null, `Here is the output of the program:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `██████████████    ████      ██  ██  ██████████████\n██          ██  ████████      ██    ██          ██\n██  ██████  ██  ████    ██████      ██  ██████  ██\n██  ██████  ██    ████████████      ██  ██████  ██\n██  ██████  ██  ██  ██████  ██████  ██  ██████  ██\n██          ██    ██      ██████    ██          ██\n██████████████  ██  ██  ██  ██  ██  ██████████████\n                ██        ██  ████\n██████████  ████      ██  ██████  ████  ██  ████\n        ████    ██████  ██  ████    ██    ██  ████\n████████  ████    ██████████████    ████████  ████\n██      ████  ██    ████████      ██    ██  ██  ██\n    ██  ████████████      ██    ██\n██            ██████████  ████      ██████  ██████\n████  ██    ██        ████  ██  ████      ██    ██\n██████  ████            ██    ██  ████    ████████\n        ████████████████████    ██████████    ████\n                  ████  ████    ██      ██  ██\n██████████████  ████  ██████    ██  ██  ██      ██\n██          ██          ██  ██  ██      ████    ██\n██  ██████  ██  ██  ██        ██████████████████\n██  ██████  ██  ██      ████    ████████████  ██\n██  ██████  ██  ██  ██      ██            ██\n██          ██  ██  ██████  ████  ████████    ████\n██████████████  ██████  ██████    ████  ██  ██  ██\n`)), mdx(\"h2\", {\n    \"id\": \"conclusion\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Conclusion`), mdx(\"p\", null, `In this tutorial we learned how to communicate with C code from a Toit program.\nWe looked at the simple echo service that just sends back the message it receives,\nand then we created a more complex qrcode service that generates QR codes.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#communicating-with-c-code","title":"Communicating with C code","items":[{"url":"#introduction","title":"Introduction"},{"url":"#prerequisites","title":"Prerequisites"},{"url":"#the-c-service","title":"The C service"},{"url":"#qrcode-service","title":"Qrcode service","items":[{"url":"#toit-qrcode-service","title":"Toit qrcode service"},{"url":"#adding-the-qrcode-library","title":"Adding the qrcode library"},{"url":"#implementing-the-qrcode-service","title":"Implementing the qrcode service"},{"url":"#using-the-qrcode-service","title":"Using the qrcode service"}]},{"url":"#conclusion","title":"Conclusion"}]}]}}},"pageContext":{"title":"Communicating with C code","id":"a26245eb-3a2b-5eb0-b33a-f79f7d4fc3e8"}},
    "staticQueryHashes": ["2197327828"]}