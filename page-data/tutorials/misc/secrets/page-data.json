{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/misc/secrets",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"secrets\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#secrets\",\n    \"aria-label\": \"secrets permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Secrets`), mdx(\"p\", null, `In this tutorial you will learn how to use secrets in Toit projects.`), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Introduction`), mdx(\"p\", null, `Many online services require a secret to be able to access them. For\nexample, a database might require a password, or a service might require\nan API key. For open-source projects (and often for closed-source ones\ntoo) these secrets should not be stored in the source code.`), mdx(\"p\", null, `In the remainder of this tutorial we will show a simple way of storing\nsecrets in Toit projects without ending up storing them in the\nversion control system.`), mdx(\"h2\", {\n    \"id\": \"prerequisites\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Prerequisites`), mdx(\"p\", null, `We assume that you have set up your development environment as described\nin `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/ide\"\n  }, `the IDE tutorial`), `.`), mdx(\"p\", null, `We also assume that you are familiar with running Toit programs.\nIf not, have a look at the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/firstprogram\"\n  }, `Hello world`), ` tutorial.`), mdx(\"p\", null, `Note that you can do this tutorial without a device. In that case,\nyou need to use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `-d host`), ` option whenever you invoke\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag run`), `. The program will then run on your computer instead of on\na device.`), mdx(\"h2\", {\n    \"id\": \"the-project\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#the-project\",\n    \"aria-label\": \"the project permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `The project`), mdx(\"p\", null, `We will assume an API key \"123456\" that we want to use in our program.`), mdx(\"p\", null, `A simple program `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client.toit`), ` that uses this API key could look like this:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `API-KEY ::= \"123456\"\n\nmain:\n  print \"Using the API-KEY now: $API-KEY\"\n`)), mdx(\"p\", null, `To simplify things we simply \"use\" the API key by printing it.`), mdx(\"h3\", {\n    \"id\": \"storing-the-secret-for-devices\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#storing-the-secret-for-devices\",\n    \"aria-label\": \"storing the secret for devices permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Storing the secret for devices`), mdx(\"p\", null, `A common way of passing secrets to programs is to use environment. However,\nwhen flashing a program to a device, the environment is not available.`), mdx(\"p\", null, `Instead, we can store the secret in a separate file that isn't checked in.`), mdx(\"h4\", {\n    \"id\": \"a-secrets-file\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#a-secrets-file\",\n    \"aria-label\": \"a secrets file permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `A secrets file`), mdx(\"p\", null, `The most straight-forward way of storing the secret is to create a file\ncalled `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `secrets.toit`), ` with the following content:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `API-KEY ::= \"123456\"\n`)), mdx(\"p\", null, `The original `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client.toit`), ` program can then be changed to the following:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import .secrets\n\nmain:\n  secret-api-key := API-KEY  // Imported from secrets.\n  print \"Using the API-KEY now: $secret-api-key\"\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `secrets.toit`), ` file should not be checked into version control.`), mdx(\"p\", null, `One problem with this approach is that there isn't a good way to\ndistinguish between secrets for different environments. For example,\nif we have a development environment and a production environment,\nwe might want to use different secrets in the two environments.`), mdx(\"p\", null, `The next section shows a way to solve this problem.`), mdx(\"h3\", {\n    \"id\": \"using-a-separate-entry-file\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-a-separate-entry-file\",\n    \"aria-label\": \"using a separate entry file permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Using a separate entry file`), mdx(\"p\", null, `Whereas the previous approach imported the secrets file directly, we\ncan instead create a separate entry file that passes the secret to\nthe main program.`), mdx(\"p\", null, `Change the original program to the following:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `main api-key:\n  print \"Using the API-KEY now: $api-key\"\n`)), mdx(\"p\", null, `Then create a file called `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client-production.toit`), ` with the following content:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import .client as client\n\nAPI-KEY ::= \"123456\"\n\nmain:\n  client.main API-KEY\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `main`), ` function in `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client-production.toit`), ` simply calls the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `main`), ` function\nin `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client.toit`), ` with the API key as an argument. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client-production.toit`), ` file\nshould not be checked into version control.`), mdx(\"p\", null, `This approach makes it easy to have different secrets for different\nenvironments. For example, we can create a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client-dev.toit`), ` file with\ndifferent secrets for the development environment.`), mdx(\"p\", null, `Since there is now more boilerplate code, we should create a template\nfor the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client-X.toit`), ` files. For example, a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client-template.toit`), ` file\ncould look like this:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import .client as client\n\nAPI-KEY ::= \"<API-KEY>\"\n\nmain:\n  client.main API-KEY\n`)), mdx(\"p\", null, `Whenever we want to create a new `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client-X.toit`), ` file, we can simply\ncopy the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client-template.toit`), ` file and replace `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<API-KEY>`), ` with the\nactual API key.`), mdx(\"p\", null, `At this point, we should add the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client-template.toit`), ` file to version\ncontrol, and then ignore the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client-X.toit`), ` files. This can\nbe done by adding the following line to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `.gitignore`), ` file:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `client-*.toit\n`)), mdx(\"h3\", {\n    \"id\": \"using-the-environment\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-the-environment\",\n    \"aria-label\": \"using the environment permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Using the environment`), mdx(\"p\", null, `When running a program on the desktop, we can use the environment to\npass secrets to the program. In that case we need the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `host`), ` package. Install it by running the following command:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, `jag pkg install host@v1\n`)), mdx(\"p\", null, `See the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/packages\"\n  }, `package tutorial`), ` for more information.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `host`), ` package provides the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `os`), ` library which gives access to\nthe environment.`), mdx(\"p\", null, `We can add a few more lines to the original `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client.toit`), ` program to\nuse the environment:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import host.os\n\nmain:\n  api-key := os.env.get \"API_KEY\"\n  if not api-key or api-key == \"\":\n    print \"Please set the API_KEY environment variable.\"\n    return\n\n  main api-key\n\nmain api-key:\n  print \"Using the API-KEY now: $api-key\"\n`)), mdx(\"p\", null, `Since we still have a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `main`), ` function that takes an `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `api-key`), ` argument,\nwe can still use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client-production.toit`), ` file to run the program\non a device. However, we can now also run the program on the desktop\nby setting the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `API_KEY`), ` environment variable.`), mdx(\"h2\", {\n    \"id\": \"conclusion\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Conclusion`), mdx(\"p\", null, `In this tutorial we have seen how to use secrets in Toit projects.\nWe have seen how to store secrets in a separate file, and how to use\nthe environment to pass secrets to programs.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#secrets","title":"Secrets","items":[{"url":"#introduction","title":"Introduction"},{"url":"#prerequisites","title":"Prerequisites"},{"url":"#the-project","title":"The project","items":[{"url":"#storing-the-secret-for-devices","title":"Storing the secret for devices","items":[{"url":"#a-secrets-file","title":"A secrets file"}]},{"url":"#using-a-separate-entry-file","title":"Using a separate entry file"},{"url":"#using-the-environment","title":"Using the environment"}]},{"url":"#conclusion","title":"Conclusion"}]}]}}},"pageContext":{"title":"Secrets","id":"39adcf3f-b39b-5563-9436-9a61c7d07d5d"}},
    "staticQueryHashes": ["2197327828"]}