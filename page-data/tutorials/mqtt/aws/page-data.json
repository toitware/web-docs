{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/mqtt/aws",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"mqtt-with-aws-iot-core\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#mqtt-with-aws-iot-core\",\n    \"aria-label\": \"mqtt with aws iot core permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `MQTT with AWS IoT Core`), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws.amazon.com/iot-core/\"\n  }, `AWS IoT Core`), ` is a managed MQTT\nbroker. It is designed for large scale IoT deployments and supports\nmany advanced features.`), mdx(\"h2\", {\n    \"id\": \"prerequisites\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Prerequisites`), mdx(\"p\", null, `We assume that you have set up your development environment as described\nin `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/ide\"\n  }, `the IDE tutorial`), `.`), mdx(\"p\", null, `We also assume that you have flashed your device with Jaguar and that\nyou are familiar with running Toit programs on it.\nIf not, have a look at the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/firstprogram\"\n  }, `Hello world`), ` tutorial.`), mdx(\"p\", null, `While not necessary, we recommend to do the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"..\"\n  }, `MQTT tutorial`), ` first.`), mdx(\"p\", null, `Note that you can do this tutorial without a device. In that case,\nyou need to use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `-d host`), ` option whenever you invoke\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag run`), `. The program will then run on your computer instead of on\na device.`), mdx(\"h2\", {\n    \"id\": \"packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#packages\",\n    \"aria-label\": \"packages permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Packages`), mdx(\"p\", null, `The MQTT functionality is not part of the core libraries and must be\nimported as a package. See the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/packages\"\n  }, `packages`), `\ntutorial for details.`), mdx(\"p\", null, `We are using the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Fmqtt@v2\"\n  }, `mqtt`), `\npackage. To install it, run the following command:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitware/mqtt@v2\n`)), mdx(\"p\", null, `When connecting to TLS secured services we will also use the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Ftoit-cert-roots@v1\"\n  }, `certificate-roots`), `\npackage:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitware/toit-cert-roots@v1\n`)), mdx(\"h2\", {\n    \"id\": \"aws-iot-core\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#aws-iot-core\",\n    \"aria-label\": \"aws iot core permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `AWS IoT Core`), mdx(\"p\", null, `Amazon has several tutorials on how to get started with their service. For example,\nsee the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/iot/latest/developerguide/iot-gs.html\"\n  }, `Getting started guide`), `.`), mdx(\"p\", null, `We will not repeat all the steps here, but only give a brief overview.`), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Create an AWS account, and sign in.`), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Search for the IoT Core service.`), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `On the left click on \"Connect one device\".`)), mdx(\"p\", null, `This will start a wizard that will guide you through the process of\ncreating a device and a certificate.`), mdx(\"p\", null, `As instructed, make sure that you can ping your AWS broker. The URL\nis shown in the wizard. It should be something like\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<your_id>.iot.<your_region>.amazonaws.com`), `. Remember this URL,\nwe will need it later.`), mdx(\"p\", null, `Select \"Create a new thing\" and give it a name.`), mdx(\"p\", null, `The next screen asks you for the platform operating system and Device SDK.\nWe are not using any of the SDKs, so you can keep the default settings.`), mdx(\"p\", null, `Download the connection kit on the next page. This zip file contains the\ncertificate and private key for your device. Unzip it and save the\nfollowing files into your project directory:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `<name>.cert.pem`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `<name>.private.key`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `<name>-Policy`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `<name>-public.key`))), mdx(\"p\", null, `Strictly speaking, we only need the certificate and private key, but\nthese files aren't big, and for completeness sake we also save the\npolicy and public key.`), mdx(\"h2\", {\n    \"id\": \"code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#code\",\n    \"aria-label\": \"code permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Code`), mdx(\"p\", null, `AWS IoT Core uses TLS with client certificates to authenticate\ndevices. This requires a few more steps than usual to establish a connection.`), mdx(\"p\", null, `Create a new file `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `aws.toit`), ` in your project directory, and watch it\nwith Jaguar.`), mdx(\"p\", null, `Add the following code to the file:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import certificate-roots\nimport mqtt\nimport net.x509\nimport tls\n\nHOST ::= \"<YOUR AMAZON HOST>\"\nPORT ::= 8883\n\nCLIENT-ID ::= \"sdk-nodejs-toit\"\nTOPIC ::= \"sdk/test/js\"\n\nCLIENT-CERTIFICATE-DER ::= \"\"\"\n-----BEGIN CERTIFICATE-----\n<YOUR CERTIFICATE>\n-----END CERTIFICATE-----\n\"\"\"\n\nCLIENT-KEY-DER ::= \"\"\"\n-----BEGIN RSA PRIVATE KEY-----\n<YOUR KEY>\n-----END RSA PRIVATE KEY-----\n\"\"\"\n`)), mdx(\"p\", null, `Here the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `HOST`), ` is the URL of your AWS broker. If you forgot it, you\ncan find it in the \"Settings\" tab of the IoT Core console.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CLIENT-ID`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `TOPIC`), ` are `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `not`), ` arbitrary strings. They must\ncomply with the policy restrictions for this device. These can\nbe found in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<name>-Policy`), ` file you downloaded earlier. If\nyou used the \"Connect\" wizard, it should, for example, have\nthe following restrictions for the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\"iot:Connect\"`), ` action:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `        \"arn:aws:iot:eu-west-1:915358716417:client/sdk-java\",\n        \"arn:aws:iot:eu-west-1:915358716417:client/basicPubSub\",\n        \"arn:aws:iot:eu-west-1:915358716417:client/sdk-nodejs-*\"\n`)), mdx(\"p\", null, `The client ID, thus must be either `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `sdk-java`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `basicPubSub`), `, or\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `sdk-nodejs-*`), `, where `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `*`), ` is a wildcard. The chosen\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `sdk-nodejs-toit`), ` is thus a valid client ID.`), mdx(\"p\", null, `Any other client ID will be rejected by the broker, and the connection\nwill be cut (leading to an infinite \"Attempting to (re)connect\" loop).`), mdx(\"p\", null, `Similarly, publishing to a topic that is not allowed by the policy\nwill also lead to a disconnect.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CLIENT-CERTIFICATE-DER`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CLIENT-KEY-DER`), ` are the certificate\nand private key that you downloaded earlier. You can copy and paste\nthem into the file.`), mdx(\"h3\", {\n    \"id\": \"creating-the-client-certificate\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#creating-the-client-certificate\",\n    \"aria-label\": \"creating the client certificate permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Creating the client certificate`), mdx(\"p\", null, `As mentioned above, AWS IoT Core uses TLS with client certificates\nto authenticate devices. Add the following function that creates\nthe client certificate:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `create-aws-certificate -> tls.Certificate:\n  parsed := x509.Certificate.parse CLIENT-CERTIFICATE-DER\n  return tls.Certificate parsed CLIENT-KEY-DER\n`)), mdx(\"h3\", {\n    \"id\": \"connecting-to-the-broker\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#connecting-to-the-broker\",\n    \"aria-label\": \"connecting to the broker permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Connecting to the broker`), mdx(\"p\", null, `We can now connect to the broker. Add the following code to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `main`), ` function:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `main:\n  certificate-roots.install-common-trusted-roots\n  client := mqtt.Client.tls\n      --host=HOST\n      --certificate=create-aws-certificate\n  options := mqtt.SessionOptions --client-id=CLIENT-ID\n  client.start --options=options\n  client.publish TOPIC \"hello\"\n  client.close\n`)), mdx(\"p\", null, `If you still have the AWS IoT Core console open, you should see the\nmessage appear in the wizard.`), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `It is not good practice to hard-code credentials in your program.\nSee the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../misc/secrets\"\n  }, `secrets`), ` tutorial for details on how to\nhandle secrets in Toit projects.`)), mdx(\"h2\", {\n    \"id\": \"troubleshooting\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#troubleshooting\",\n    \"aria-label\": \"troubleshooting permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Troubleshooting`), mdx(\"p\", null, `Amazon AWS disconnects client that don't satisfy the policy restrictions. Unfortunately,\nit does not provide any reasons for the disconnect in this case.`), mdx(\"p\", null, `If you are seeing a message like `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Closing because of invalid packet kind: 0`), `, then\nthe connection was likely rejected by the broker.`), mdx(\"p\", null, `In that case make sure that:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `The client ID is correct, and accepted by the policy.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `The certificate and private key are correct.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `The topic is accepted by the policy. Topics typically start without a leading \"/\". If\nyou have seen a debug log stating that the \"Connection `, `[was]`, ` established\", immediately\nfollowed by a disconnect/reconnect, then a bad topic could be the problem.`)), mdx(\"p\", null, `Also remember that you can run Toit programs on your desktop machine. Sometimes\nthis is easier for debugging.`), mdx(\"h2\", {\n    \"id\": \"summary\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#summary\",\n    \"aria-label\": \"summary permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Summary`), mdx(\"p\", null, `In this tutorial we have seen how to connect to AWS IoT Core using\nTLS with client certificates. We have also seen how to use the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `mqtt`), ` package to publish a message to a topic.`), mdx(\"p\", null, `AWS IoT Core supports many more features, such as device shadows,\nrules, and jobs. See the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/iot/latest/developerguide/what-is-aws-iot.html\"\n  }, `AWS IoT Core documentation`), `\nfor more details.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#mqtt-with-aws-iot-core","title":"MQTT with AWS IoT Core","items":[{"url":"#prerequisites","title":"Prerequisites"},{"url":"#packages","title":"Packages"},{"url":"#aws-iot-core","title":"AWS IoT Core"},{"url":"#code","title":"Code","items":[{"url":"#creating-the-client-certificate","title":"Creating the client certificate"},{"url":"#connecting-to-the-broker","title":"Connecting to the broker"}]},{"url":"#troubleshooting","title":"Troubleshooting"},{"url":"#summary","title":"Summary"}]}]}}},"pageContext":{"title":"MQTT with AWS IoT Core","id":"d046d1d8-2e52-5191-9c50-4e21811045f0"}},
    "staticQueryHashes": ["2197327828"]}