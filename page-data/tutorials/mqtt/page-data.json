{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/mqtt",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"mqtt\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#mqtt\",\n    \"aria-label\": \"mqtt permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `MQTT`), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://mqtt.org/\"\n  }, `MQTT`), ` is an IoT friendly messaging protocol for publishing and\nsubscribing to a shared MQTT broker from a wide range of devices.`), mdx(\"p\", null, `This tutorial shows you how to connect to an MQTT broker using TCP (with or\nwithout TLS). We will use the public `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `test.mosquitto.org`), ` server in this\nintroduction.`), mdx(\"h2\", {\n    \"id\": \"prerequisites\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Prerequisites`), mdx(\"p\", null, `We assume that you have set up your development environment as described\nin `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/ide\"\n  }, `the IDE tutorial`), `.`), mdx(\"p\", null, `We also assume that you have flashed your device with Jaguar and that\nyou are familiar with running Toit programs on it.\nIf not, have a look at the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/firstprogram\"\n  }, `Hello world`), ` tutorial.`), mdx(\"p\", null, `Note that you can do this tutorial without a device. In that case,\nyou need to use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `-d host`), ` option whenever you invoke\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag run`), `. The program will then run on your computer instead of on\na device.`), mdx(\"h2\", {\n    \"id\": \"packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#packages\",\n    \"aria-label\": \"packages permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Packages`), mdx(\"p\", null, `The MQTT functionality is not part of the core libraries and must be\nimported as a package. See the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/packages\"\n  }, `packages`), `\ntutorial for details.`), mdx(\"p\", null, `We are using the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Fmqtt@v2\"\n  }, `mqtt`), `\npackage. To install it, run the following command:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitware/mqtt@v2\n`)), mdx(\"p\", null, `When connecting to TLS secured services we will also use the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Ftoit-cert-roots@v1\"\n  }, `certificate-roots`), `\npackage:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitware/toit-cert-roots@v1\n`)), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Introduction`), mdx(\"p\", null, `MQTT uses a long-running broker to which clients connect. The broker is\nresponsible for routing messages between clients. Clients can publish\nmessages to certain topics, and subscribe to topics to receive messages\npublished to those topics.`), mdx(\"p\", null, `When a client is not connected, the broker can store messages for the\nclient until it reconnects.`), mdx(\"p\", null, `Not all messages are stored, however. Each message is published with a\nQoS (Quality of Service) level. The QoS level determines how the broker\nhandles the message. The QoS levels are:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `QoS 0: At most once delivery`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `QoS 1: At least once delivery`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `QoS 2: Exactly once delivery`)), mdx(\"p\", null, `QoS 2 is not implemented in the Toit MQTT library, and we will not cover\nit in this tutorial.`), mdx(\"p\", null, `QoS 0 messages are not stored by the broker. If a client is not connected\nwhen a QoS 0 message is published, the message is lost.`), mdx(\"p\", null, `QoS 1 messages are stored by the broker until the client reconnects. When\nthe client reconnects, the broker will resend all messages that were\npublished with QoS 1.`), mdx(\"p\", null, `QoS 1 furthermore has the property that the broker will acknowledge\nreceipt of the message. This means that the client can be sure that the\nmessage was received by the broker.`), mdx(\"p\", null, `Note that clients can also lower a QoS level when subscribing to a topic.\nThis can be used to inform the broker not to store messages even if they\nwere sent with QoS 1.`), mdx(\"h2\", {\n    \"id\": \"identification\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#identification\",\n    \"aria-label\": \"identification permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Identification`), mdx(\"p\", null, `In order to store messages for a client, the broker needs to be able to\nidentify the client. This is done using a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CLIENT-ID`), `. The client ID is\nsent when connecting to the broker, and identifies a session on the broker.`), mdx(\"p\", null, `To avoid impersonation, the broker can require the client to provide a\nclient certificate or a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `username`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `password`), ` when connecting.`), mdx(\"p\", null, `When a client connects to the broker, it can also specify a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CLEAN-SESSION`), `\nflag. If this flag is set, the broker will discard any stored messages for\nthe client. If the flag is not set, the broker will keep any stored messages\nfor the client.`), mdx(\"p\", null, `With the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CLEAN-SESSION`), ` flag, a client may also decide not to provide a\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CLIENT-ID`), `. In this case, the broker will generate a random ID for the\nclient.`), mdx(\"h2\", {\n    \"id\": \"the-mqtt-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#the-mqtt-library\",\n    \"aria-label\": \"the mqtt library permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `The MQTT library`), mdx(\"p\", null, `The MQTT library comes with two client implementations:`), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, `a simplified `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Client`), ` class,`), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `and a `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `FullClient`), ` class that exposes more of the MQTT protocol.`)), mdx(\"p\", null, `We will use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Client`), ` class in this tutorial. If you need more control\nyou can use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `FullClient`), ` class instead. The documentation for the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `FullClient`), ` class can be found\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/github.com/toitware/mqtt@2.2.0/docs/mqtt/full_client/class-FullClient\"\n  }, `here`), `.`), mdx(\"h2\", {\n    \"id\": \"code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#code\",\n    \"aria-label\": \"code permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Code`), mdx(\"p\", null, `Open an `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `mqtt.toit`), ` file, and watch it with Jaguar.`), mdx(\"p\", null, `Insert the following code:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import mqtt\n\nCLIENT-ID ::= \"\"\nHOST ::= \"test.mosquitto.org\"\n\nmain:\n  client := mqtt.Client --host=HOST\n  client.start --client-id=CLIENT-ID\n  // Client is now connected.\n`)), mdx(\"p\", null, `Note that the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `start`), ` call starts a `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../../language/tasks\"\n  }, `task`), ` that\nconnects to the broker. The task will keep running in the background. It\nwill prevent the program from exiting until the client is disconnected.\nAlternatively, you can use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--background`), ` flag to start the task\nwith a background priority, thus allowing the program to exit.`), mdx(\"p\", null, `Some brokers require the client to provide a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `username`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `password`), `.\nThese can be passed to the client during the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `start`), ` call in an `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `options`), ` object:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `  options := mqtt.SessionOptions\n      --client-id=CLIENT-ID\n      --username=MY-USERNAME\n      --password=MY-PASSWORD\n  client.start --options=options\n`)), mdx(\"p\", null, `See the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/github.com/toitware/mqtt@2.2.0/docs/mqtt/library-summary\"\n  }, `documentation`), ` or\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/toitware/mqtt/tree/main/examples\"\n  }, `examples`), ` of the\nMQTT library for more information.`), mdx(\"h3\", {\n    \"id\": \"publish\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#publish\",\n    \"aria-label\": \"publish permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Publish`), mdx(\"p\", null, `When publishing data to the broker, you simply need to specify which topic to\npublish to and provide a payload.`), mdx(\"p\", null, `Let's change the example so it publishes a message. Since the mosquitto server is\nshared with other developers, we should choose a topic that avoids interference\nwith other clients. For simplicity, we will use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `toit-mqtt/tutorial`), ` in the\ncode below, but you should change it to a different topic name. Otherwise, you\nmight receive messages from other clients.`), mdx(\"p\", null, `Call the file `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `publish.toit`), ` and insert the following code.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import mqtt\nimport encoding.json\n\nCLIENT-ID ::= \"\"  // Use a random client ID.\nHOST ::= \"test.mosquitto.org\"\nTOPIC ::= \"toit-mqtt/tutorial\"\n\nmain:\n  client := mqtt.Client --host=HOST\n  client.start --client-id=CLIENT-ID\n\n  payload := json.encode {\n    \"value\": 42\n  }\n  client.publish TOPIC payload\n  client.close\n`)), mdx(\"p\", null, `Note that the payload must be an `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `io.Data`), `, which is typically a string or a\nbyte array. If your data is neither, you need to convert it first.`), mdx(\"p\", null, `This program publishes a JSON object with the value `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `42`), ` to the topic and then\ndisconnects. Let's verify that the message was published by subscribing to the\ntopic. You will need a second device, or run the program with\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag run -d host ...`), `.`), mdx(\"h3\", {\n    \"id\": \"subscribe\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#subscribe\",\n    \"aria-label\": \"subscribe permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Subscribe`), mdx(\"p\", null, `Subscribing to data requires two pieces of information: the topic (or filter)\nto subscribe to, and the callback that should be called\nwhen a message arrives.`), mdx(\"p\", null, `Create the following `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `subscribe.toit`), ` file. Don't forget to change the topic\nname to the one you used in the previous example.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import mqtt\nimport encoding.json\n\nCLIENT-ID ::= \"\"  // Use a random client ID.\nHOST ::= \"test.mosquitto.org\"\nTOPIC ::= \"toit-mqtt/tutorial\"\n\nmain:\n  client := mqtt.Client --host=HOST\n  client.start --client-id=CLIENT-ID\n\n  client.subscribe TOPIC:: | topic/string payload/ByteArray |\n    decoded := json.decode payload\n    print \"Received value on '$topic': $decoded\"\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `client.subscribe`), ` function takes a topic (here `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `TOPIC`), `) and a\ncallback (indicated by the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `::`), ` and the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `|`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `|`), ` around the parameters).`), mdx(\"p\", null, `The callback will be called every time a message is received on the topic.`), mdx(\"p\", null, `Here, we decode the incoming payload with the JSON decoder. If the data\npayload should just be interpreted as a\nstring, you can simply call `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `payload.to-string`), ` instead.`), mdx(\"p\", null, `Start this program first (optionally on your desktop with\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag run -d host subscribe.toit`), `), and then, in a second terminal, start the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `publish.toit`), ` program. You should see the following output:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `Received value on 'toit-mqtt/tutorial': {value: 42}\n`)), mdx(\"h3\", {\n    \"id\": \"quality-of-service\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#quality-of-service\",\n    \"aria-label\": \"quality of service permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Quality of Service`), mdx(\"p\", null, `As discussed, brokers can store messages for clients when they are offline. For\nthis to work the client must connect with a client ID. When the client\ndisconnects and reconnects with the same client ID, the broker will deliver\nmessages that were published while the client was offline.`), mdx(\"p\", null, `Change the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `subscribe.toit`), ` program to use a non-empty client ID. For\nexample:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `CLIENT-ID ::= \"toit-tutorial-ID-2023-07-06\"\n`)), mdx(\"p\", null, `Make sure to use a unique ID, to avoid conflicts with other clients.`), mdx(\"p\", null, `Now start the subscribe program, and then stop it, before starting the\npublish program.`), mdx(\"p\", null, `Now run the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `publish.toit`), ` program again. Once it has terminated,\nstart the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `subscribe.toit`), ` program again. If you are lucky you\nshould see the following output. If not, see below.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `Received value on 'toit-mqtt/tutorial': {value: 42}\n`)), mdx(\"p\", null, `This is the message that was published while the client was offline.`), mdx(\"p\", null, `Since the subscribe program only subscribes to the topic after it has\nconnected, there is a race condition between the connection being\nestablished and the subscription handler being registered. If the\nstored messages are delivered before the subscription handler is\nregistered, they will be lost. To avoid this, you can register the\nsubscription handler before connecting to the broker:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `main:\n  routes := {\n    TOPIC: :: | topic/string payload/ByteArray |\n      decoded := json.decode payload\n      print \"Received value on '$topic': $decoded\"\n  }\n  client := mqtt.Client --host=HOST --routes=routes\n  client.start --client-id=CLIENT-ID\n  // Client is now connected and subscribed to the given routes.\n`)), mdx(\"h2\", {\n    \"id\": \"tls\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#tls\",\n    \"aria-label\": \"tls permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `TLS`), mdx(\"p\", null, `For secure connections to the broker, we need to use TLS. For that we need\nroot certificates which are then used to authenticate the server.`), mdx(\"p\", null, `If you haven't already, install the certificate-roots package with`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitware/toit-cert-roots@v1\n`)), mdx(\"p\", null, `In some cases, the certificate might be given by the server and should be pasted into\nthe sources.`), mdx(\"p\", null, `Once we have the root certificates, the client can be created with the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `tls`), `\nnamed constructor as follows:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import mqtt\nimport certificate-roots\nimport encoding.json\n\nCLIENT-ID ::= \"toit-tutorial-ID-2023-07-06\"\nHOST ::= \"test.mosquitto.org\"\nTOPIC ::= \"toit-mqtt/tutorial\"\n\nmain:\n  certificate-roots.install-common-trusted-roots\n\n  routes := {\n    TOPIC: :: | topic/string payload/ByteArray |\n      decoded := json.decode payload\n      print \"Received value on '$topic': $decoded\"\n  }\n  client := mqtt.Client.tls --host=HOST --routes=routes\n  client.start --client-id=CLIENT-ID\n\n  while true:\n    payload := json.encode {\n      \"now\": Time.now.utc.to-iso8601-string\n    }\n    client.publish TOPIC payload\n    sleep --ms=1_000\n`)), mdx(\"p\", null, `This example combines all the previous examples. It connects to the broker\nusing TLS, subscribes to the topic, and publishes a message every second.`), mdx(\"h2\", {\n    \"id\": \"conclusion\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Conclusion`), mdx(\"p\", null, `In conclusion, this tutorial has introduced the MQTT protocol and its usage\nin Toit. We have covered how to set up and initiate an MQTT client, publish\nand subscribe to topics, and control message storage with Quality of Service\nlevels. It is recommended that you experiment further with these features\nand consult the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/github.com/toitware/mqtt@2.2.0/docs/mqtt/library-summary\"\n  }, `Toit MQTT library documentation`), `\nfor more advanced usage and options.`), mdx(\"h2\", {\n    \"id\": \"exercises\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#exercises\",\n    \"aria-label\": \"exercises permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Exercises`), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Try to publish and subscribe to different topics.`), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Try to publish and subscribe to topics with different QoS levels.`, mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Send messages with QoS 0 and 1 and see what happens when the subscriber is offline.`), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Send messages with QoS 1 but subscribe with `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `--max-qos=0`), ` and see what happens.`)))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#mqtt","title":"MQTT","items":[{"url":"#prerequisites","title":"Prerequisites"},{"url":"#packages","title":"Packages"},{"url":"#introduction","title":"Introduction"},{"url":"#identification","title":"Identification"},{"url":"#the-mqtt-library","title":"The MQTT library"},{"url":"#code","title":"Code","items":[{"url":"#publish","title":"Publish"},{"url":"#subscribe","title":"Subscribe"},{"url":"#quality-of-service","title":"Quality of Service"}]},{"url":"#tls","title":"TLS"},{"url":"#conclusion","title":"Conclusion"},{"url":"#exercises","title":"Exercises"}]}]}}},"pageContext":{"title":"MQTT","id":"23109deb-3df9-576e-b9ac-09bff972ad7a"}},
    "staticQueryHashes": ["2197327828"]}