{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/network/supabase",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"supabase\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#supabase\",\n    \"aria-label\": \"supabase permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Supabase`), mdx(\"p\", null, `Supabase is a service that provides a Postgres database, authentication, and\nstorage. It's an easy way to get started with a full stack application.`), mdx(\"p\", null, `In this tutorial we will use it as a database to store sensor values from\na device.`), mdx(\"h2\", {\n    \"id\": \"prerequisites\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Prerequisites`), mdx(\"p\", null, `We assume that you have set up your development environment as described\nin `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/ide\"\n  }, `the IDE tutorial`), `.`), mdx(\"p\", null, `We also assume that you have flashed your device with Jaguar and that\nyou are familiar with running Toit programs on it.\nIf not, have a look at the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/firstprogram\"\n  }, `Hello world`), ` tutorial.`), mdx(\"p\", null, `Note that you can do this tutorial without a device. In that case,\nyou need to use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `-d host`), ` option whenever you invoke\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag run`), `. The program will then run on your computer instead of on\na device.`), mdx(\"h2\", {\n    \"id\": \"create-a-supabase-project\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#create-a-supabase-project\",\n    \"aria-label\": \"create a supabase project permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Create a Supabase project`), mdx(\"p\", null, `To get started, you need to create a Supabase project.`), mdx(\"p\", null, `If you don't have an account yet, go to `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://supabase.com\"\n  }, `supabase.com`), `\nand create one. You can use the free plan for this tutorial.`), mdx(\"p\", null, `Once you have an account, go to the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://supabase.com/dashboard/projects\"\n  }, `dashboard`), ` and create a new project.\nIn the dialog, enter a name and provide a password. Update the region if\nnecessary, and click on \"Create new project\".`), mdx(\"p\", null, `Wait until the project is completely set up (this may take a few minutes), then\ngo to the \"Project Settings\" (gear icon) tab. In the \"General\" section, you will find\nthe \"Reference ID\" (also known as \"project id\"). In the \"API\" section,\nyou will find anon key.`), mdx(\"p\", null, `You will need both of these values later.`), mdx(\"h3\", {\n    \"id\": \"create-the-tables\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#create-the-tables\",\n    \"aria-label\": \"create the tables permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Create the tables`), mdx(\"p\", null, `We will use two tables:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `devices`), `: This table will store the device IDs that are allowed to send\nsensor values.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `temperatures`), `: This table will store the sensor values.`)), mdx(\"p\", null, `For simplicity, we will allow anyone to write into the temperatures table, as\nlong as they have a valid device ID. We will keep the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `devices`), ` table\nprivate (only accessible through the dashboard), so that nobody can\naccess the device IDs. The device ID thus serves as a secret key that\nallows a device to write into the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperatures`), ` table.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `devices`), ` table will need just one column:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `id`), `: `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `uuid`), `, primary key`)), mdx(\"p\", null, `If you want to, you can add/keep a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `created_at`), ` column and other\ncolumns that you find useful.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `devices`), ` table should have Row Level Security (RLS) enabled.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperatures`), ` table will need the following columns:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `id`), `: `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `int8`), `, primary key, auto increment (\"is identity\")`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `device_id`), `: `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `uuid`), `,`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `temperature`), `: `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `float8`), `, not nullable`)), mdx(\"p\", null, `As before you can add/keep a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `created_at`), ` column and other columns that\nyou find useful.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperatures`), ` table should also have Row Level Security (RLS) enabled.`), mdx(\"p\", null, `You can create the tables anyway you want, for example using the online\ntable editor (available under\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `https://supabase.com/dashboard/project/<project-id>/editor`), `) ,\nusing SQL statements, or with migrations and the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `supabase`), ` CLI tool. For simplicity, we will only provide the SQL\nstatements here.`), mdx(\"p\", null, `Open the \"SQL Editor\" tab (on the left). The URL should be\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `https://supabase.com/dashboard/project/<project-id>/sql`), `.`), mdx(\"p\", null, `Click on \"+ New query\" (blank query) and enter the following SQL statements.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, `CREATE TABLE devices (\n  id uuid PRIMARY KEY\n);\n\nALTER TABLE devices ENABLE ROW LEVEL SECURITY;\n\nCREATE TABLE temperatures (\n  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,\n  device_id uuid NOT NULL REFERENCES devices(id) ON DELETE CASCADE,\n  temperature float8 NOT NULL\n);\n\nALTER TABLE temperatures ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Enable insert to everyone\"\n  ON temperatures\n  AS PERMISSIVE\n  FOR INSERT\n  TO public\n  WITH CHECK (true);\n`)), mdx(\"p\", null, `Click on `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `RUN`), ` (or press `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Ctrl+Enter`), `) to execute the statements.`), mdx(\"p\", null, `You should now have two tables in your project.`), mdx(\"h2\", {\n    \"id\": \"preparation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#preparation\",\n    \"aria-label\": \"preparation permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Preparation`), mdx(\"p\", null, `Create a fresh UUID for the device ID. You can generate one\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.uuidgenerator.net/\"\n  }, `online`), ` or with the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `uuidgen`), ` command\non Linux.`), mdx(\"p\", null, `Add this device ID to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `devices`), ` table. You can do this with the\nonline table editor, or with the following SQL statement (replace\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<device-id>`), ` with the device ID):`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, `INSERT INTO devices (id) VALUES ('<device-id>');\n`)), mdx(\"h2\", {\n    \"id\": \"toit-program\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#toit-program\",\n    \"aria-label\": \"toit program permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Toit program`), mdx(\"p\", null, `Now we can write the Toit program that will send sensor values to Supabase.`), mdx(\"h3\", {\n    \"id\": \"packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#packages\",\n    \"aria-label\": \"packages permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Packages`), mdx(\"p\", null, `We will use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `supabase`), ` package to communicate with the database. Install\nit with the following command. See the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/packages\"\n  }, `packages`), `\ntutorial for details.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitware/toit-supabase@0.2\n`)), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `You can probably just write `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg install supabase`), `, but the full ID together\nwith the version is more explicit, and will make sure you get the right package.`), mdx(\"p\", null, `Feel free to use a newer version of the package if one is available. You\nmight need to update the code samples below if you do.`)), mdx(\"p\", null, `We will also use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `certificate-roots`), ` package to provide the root\ncertificate for the TLS connection. Install it with the following command:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitware/toit-cert-roots@v1\n`)), mdx(\"h3\", {\n    \"id\": \"code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#code\",\n    \"aria-label\": \"code permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Code`), mdx(\"p\", null, `In this section we will create a Toit program that sends simulated sensor\nvalues to Supabase.`), mdx(\"p\", null, `Open a new file `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `supabase.toit`), ` and watch it with Jaguar. Enter the\nfollowing code. Don't forget to replace `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<project-id>`), ` with the project ID\nof your Supabase project, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<anon-key>`), ` with the anon key, and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<device-id>`), `\nwith the device ID that you entered into the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `devices`), ` table.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import certificate-roots\nimport supabase\n\nTABLE ::= \"temperatures\"\nPROJECT-ID ::= \"<project-id>\"\nANON-KEY ::= \"<anon-key>\"\n\nDEVICE-ID ::= \"<device-id>\"\n\nmain:\n  certificate-roots.install-common-trusted-roots\n  host := \"$(PROJECT-ID).supabase.co\"\n  client := supabase.Client.tls\n      --host=host\n      --anon=ANON-KEY\n\n  // We don't want to receive the inserted row, because we don't have\n  // read access to the table.\n  client.rest.insert TABLE --no-return-inserted {\n    \"device-id\": DEVICE-ID,\n    \"temperature\": 42.0,\n  }\n\n  client.close\n`)), mdx(\"p\", null, `The program uses the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `supabase.Client`), ` class to connect to Supabase.\nSince the project needs to be accessed with TLS (https), we need to provide\nthe root certificate for the connection. We do this with the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `certificate-roots.BALTIMORE-CYBERTRUST-ROOT`), ` constant.`), mdx(\"p\", null, `This program will send a sensor value of 42.0 to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperatures`), ` table\nin your Supabase project. It will use the device ID that you entered into\nthe `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `devices`), ` table as a \"secret key\" to authenticate itself.`), mdx(\"p\", null, `After saving it Jaguar should automatically start the program. After the\nprogram has run, you should see a new row in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperatures`), ` table.`), mdx(\"h2\", {\n    \"id\": \"visualization\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#visualization\",\n    \"aria-label\": \"visualization permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Visualization`), mdx(\"p\", null, `Supabase doesn't come with a built-in visualization tool, but it is easy\nto connect it to a third-party tool. In this section we will use\nGrafana to visualize the sensor values.`), mdx(\"p\", null, `Before connecting Grafana to Supabase, we need to add a more\nrestricted user to the Supabase project. This user will only have\nread access to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperatures`), ` table.`), mdx(\"p\", null, `Run the following SQL statement in the \"SQL Editor\" tab of your Supabase\nproject: (replace `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<password>`), ` with a password of your choice).`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, `CREATE USER grafanareader WITH PASSWORD '<password>';\nGRANT SELECT ON public.temperatures TO grafanareader;\nCREATE POLICY \"grafana can read temperatures\"\n  ON temperatures\n  AS PERMISSIVE\n  FOR SELECT\n  TO grafanareader\n  USING (true);\n`)), mdx(\"h3\", {\n    \"id\": \"create-a-grafana-dashboard\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#create-a-grafana-dashboard\",\n    \"aria-label\": \"create a grafana dashboard permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Create a Grafana dashboard`), mdx(\"p\", null, `Go to `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://grafana.com/auth/sign-up/create-user\"\n  }, `https://grafana.com/auth/sign-up/create-user`), ` and create a new\naccount.`), mdx(\"p\", null, `Grafana will then create a new dashboard for you. This step can take\na few minutes.`), mdx(\"p\", null, `Create a new dashboard by clicking on the \"Create your first dashboard\"\nbutton. Then click on \"Create your own\", and select \"PostgreSQL\" as the\ndata connection.`), mdx(\"p\", null, `Enter the required information. You can find the connection information\nin the \"Settings\" tab of your Supabase project under \"Database\".`), mdx(\"p\", null, `The host is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `db.<project-id>.supabase.co`), `, the database is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `postgres`), `,\nthe user is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `grafanareader`), `, and the password is the password that you\nentered in the SQL statement above. Also, change the PostgreSQL\nversion to 15.`), mdx(\"p\", null, `Click on \"+ Add visualization\" and click on \"PostgreSQL\". Click on\n\"Code\" (instead of \"Builder\") and enter the following SQL statement:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, `SELECT temperature, created_at\n  FROM temperatures\n  ORDER BY created_at\n  DESC\n  LIMIT 100\n`)), mdx(\"p\", null, `the \"temperatures\" table, and the columns \"temperature\" and\n\"created_at\".`), mdx(\"p\", null, `Click on the \"Order\" toggle to sort the rows by the \"created_at\" column\nin descending order. This way the newest values will be shown first.`), mdx(\"p\", null, `If you don't see the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperatures`), ` table, see the Troubleshooting\nsection below.`), mdx(\"p\", null, `Then click on \"Run Query\". You should now see a graph of the temperature\nvalues that are in your database. You probably want to change the\noriginal program to send a few more values to the database before\nthe visualization looks interesting.`), mdx(\"p\", null, `Click on \"Save\" (top right) to save the dashboard.`), mdx(\"p\", null, `You should end up with a dashboard that looks like this:`), mdx(\"img\", {\n    src: Grafana,\n    alt: \"Screenshot of the Grafana dashboard\"\n  }), mdx(\"h4\", {\n    \"id\": \"troubleshooting\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#troubleshooting\",\n    \"aria-label\": \"troubleshooting permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Troubleshooting`), mdx(\"p\", null, `If you don't see the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperatures`), ` table, verify that Grafana can connect\nto your database. Go to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Home > Connections > Data sources`), ` and click\non \"PostgreSQL\". Verify that all the settings are correct. Most importantly,\nverify that the host is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `db.<project-id>.supabase.co`), `, that the\ndatabase is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `postgres`), `, the user is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `grafanareader`), `, and the password is\ncorrect.`), mdx(\"p\", null, `At the bottom is a \"Save & Test\" button. Click on it to verify that\nGrafana can connect to your database.`), mdx(\"p\", null, `If the Database Connection is OK, but you can't see the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperatures`), `\ntable, verify that you have granted the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `grafanareader`), ` user access to\nthe `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperatures`), ` table.`), mdx(\"p\", null, `If you can see the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperatures`), ` table, but you can't see the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperature`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `created_at`), ` columns, verify that you have\ncreated the policy that grants the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `grafanareader`), ` user access to the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `temperatures`), ` table.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#supabase","title":"Supabase","items":[{"url":"#prerequisites","title":"Prerequisites"},{"url":"#create-a-supabase-project","title":"Create a Supabase project","items":[{"url":"#create-the-tables","title":"Create the tables"}]},{"url":"#preparation","title":"Preparation"},{"url":"#toit-program","title":"Toit program","items":[{"url":"#packages","title":"Packages"},{"url":"#code","title":"Code"}]},{"url":"#visualization","title":"Visualization","items":[{"url":"#create-a-grafana-dashboard","title":"Create a Grafana dashboard","items":[{"url":"#troubleshooting","title":"Troubleshooting"}]}]}]}]}}},"pageContext":{"title":"Supabase","id":"ed723ccd-c886-5a47-a19b-918c10005b31"}},
    "staticQueryHashes": ["2197327828"]}