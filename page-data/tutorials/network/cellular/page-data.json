{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/network/cellular",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"cellular-connectivity\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#cellular-connectivity\",\n    \"aria-label\": \"cellular connectivity permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Cellular Connectivity`), mdx(\"p\", null, `In this tutorial we will learn how to use an ESP32 board with a modem\nto connect to the internet.`), mdx(\"p\", null, `We are using the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.quickspot.io/\"\n  }, `Walter`), ` device, which is\nan open-hardware ESP32-S3 board with a Sequans GM02SP modem.`), mdx(\"img\", {\n    src: Walter,\n    alt: \"Walter\",\n    style: {\n      \"width\": \"300px\",\n      \"cssFloat\": \"right\",\n      \"marginLeft\": \"20px\"\n    }\n  }), mdx(\"h2\", {\n    \"id\": \"prerequisites\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Prerequisites`), mdx(\"p\", null, `We assume that you have set up your development environment as described\nin `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/ide\"\n  }, `the IDE tutorial`), `.`), mdx(\"p\", null, `We also assume that you have flashed your device with Jaguar and that\nyou are familiar with running Toit programs on it.\nIf not, have a look at the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/firstprogram\"\n  }, `Hello world`), ` tutorial.`), mdx(\"p\", null, `Note that the Walter device is an ESP32-S3 board, which requires the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--chip=esp32s3`), ` flag when flashing.`), mdx(\"p\", null, `In later sections we will refer to `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../containers\"\n  }, `containers`), ` and\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../containers/services\"\n  }, `services`), `, but these are not strictly necessary.`), mdx(\"p\", null, `We will use HTTP to fetch data from the internet. There are\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../http\"\n  }, `multiple`), ` `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../http-server\"\n  }, `tutorials`), ` on this topic, but you\nshould be able to follow this tutorial without having read them.`), mdx(\"h2\", {\n    \"id\": \"packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#packages\",\n    \"aria-label\": \"packages permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Packages`), mdx(\"p\", null, `Cellular functionality is not part of the core libraries and must be\nimported as a package. See the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/packages\"\n  }, `packages`), `\ntutorial for details.`), mdx(\"p\", null, `As of writing, all drivers for cellular modems are in the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Fcellular@v2\"\n  }, `cellular`), `\npackage.`), mdx(\"p\", null, `To install it, run the following command:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitware/cellular@v2\n`)), mdx(\"p\", null, `We will use the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitlang%2Fpkg-http@v2\"\n  }, `http`), `\nand the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Ftoit-cert-roots@v1\"\n  }, `certificate-roots`), `\npackages to fetch data from the internet.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitlang/pkg-http@v2\njag pkg install github.com/toitware/toit-cert-roots@v1\n`)), mdx(\"h2\", {\n    \"id\": \"code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#code\",\n    \"aria-label\": \"code permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Code`), mdx(\"p\", null, `Start a new Toit program `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `walter.toit`), ` and watch it with Jaguar. If necessary,\nuncomment the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CONFIG-APN`), ` line and set the correct APN for your provider.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import cellular.modules.sequans.monarch\nimport http\nimport encoding.json\nimport net\nimport net.cellular\nimport certificate-roots\n\nRX ::= 14\nTX ::= 48\nRTS ::= 21\nCTS ::= 47\nRESET ::= 45\nPOWER ::= 46\nBAUD ::= 115200\n\nmain:\n  // Start the monarch driver/provider.\n  task --background::\n    monarch.main\n\n  // Establish the connection to the network.\n  network := cellular.open --name=\"gm02sp\" {\n    cellular.CONFIG-UART-RX: RX,\n    cellular.CONFIG-UART-TX: TX,\n    cellular.CONFIG-UART-CTS: CTS,\n    cellular.CONFIG-UART-RTS: RTS,\n    cellular.CONFIG-RESET: [RESET, cellular.CONFIG-ACTIVE-LOW],\n    cellular.CONFIG-POWER: POWER,\n    cellular.CONFIG-UART-BAUD-RATE: BAUD,\n    // If your provider requires an APN, you can set it here.\n    // cellular.CONFIG-APN: \"<your-apn>\",\n  }\n\n  try:\n    do-network-things network\n  finally:\n    network.close\n`)), mdx(\"p\", null, `The constants for the Walter board can be found in its\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.quickspot.io/datasheet/walter_datasheet_v0.4.pdf\"\n  }, `datasheet`), `. The\nmodem constants are specificed in section 4.1.2 (\"Internal Pins\").`), mdx(\"p\", null, `Even though the modem isn't a \"Monarch\", but a \"GM02SP\", we can use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `monarch`), ` driver.\nBoth are manufactured by Sequans, and use similar AT commands. Eventually, there might be\na more specialized driver for the GM02SP.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `monarch.main`), ` function installs the driver as a provider so that other code\ncan use it through a service. We happen to use it from the same process, but that's\nnot a requirement. In fact, we will see later how the provider can be started in\na different container, so that different programs can have access to the internet\nat the same time.`), mdx(\"p\", null, `Once the provider is running in the background, we simply use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `cellular.open`), `\nfunction to establish a connection to the network. It will return a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `net.Client`), `\nobject that we can pass to code that needs to use the network.`), mdx(\"p\", null, `For example, the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `do-network-things`), ` function could look as follows:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `do-network-things network/net.Client:\n  certificate-roots.install-common-trusted-roots\n  client := http.Client.tls network\n  request := client.get --uri=\"https://official-joke-api.appspot.com/random_joke\"\n  decoded := json.decode-stream request.body\n  print decoded[\"setup\"]\n  print decoded[\"punchline\"]\n`)), mdx(\"h2\", {\n    \"id\": \"container\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#container\",\n    \"aria-label\": \"container permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Container`), mdx(\"p\", null, `In our first iteration the cellular provider was started in the same\ncontainer as the rest of the code. This is not ideal, as the cellular\nconnection is then not available to other containers.`), mdx(\"p\", null, `We can fix this, by installing the cellular provider in its own container.`), mdx(\"p\", null, `Create a new file `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `cellular.toit`), ` with the following content. If necessary,\nuncomment the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CONFIG-APN`), ` line and set the correct APN for your provider.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import net.cellular\nimport cellular.modules.sequans.monarch\n\nRX ::= 14\nTX ::= 48\nRTS ::= 21\nCTS ::= 47\nRESET ::= 45\nPOWER ::= 46\nBAUD ::= 115200\n\nclass WalterCellularProvider extends monarch.MonarchService:\n  connect client/int config/Map? -> List:\n    if not config or config.is-empty:\n      config = {\n        cellular.CONFIG-UART-RX: RX,\n        cellular.CONFIG-UART-TX: TX,\n        cellular.CONFIG-UART-CTS: CTS,\n        cellular.CONFIG-UART-RTS: RTS,\n        cellular.CONFIG-RESET: [RESET, cellular.CONFIG-ACTIVE-LOW],\n        cellular.CONFIG-POWER: POWER,\n        cellular.CONFIG-UART-BAUD-RATE: BAUD,\n        // If your provider requires an APN, you can set it here.\n        // cellular.CONFIG-APN: \"<your-apn>\",\n      }\n    return super client config\n\nmain:\n  provider := WalterCellularProvider\n  provider.install\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `WalterCellularProvider`), ` extends the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `MonarchService`), ` (which was\ninstalled as part of the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `monarch.main`), ` call in the previous section), and\noverrides the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `connect`), ` method to use the constants for the Walter board.`), mdx(\"p\", null, `Note that the name `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `MonarchService`), ` is a bit misleading, as it is actually\na provider (extending the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CellularServiceProvider`), ` class).`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `main`), ` function then installs the provider, so that containers\ncan use it.`), mdx(\"p\", null, `We can now install this container on the device:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag container install cellular cellular.toit\n`)), mdx(\"p\", null, `Other containers can now use the cellular provider.`), mdx(\"p\", null, `For example, create, and watch the following `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `cellular-user.toit`), ` program:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import net\nimport net.cellular\n\ndo-network-things network/net.Client:\n  ...\n\nmain:\n  network := cellular.open --name=\"walter\" {:}\n\n  try:\n    do-network-things network\n  finally:\n    network.close\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `do-network-things`), ` function could be the same as in the previous\nsection (in which case you will have to add a few more imports).`), mdx(\"p\", null, `Note that multiple containers can call `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `cellular.open`), ` at the same time and\naccess the internet concurrently.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#cellular-connectivity","title":"Cellular Connectivity","items":[{"url":"#prerequisites","title":"Prerequisites"},{"url":"#packages","title":"Packages"},{"url":"#code","title":"Code"},{"url":"#container","title":"Container"}]}]}}},"pageContext":{"title":"Cellular Connectivity","id":"d7901276-e1ae-50aa-b2c0-6436ae6be287"}},
    "staticQueryHashes": ["2197327828"]}