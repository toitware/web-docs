{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/network/http-file-server",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Note = makeShortcode(\"Note\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"http\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#http\",\n    \"aria-label\": \"http permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `HTTP`), mdx(\"p\", null, `In this tutorial we will write an HTTP file server. The server\ntakes the HTTP path and serves the corresponding file from the\nlocal file system. In spirit it is very similar to\npython's `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `python -m http.server`), ` command.`), mdx(\"p\", null, `You will learn how to use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `http`), ` package to serve HTML pages and the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `host`), ` package to list local files.`), mdx(\"h2\", {\n    \"id\": \"prerequisites\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Prerequisites`), mdx(\"p\", null, `We assume that you have set up your development environment as described\nin `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/ide\"\n  }, `the IDE tutorial`), `.`), mdx(\"p\", null, `This tutorial is written for the desktop and not the ESP32. You should\nstill have a look at the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/firstprogram\"\n  }, `Hello world`), ` tutorial.\nHowever, instead of running the program on the ESP32, you should run it\non your desktop, using the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `-d host`), ` option to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag run`), ` command. Note,\nthat `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag watch`), ` does not support the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `-d`), ` option, so you will have to\nmanually restart the program after each change.`), mdx(\"h2\", {\n    \"id\": \"packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#packages\",\n    \"aria-label\": \"packages permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Packages`), mdx(\"p\", null, `The HTTP functionality is not part of the core libraries and must be\nimported as a package. See the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../setup/packages\"\n  }, `packages`), `\ntutorial for details.`), mdx(\"p\", null, `We are using the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitlang%2Fpkg-http@v2\"\n  }, `http`), `\npackage. To install it, run the following command:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitlang/pkg-http@v2\n`)), mdx(\"p\", null, `For file access we will use the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitlang%2Fpkg-host@v1\"\n  }, `host`), `\npackage. To install it, run the following command:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitlang/pkg-host@v1\n`)), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, `You can probably just write `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg install http`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg install host`), `,\nbut the full IDs together with the versions are more explicit, and will\nmake sure you get the right packages.`), mdx(\"p\", null, `Feel free to use a newer version of the package if one is available. You\nmight need to update the code samples below if you do.`)), mdx(\"h2\", {\n    \"id\": \"code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#code\",\n    \"aria-label\": \"code permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Code`), mdx(\"p\", null, `Create a new file called `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `file-server.toit`), `, and start by adding the imports\nand constants:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import host.file\nimport host.directory\nimport http\nimport net\n\nCSS ::= \"\"\"\n\"\"\"\n`)), mdx(\"p\", null, `For now we leave the CSS empty. We will add some content later.`), mdx(\"p\", null, `We can now add the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `main`), ` function:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `main:\n  network := net.open\n  server-socket := network.tcp-listen 0\n  port := server-socket.local-address.port\n  print \"Listening on http://localhost:$port/\"\n\n  clients := []\n  server := http.Server\n  task::\n    server.listen server-socket:: | request/http.RequestIncoming response-writer/http.ResponseWriter |\n      // Note that we are not sanitizing the path here.  This is a security\n      // risk, as it allows a client to access files outside of the current\n      // directory.\n      path := \"./$request.path\"\n      if file.is-file path:\n        serve-file request.path response-writer\n      else if file.is-directory path:\n        serve-directory request.path response-writer\n      else:\n        response-writer.write-headers http.STATUS-NOT-FOUND --message=\"Not Found\"\n      response-writer.close\n`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `main`), ` function starts by establishing a network connection on a random\nport. It then creates a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Server`), ` object and starts listening for incoming\nconnections.`), mdx(\"p\", null, `Depending on the path of the request, we either serve a file, a directory\nlisting, or a 404 error.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `serve-file`), ` function is implemented as follows:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `serve-file request-path/string writer/http.ResponseWriter:\n  path := \"./$request-path\"\n  // Serve the file as binary data.\n  writer.headers.add \"content_type\" \"application/octet-stream\"\n  writer.headers.add \"content_length\" \"$(file.size path)\"\n  stream := file.Stream.for-read path\n  try:\n    writer.out.write-from stream.in\n  finally:\n    stream.close\n`)), mdx(\"p\", null, `It adds the correct headers and then pipes the file contents to the\nresponse writer.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `serve-directory`), ` function is slightly more involved since it\nneeds to differentiate between files and directories:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `serve-directory request-path/string writer/http.ResponseWriter:\n  // List the directory contents.\n  path := \"./$request-path\"\n  stream := directory.DirectoryStream path\n  writer.headers.add \"content_type\" \"text/html\"\n  writer.out.write \"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Directory Listing - $request-path</title>\n      <style>\n        $CSS\n      </style>\n    </head>\n    <body>\n      <h1>Directory Listing - $request-path</h1>\n    \"\"\"\n  while entry := stream.next:\n    entry-path := \"$path/$entry\"\n    prefix := request-path.trim --right \"/\"\n    entry-request-path := \"$prefix/$entry\"\n    if file.is-directory entry-path:\n      writer.out.write \"\"\"\n        <div class=\"directory\">\n          <a href=\"$entry-request-path\">$entry/</a>\n        </div>\n      \"\"\"\n    else:\n      writer.out.write \"\"\"\n        <div class=\"file\">\n          <a href=\"$entry-request-path\" download>$entry</a>\n        </div>\n      \"\"\"\n  stream.close\n  writer.out.write \"\"\"\n    </body>\n    </html>\n  \"\"\"\n`)), mdx(\"p\", null, `Most of the function consists of HTML code. The key part is the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `while`), ` loop. For each entry in the directory we check if it is a\nfile or a directory. We then generate the appropriate HTML.`), mdx(\"h2\", {\n    \"id\": \"css\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#css\",\n    \"aria-label\": \"css permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `CSS`), mdx(\"p\", null, `There are many ways to render a directory listing. We have chosen to\nask chat.openai.com for help. Our prompt was:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, `Create a CSS for a web page that will show a file system.\nUsers can click on files to download them, or click on directories to go into them.\nShow an example HTML file that the server needs to generate to use this CSS.\n`)), mdx(\"p\", null, `This is what we got back:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-CSS\"\n  }, `body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f5f5f5;\n}\n\n.container {\n    width: 80%;\n    margin: auto;\n    padding: 20px;\n    background-color: white;\n    border-radius: 5px;\n    margin-top: 10px;\n}\n\n.directory, .file {\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    margin: 5px 0;\n    cursor: pointer;\n    transition: 0.3s;\n}\n\n.directory:hover, .file:hover {\n    background-color: #e0e0e0;\n}\n\n.directory:before {\n    content: \"📁 \";\n}\n\n.file:before {\n    content: \"📄 \";\n}\n\na {\n    color: inherit;\n    text-decoration: none;\n}\n`)), mdx(\"p\", null, `For reference, the AI model suggested the following HTML page\n(Note: it was missing the charset meta tag):`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-HTML\"\n  }, `<!DOCTYPE html>\n<html>\n<head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"your-stylesheet.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"directory\">\n            <a href=\"/path/to/directory1\">Directory 1</a>\n        </div>\n        <div class=\"directory\">\n            <a href=\"/path/to/directory2\">Directory 2</a>\n        </div>\n        <div class=\"file\">\n            <a href=\"/path/to/file1\" download>File 1</a>\n        </div>\n        <div class=\"file\">\n            <a href=\"/path/to/file2\" download>File 2</a>\n        </div>\n    </div>\n</body>\n</html>\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#http","title":"HTTP","items":[{"url":"#prerequisites","title":"Prerequisites"},{"url":"#packages","title":"Packages"},{"url":"#code","title":"Code"},{"url":"#css","title":"CSS"}]}]}}},"pageContext":{"title":"HTTP","id":"89c4964f-810d-5809-b843-3b4da319a089"}},
    "staticQueryHashes": ["2197327828"]}