{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/setup/packages",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#packages\",\n    \"aria-label\": \"packages permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Packages`), mdx(\"p\", null, `The Toit framework comes with lots of convenience methods, but much more\nfunctionality is available in packages. Packages are Toit libraries that\nare publicly available and can be used by anyone. They are published on the\nToit package registry.`), mdx(\"p\", null, `Go to `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/packages\"\n  }, `https://pkg.toit.io/packages`), ` to see all available packages. A lot of\nthem are drivers for sensors (like the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Fbme280-driver\"\n  }, `bme280`), `\npackage), but other packages contain code that is useful on its own. For\nexample, the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitware%2Ftoit-solar-position\"\n  }, `solar_position`), `\npackage calculates the sunrise and sunset times for a given place and date on Earth.`), mdx(\"h2\", {\n    \"id\": \"initializing-a-project\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#initializing-a-project\",\n    \"aria-label\": \"initializing a project permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Initializing a project`), mdx(\"p\", null, `Before using packages, it is recommended to initialize a project first. Toit\nwill do this automatically when installing the first package, but we\nrecommend to explicitly initialize a folder as a project root.`), mdx(\"p\", null, `Move into the folder where you want to create your project and run the\nfollowing command:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg init\n`)), mdx(\"p\", null, `This creates a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.yaml`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.lock`), ` file. Usually, you will\nnot need to edit these files manually, but it is good to know what they\nare for.`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.yaml`), ` file is used to specify which packages are needed for\nthe project. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.lock`), ` file is used to record which versions of\nthe packages have been installed. Both files should be committed to your\nsource-code management system (usually git).`), mdx(\"h2\", {\n    \"id\": \"installing-new-packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#installing-new-packages\",\n    \"aria-label\": \"installing new packages permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Installing new packages`), mdx(\"p\", null, `Packages can be installed with the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg install`), ` command. For example,\nto install the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ntp`), ` package one can write:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install ntp\n`)), mdx(\"p\", null, `One can also install packages using their name (like `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ntp`), ` here), but this\nonly works as long as the name isn't ambiguous. Since different developers\ncan contribute packages, there is no guarantee that package names remain\nunique.`), mdx(\"p\", null, `The most stable way to install a package is to use the full package ID,\ntogether with the requested major version:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install github.com/toitlang/pkg-ntp@1\n`)), mdx(\"p\", null, `This will install the latest version of the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `pkg-ntp`), ` package that is\ncompatible with version 1 of the package. Usually, we use the short\nversion when installing packages by hand, but use a more qualified\nversion in tutorials or documentation. This way we can make sure that\nthe code will still work when a new version of the package is released,\nor when a new package with the same name is released.`), mdx(\"h3\", {\n    \"id\": \"installing-project-packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#installing-project-packages\",\n    \"aria-label\": \"installing project packages permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Installing project packages`), mdx(\"p\", null, `When a project uses packages, each user needs to install the packages\nlocally. This is done by running `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg install`), ` in the project root.\nThis will install all packages that are listed in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.lock`), ` file\nthus making sure that all users use the same versions of the packages.`), mdx(\"h3\", {\n    \"id\": \"updating-packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#updating-packages\",\n    \"aria-label\": \"updating packages permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Updating packages`), mdx(\"p\", null, `A project continues using the same versions of the packages (fixed\nin the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.lock`), ` file) until the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `jag pkg update`), ` command is\nrun. This command will update the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.lock`), ` file to use the latest\ncompatible versions of the packages.`), mdx(\"h2\", {\n    \"id\": \"using-packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#using-packages\",\n    \"aria-label\": \"using packages permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Using packages`), mdx(\"p\", null, `Once a package has been installed, it can be imported by writing\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import PACKAGE-NAME`), `. For the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ntp`), ` package that would be\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import ntp`), `.`), mdx(\"h3\", {\n    \"id\": \"selecting-a-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#selecting-a-library\",\n    \"aria-label\": \"selecting a library permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Selecting a library`), mdx(\"p\", null, `When importing a package with the package name (like `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import ntp`), `), Toit\nautomatically selects the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `PACKAGE-NAME.toit`), ` library (`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ntp.toit`), `) of\nthat package.`), mdx(\"p\", null, `If a package has multiple libraries, or if it doesn't have a\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `PACKAGE-NAME.toit`), ` library, then one needs to select the correct library\nby adding a dot followed by the library that is needed. For example, the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.toit.io/package/github.com%2Ftoitlang%2Fpkg-host@v1\"\n  }, `host`), `\npackage has no `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `host.toit`), ` library, but one could use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `directory.toit`), `\nas follows:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import host.directory\n`)), mdx(\"p\", null, `Most packages have a nice entry-point so you rarely need to worry about this.`), mdx(\"h2\", {\n    \"id\": \"project-root\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#project-root\",\n    \"aria-label\": \"project root permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Project root`), mdx(\"p\", null, `Toit packages are installed per project, wherea  project is a folder that\ncontains a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.yaml`), `/`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `package.lock`), ` file.`), mdx(\"p\", null, `Package commands assume that the current working directory is the project\nroot. If that's not the case, you can specify the project root with the\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--project-root`), ` flag.`), mdx(\"p\", null, `For example, to install the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ntp`), ` package in the current directory, run:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install ntp\n`)), mdx(\"p\", null, `However, to install the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ntp`), ` package in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `my_project`), ` directory, run:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install ntp --project-root=my_project\n`)), mdx(\"h2\", {\n    \"id\": \"the-packages-folder\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#the-packages-folder\",\n    \"aria-label\": \"the packages folder permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `The .packages folder`), mdx(\"p\", null, `When installing a package, Jaguar creates a .packages folder in your\nproject and stores the downloaded code there. This folder should not\nbe committed to your source-code management system.`), mdx(\"p\", null, `Alternatively, one can make sure that a package is installed in the right\nplace, by telling Jaguar where the project root is located:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `jag pkg install toitlang/pkg-ntp@1 --project-root=PATH_TO_PROJECT\n`)), mdx(\"p\", null, `In our examples and tutorials we recommend to just open a folder with\nVisual Studio Code, and then to run Jaguar commands in one of its terminals.\nVisual Studio Code automatically moves the shell to the right place, thus\navoiding the need to specify the project root.`), mdx(\"p\", null, `The command to install all packages is simply jag pkg install. This takes the\npackage.yaml/lock files and downloads the same packages again.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#packages","title":"Packages","items":[{"url":"#initializing-a-project","title":"Initializing a project"},{"url":"#installing-new-packages","title":"Installing new packages","items":[{"url":"#installing-project-packages","title":"Installing project packages"},{"url":"#updating-packages","title":"Updating packages"}]},{"url":"#using-packages","title":"Using packages","items":[{"url":"#selecting-a-library","title":"Selecting a library"}]},{"url":"#project-root","title":"Project root"},{"url":"#the-packages-folder","title":"The .packages folder"}]}]}}},"pageContext":{"title":"Packages","id":"6d35a4ea-c5dc-517e-9df0-9e60b387d784"}},
    "staticQueryHashes": ["2197327828"]}