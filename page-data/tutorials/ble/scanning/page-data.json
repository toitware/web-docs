{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/ble/scanning",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"scanning\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#scanning\",\n    \"aria-label\": \"scanning permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Scanning`), mdx(\"p\", null, `To start scanning for nearby BLE devices, simply call `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `scan`), ` on the adapter's\ncentral. The provided block will be called for each scan result:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import ble\n\nmain:\n  adapter := ble.Adapter\n  central := adapter.central\n\n  central.scan: | device/ble.RemoteScannedDevice |\n    print \"Found $device\"\n`)), mdx(\"p\", null, `Here the scan will run indefinitely.`), mdx(\"h2\", {\n    \"id\": \"collecting-results\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#collecting-results\",\n    \"aria-label\": \"collecting results permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Collecting results`), mdx(\"p\", null, `A scan can be used to create a list of remote devices that match a criteria, e.g. implement a specific service. A service is identified by a UUID with a select few services\nbeing assigned by `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.bluetooth.com/specifications/assigned-numbers/\"\n  }, `Bluetooth SIG`), `. As an example, the 16-bit UUID `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `0x180F`), ` represents a battery service.`), mdx(\"p\", null, `The following example shows how to scan for 3 seconds for the addresses of remote devices that implement a battery service.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import ble\n\nBATTERY-SERVICE ::= ble.BleUuid \"180F\"\nSCAN-DURATION   ::= Duration --s=3\n\nmain:\n  adapter := ble.Adapter\n  central := adapter.central\n\n  addresses := []\n\n  central.scan --duration=SCAN-DURATION: | device/ble.RemoteScannedDevice |\n    if device.data.service-classes.contains BATTERY-SERVICE:\n      addresses.add device.address\n\n  print addresses\n`)), mdx(\"h2\", {\n    \"id\": \"example-mobile-phone-as-a-ble-device\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#example-mobile-phone-as-a-ble-device\",\n    \"aria-label\": \"example mobile phone as a ble device permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Example: Mobile phone as a BLE device`), mdx(\"p\", null, `If you want to discover and find your mobile phone as a BLE device using the above Toit program, you can\ndownload a mobile app, like nRF Connect.`), mdx(\"p\", null, `Download the app on your mobile phone for `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://apps.apple.com/us/app/nrf-connect-for-mobile/id1054362403\"\n  }, `iOS`), ` or for\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://play.google.com/store/apps/details?id=no.nordicsemi.android.mcp&hl=en\"\n  }, `Android`), `.`), mdx(\"p\", null, `The nRF Connect app allows your iOS or Android device to advertise as a BLE peripheral,\nas well as discovering nearby peripherals, like your Toit device.`), mdx(\"p\", null, `When running the above Toit program for scanning, you will be able to see your mobile phone on the list of discovered BLE devices.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#scanning","title":"Scanning","items":[{"url":"#collecting-results","title":"Collecting results"},{"url":"#example-mobile-phone-as-a-ble-device","title":"Example: Mobile phone as a BLE device"}]}]}}},"pageContext":{"title":"Scanning","id":"fa2805f4-e30d-52e0-9a6b-eeb547beac0a"}},
    "staticQueryHashes": ["2197327828"]}