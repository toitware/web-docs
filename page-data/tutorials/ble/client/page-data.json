{
    "componentChunkName": "component---src-components-layout-mdx-layout-tsx",
    "path": "/tutorials/ble/client",
    "result": {"data":{"site":{"siteMetadata":{"title":"Toit documentation"}},"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"client\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#client\",\n    \"aria-label\": \"client permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Client`), mdx(\"p\", null, `A BLE device can connect to a remote device. The result of initiating a connection is a `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `client`), `. The client can be used to navigate the\nservices implemented by the remote device as well as the service characteristics.`), mdx(\"h2\", {\n    \"id\": \"connecting-to-a-remote-device\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#connecting-to-a-remote-device\",\n    \"aria-label\": \"connecting to a remote device permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Connecting to a remote device`), mdx(\"p\", null, `In order for a BLE device to establish a connection to a remote device, the device must know the address. In most cases, the BLE device needs to discover the address which is done by scanning remote devices. The following example shows how to scan for the first remote device that implements a specific service.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import ble\n\nSCAN-DURATION ::= Duration --s=3\n\nfind-with-service central/ble.Central service/ble.BleUuid:\n  central.scan --duration=SCAN-DURATION: | device/ble.RemoteScannedDevice |\n    if device.data.service-classes.contains service:\n        return device.address\n  throw \"no device found\"\n`)), mdx(\"p\", null, `With the address available, the connection can be established. In the following example, we use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `find-with-service`), ` function to find a remote device with an advertised battery service and establish a connection to that device. Note that the device might also support services that are not explicitly advertised.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `// The battery service is defined in the Bluetooth specification.\n// Devices that implement the battery service should (but don't\n// need to) advertise it.\n// For custom services use a full 128-bit UUID.\nBATTERY-SERVICE ::= ble.BleUuid \"180F\"\n\nmain:\n  adapter := ble.Adapter\n  central := adapter.central\n\n  address := find-with-service central BATTERY-SERVICE\n  remote-device := central.connect address\n`)), mdx(\"h2\", {\n    \"id\": \"reading-service-characteristics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#reading-service-characteristics\",\n    \"aria-label\": \"reading service characteristics permalink\",\n    \"className\": \"table-of-contents-icon before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Reading service characteristics`), mdx(\"p\", null, `With the client in place, the battery service can be accessed. The battery service has a battery level characteristic which can be read out through the client.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toit\"\n  }, `import ble\n\nBATTERY-SERVICE ::= ble.BleUuid \"180F\"\nBATTERY-LEVEL   ::= ble.BleUuid \"2A19\"\n\nSCAN-DURATION   ::= Duration --s=3\n\nfind-with-service central/ble.Central service/ble.BleUuid:\n  central.scan --duration=SCAN-DURATION: | device/ble.RemoteScannedDevice |\n    if device.data.service-classes.contains service:\n        return device.address\n  throw \"no device found\"\n\nmain:\n  adapter := ble.Adapter\n  central := adapter.central\n\n  address := find-with-service central BATTERY-SERVICE\n  remote-device := central.connect address\n  // Discover the battery service.\n  services := remote-device.discover-services [BATTERY-SERVICE]\n  battery-service/ble.RemoteService := services.first\n\n  // Discover the battery level characteristic.\n  characteristics := battery-service.discover-characteristics [BATTERY-LEVEL]\n  battery-level-characteristic/ble.RemoteCharacteristic := characteristics.first\n\n  // Read the battery level which is a value between 0 and 100.\n  value := battery-level-characteristic.read\n  battery-level := value[0]\n\n  print \"Battery level of $address: $battery-level%\"\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#client","title":"Client","items":[{"url":"#connecting-to-a-remote-device","title":"Connecting to a remote device"},{"url":"#reading-service-characteristics","title":"Reading service characteristics"}]}]}}},"pageContext":{"title":"Client","id":"ac8dc62b-4b6f-551c-bc68-b7dd0d7defe3"}},
    "staticQueryHashes": ["2197327828"]}