{"version":3,"file":"974-24cb30ec4dab123778c5.js","mappings":"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","sources":["webpack://web-docs/./node_modules/codemirror/mode/jsx/jsx.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\"; // Depth means the amount of open braces in JS context, in XML\n  // context 0 means not in tag, 1 means in tag, and 2 means in tag\n  // and js block comment.\n\n  function Context(state, mode, depth, prev) {\n    this.state = state;\n    this.mode = mode;\n    this.depth = depth;\n    this.prev = prev;\n  }\n\n  function copyContext(context) {\n    return new Context(CodeMirror.copyState(context.mode, context.state), context.mode, context.depth, context.prev && copyContext(context.prev));\n  }\n\n  CodeMirror.defineMode(\"jsx\", function (config, modeConfig) {\n    var xmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      allowMissing: true,\n      multilineTagIndentPastTag: false,\n      allowMissingTagName: true\n    });\n    var jsMode = CodeMirror.getMode(config, modeConfig && modeConfig.base || \"javascript\");\n\n    function flatXMLIndent(state) {\n      var tagName = state.tagName;\n      state.tagName = null;\n      var result = xmlMode.indent(state, \"\", \"\");\n      state.tagName = tagName;\n      return result;\n    }\n\n    function token(stream, state) {\n      if (state.context.mode == xmlMode) return xmlToken(stream, state, state.context);else return jsToken(stream, state, state.context);\n    }\n\n    function xmlToken(stream, state, cx) {\n      if (cx.depth == 2) {\n        // Inside a JS /* */ comment\n        if (stream.match(/^.*?\\*\\//)) cx.depth = 1;else stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.peek() == \"{\") {\n        xmlMode.skipAttribute(cx.state);\n        var indent = flatXMLIndent(cx.state),\n            xmlContext = cx.state.context; // If JS starts on same line as tag\n\n        if (xmlContext && stream.match(/^[^>]*>\\s*$/, false)) {\n          while (xmlContext.prev && !xmlContext.startOfLine) xmlContext = xmlContext.prev; // If tag starts the line, use XML indentation level\n\n\n          if (xmlContext.startOfLine) indent -= config.indentUnit; // Else use JS indentation level\n          else if (cx.prev.state.lexical) indent = cx.prev.state.lexical.indented; // Else if inside of tag\n        } else if (cx.depth == 1) {\n          indent += config.indentUnit;\n        }\n\n        state.context = new Context(CodeMirror.startState(jsMode, indent), jsMode, 0, state.context);\n        return null;\n      }\n\n      if (cx.depth == 1) {\n        // Inside of tag\n        if (stream.peek() == \"<\") {\n          // Tag inside of tag\n          xmlMode.skipAttribute(cx.state);\n          state.context = new Context(CodeMirror.startState(xmlMode, flatXMLIndent(cx.state)), xmlMode, 0, state.context);\n          return null;\n        } else if (stream.match(\"//\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match(\"/*\")) {\n          cx.depth = 2;\n          return token(stream, state);\n        }\n      }\n\n      var style = xmlMode.token(stream, cx.state),\n          cur = stream.current(),\n          stop;\n\n      if (/\\btag\\b/.test(style)) {\n        if (/>$/.test(cur)) {\n          if (cx.state.context) cx.depth = 0;else state.context = state.context.prev;\n        } else if (/^</.test(cur)) {\n          cx.depth = 1;\n        }\n      } else if (!style && (stop = cur.indexOf(\"{\")) > -1) {\n        stream.backUp(cur.length - stop);\n      }\n\n      return style;\n    }\n\n    function jsToken(stream, state, cx) {\n      if (stream.peek() == \"<\" && !stream.match(/^<([^<>]|<[^>]*>)+,\\s*>/, false) && jsMode.expressionAllowed(stream, cx.state)) {\n        state.context = new Context(CodeMirror.startState(xmlMode, jsMode.indent(cx.state, \"\", \"\")), xmlMode, 0, state.context);\n        jsMode.skipExpression(cx.state);\n        return null;\n      }\n\n      var style = jsMode.token(stream, cx.state);\n\n      if (!style && cx.depth != null) {\n        var cur = stream.current();\n\n        if (cur == \"{\") {\n          cx.depth++;\n        } else if (cur == \"}\") {\n          if (--cx.depth == 0) state.context = state.context.prev;\n        }\n      }\n\n      return style;\n    }\n\n    return {\n      startState: function () {\n        return {\n          context: new Context(CodeMirror.startState(jsMode), jsMode)\n        };\n      },\n      copyState: function (state) {\n        return {\n          context: copyContext(state.context)\n        };\n      },\n      token: token,\n      indent: function (state, textAfter, fullLine) {\n        return state.context.mode.indent(state.context.state, textAfter, fullLine);\n      },\n      innerMode: function (state) {\n        return state.context;\n      }\n    };\n  }, \"xml\", \"javascript\");\n  CodeMirror.defineMIME(\"text/jsx\", \"jsx\");\n  CodeMirror.defineMIME(\"text/typescript-jsx\", {\n    name: \"jsx\",\n    base: {\n      name: \"javascript\",\n      typescript: true\n    }\n  });\n});"],"names":["CodeMirror","Context","state","mode","depth","prev","this","copyContext","context","copyState","defineMode","config","modeConfig","xmlMode","getMode","name","allowMissing","multilineTagIndentPastTag","allowMissingTagName","jsMode","base","flatXMLIndent","tagName","result","indent","token","stream","xmlToken","jsToken","cx","match","skipToEnd","peek","skipAttribute","xmlContext","startOfLine","indentUnit","lexical","indented","startState","stop","style","cur","current","test","indexOf","backUp","length","expressionAllowed","skipExpression","textAfter","fullLine","innerMode","defineMIME","typescript","mod"],"sourceRoot":""}