{"version":3,"file":"86-92fba42938365ea9721f.js","mappings":"0FAOG,SAAUA,GACX,aAEA,IAAIC,EAAY,CAAC,EACbC,EAAQ,cACRC,EAAMH,EAAWG,IACjBC,EAAMJ,EAAWK,OAErB,SAASC,EAAWC,GAClB,IAAIC,EAAQD,EAAIE,OAAOP,GACvB,OAAiB,GAAVM,EAAc,EAAIA,CAC3B,CAiCA,SAASE,EAAqBC,EAAIC,EAAKC,GACrC,MAAO,aAAaC,KAAKH,EAAGI,eAAeZ,EAAIS,EAAIC,KAAM,OAAS,YAAYC,KAAKD,EACrF,CAEA,SAASG,EAAQL,EAAIC,GACnB,IAAIK,EAAON,EAAGK,UACd,OAAiC,IAA1BC,EAAKC,kBAA+BD,EAAKE,UAAmBR,EAAGS,UAAUR,GAApBK,CAC9D,CAtCAjB,EAAWqB,SAASC,cAAgB,SAAUX,GAC5CA,EAAGW,eACL,EAEAtB,EAAWuB,gBAAgB,iBAAiB,SAAUC,GAC/CA,IAASA,EAAUvB,GAMxB,IALA,IAAIU,EAAKc,KACLC,EAAUC,IACVC,EAASH,KAAKI,iBACdZ,EAAO,KAEFa,EAAIF,EAAOG,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAC3C,IAAIE,EAAOJ,EAAOE,GAAGE,OACjBC,EAAKL,EAAOE,GAAGG,KACfD,EAAKnB,MAAQa,IACbO,EAAGpB,MAAQa,IAASO,EAAK9B,EAAIuB,EAAS,IAC1CA,EAAUM,EAAKnB,KAEH,MAARI,EACEN,EAAGuB,UAAUF,EAAMC,EAAIT,GAAUP,EAAO,MAC1CN,EAAGwB,YAAYH,EAAMC,EAAIT,GACzBP,EAAO,QAEQ,MAARA,EACTN,EAAGuB,UAAUF,EAAMC,EAAIT,GAEvBb,EAAGwB,YAAYH,EAAMC,EAAIT,GAE7B,CACF,IAWAxB,EAAWuB,gBAAgB,eAAe,SAAUS,EAAMC,EAAIT,GACvDA,IAASA,EAAUvB,GACxB,IAAImC,EAAOX,KACPR,EAAOD,EAAQoB,EAAMJ,GACrBK,EAAYD,EAAKE,QAAQN,EAAKnB,MAClC,GAAiB,MAAbwB,IAAqB3B,EAAqB0B,EAAMJ,EAAMK,GAA1D,CACA,IAAIE,EAAgBf,EAAQW,aAAelB,EAAKkB,YAEhD,GAAKI,EAAL,CASA,IAAIC,EAAMC,KAAKC,IAAa,GAATT,EAAGU,IAAWV,EAAGpB,MAAQmB,EAAKnB,KAAOoB,EAAGpB,KAAO,EAAIoB,EAAGpB,KAAMuB,EAAKQ,WAAa,GAC7FC,EAAyB,MAAnBrB,EAAQsB,QAAkB,IAAMtB,EAAQsB,QAC9CC,EAAavB,EAAQwB,mBAAqBhB,EAAKnB,MAAQoB,EAAGpB,KAC9DuB,EAAKa,WAAU,WACb,GAAIzB,EAAQ0B,OAAQ,CAGlB,IAFA,IAAIC,EAAa,KAERrB,EAAIE,EAAKnB,KAAMiB,EAAIU,IAAOV,EAAG,CACpC,IACIsB,GAAqC,KADrCvC,EAAOuB,EAAKE,QAAQR,IACFrB,OAAOP,GAAgBW,EAAOA,EAAKwC,MAAM,EAAG/C,EAAWO,KAE3D,MAAdsC,GAAsBA,EAAWpB,OAASqB,EAAWrB,UACvDoB,EAAaC,EAEjB,CAEA,IAAStB,EAAIE,EAAKnB,KAAMiB,EAAIU,IAAOV,EAAG,CACpC,IAAIjB,EAAOuB,EAAKE,QAAQR,GACpBwB,EAAMH,EAAWpB,QAChBgB,GAAe7C,EAAMY,KAAKD,MAC3BA,EAAKwC,MAAM,EAAGC,IAAQH,IAAYG,EAAMhD,EAAWO,IACvDuB,EAAKmB,aAAaJ,EAAaZ,EAAgBM,EAAK1C,EAAI2B,EAAG,GAAI3B,EAAI2B,EAAGwB,IACxE,CACF,MACE,IAASxB,EAAIE,EAAKnB,KAAMiB,EAAIU,IAAOV,GAC7BiB,GAAc7C,EAAMY,KAAKsB,EAAKE,QAAQR,MAAKM,EAAKmB,aAAahB,EAAgBM,EAAK1C,EAAI2B,EAAG,GAGnG,GA9BA,MANMN,EAAQgC,mBAAqBvC,EAAKuC,qBACpChC,EAAQiC,WAAY,EACpBrB,EAAKsB,aAAa1B,EAAMC,EAAIT,GAN4C,CAyC9E,IACAxB,EAAWuB,gBAAgB,gBAAgB,SAAUS,EAAMC,EAAIT,GACxDA,IAASA,EAAUvB,GACxB,IAAImC,EAAOX,KACPR,EAAOD,EAAQoB,EAAMJ,GACrB2B,EAAcnC,EAAQgC,mBAAqBvC,EAAKuC,kBAChDI,EAAYpC,EAAQqC,iBAAmB5C,EAAK4C,gBAEhD,GAAKF,GAAgBC,GAKrB,IAAI,cAAc9C,KAAKsB,EAAKrB,eAAeZ,EAAI6B,EAAKnB,KAAM,KAA1D,CACA,IAAI2B,EAAMC,KAAKC,IAAIT,EAAGpB,KAAMuB,EAAKQ,YAC7BJ,GAAOR,EAAKnB,MAAiB,GAAToB,EAAGU,IAAWzC,EAAMY,KAAKsB,EAAKE,QAAQE,OAASA,EACvE,IAAIK,EAAyB,MAAnBrB,EAAQsB,QAAkB,IAAMtB,EAAQsB,QAC9Cd,EAAKnB,KAAO2B,GAChBJ,EAAKa,WAAU,WACb,GAAyB,GAArBzB,EAAQiC,UAAoB,CAC9B,IAAIK,EAAkB5D,EAAMY,KAAKsB,EAAKE,QAAQE,IAC9CJ,EAAKmB,aAAaV,EAAMe,EAAWzD,EAAIqC,IACvCJ,EAAKmB,aAAaI,EAAcd,EAAK1C,EAAI6B,EAAKnB,KAAM,IACpD,IAAIkD,EAAOvC,EAAQwC,kBAAoB/C,EAAK+C,iBAC5C,GAAY,MAARD,EAAc,IAAK,IAAIjC,EAAIE,EAAKnB,KAAO,EAAGiB,GAAKU,IAAOV,GAAOA,GAAKU,GAAOsB,IAAiB1B,EAAKmB,aAAaQ,EAAOlB,EAAK1C,EAAI2B,EAAG,GACrI,KAAO,CACL,IAAImC,EAA4C,GAAjC7D,EAAIgC,EAAK8B,UAAU,MAAOjC,GACrCkC,GAAS/B,EAAKgC,oBAClBhC,EAAKmB,aAAaK,EAAW3B,GACzBgC,GAAU7B,EAAKiC,aAAaF,EAAQlC,EAAKG,EAAK8B,UAAU,QAASjC,GACrEG,EAAKmB,aAAaI,EAAa3B,EACjC,CACF,GAnBsE,OAJ/DR,EAAQW,aAAelB,EAAKkB,cAAqC,GAArBX,EAAQiC,WAAoBrB,EAAKD,YAAYH,EAAMC,EAAIT,EAwB5G,IACAxB,EAAWuB,gBAAgB,aAAa,SAAUS,EAAMC,EAAIT,GACrDA,IAASA,EAAUvB,GACxB,IAQIqE,EARAlC,EAAOX,KACPR,EAAOD,EAAQoB,EAAMJ,GACrBQ,EAAMC,KAAKC,IAAa,GAATT,EAAGU,IAAWV,EAAGpB,MAAQmB,EAAKnB,KAAOoB,EAAGpB,KAAOoB,EAAGpB,KAAO,EAAGuB,EAAKQ,YAChF2B,EAAQ9B,KAAKC,IAAIV,EAAKnB,KAAM2B,GAE5BgC,EAAahD,EAAQW,aAAelB,EAAKkB,YACzCsC,EAAQ,GACR5B,EAAyB,MAAnBrB,EAAQsB,QAAkB,IAAMtB,EAAQsB,QAGlDX,EACE,GAAKqC,EAAL,CAEA,IAAK,IAAI1C,EAAIyC,EAAOzC,GAAKU,IAAOV,EAAG,CACjC,IAAIjB,EAAOuB,EAAKE,QAAQR,GACpBtB,EAAQK,EAAK6D,QAAQF,GAEzB,GADIhE,GAAS,IAAM,UAAUM,KAAKsB,EAAKrB,eAAeZ,EAAI2B,EAAGtB,EAAQ,OAAMA,GAAS,IACtE,GAAVA,GAAeN,EAAMY,KAAKD,GAAO,MAAMsB,EAC3C,GAAI3B,GAAS,GAAKN,EAAMY,KAAKD,EAAKwC,MAAM,EAAG7C,IAAS,MAAM2B,EAC1DsC,EAAME,KAAK9D,EACb,CAaA,GAXAuB,EAAKa,WAAU,WACb,IAAK,IAAInB,EAAIyC,EAAOzC,GAAKU,IAAOV,EAAG,CACjC,IAAIjB,EAAO4D,EAAM3C,EAAIyC,GACjB3D,EAAMC,EAAK6D,QAAQF,GACnBI,EAAShE,EAAM4D,EAAWzC,OAC1BnB,EAAM,IACNC,EAAKwC,MAAMuB,EAAQA,EAAS/B,EAAId,SAAWc,IAAK+B,GAAU/B,EAAId,QAClEuC,GAAe,EACflC,EAAKmB,aAAa,GAAIpD,EAAI2B,EAAGlB,GAAMT,EAAI2B,EAAG8C,IAC5C,CACF,IACIN,EAAc,OAAO,CAtBS,CA0BpC,IAAIX,EAAcnC,EAAQgC,mBAAqBvC,EAAKuC,kBAChDI,EAAYpC,EAAQqC,iBAAmB5C,EAAK4C,gBAChD,IAAKF,IAAgBC,EAAW,OAAO,EACvC,IAAIG,EAAOvC,EAAQwC,kBAAoB/C,EAAK+C,iBACxCa,EAAYzC,EAAKE,QAAQiC,GACzBO,EAAOD,EAAUH,QAAQf,GAC7B,IAAa,GAATmB,EAAY,OAAO,EACvB,IAAIC,EAAUvC,GAAO+B,EAAQM,EAAYzC,EAAKE,QAAQE,GAClDwC,EAAQD,EAAQL,QAAQd,EAAWpB,GAAO+B,EAAQO,EAAOnB,EAAY5B,OAAS,GAC9EkD,EAAc9E,EAAIoE,EAAOO,EAAO,GAChCI,EAAY/E,EAAIqC,EAAKwC,EAAQ,GACjC,IAAc,GAAVA,IAAgB,UAAUlE,KAAKsB,EAAKrB,eAAekE,MAAkB,UAAUnE,KAAKsB,EAAKrB,eAAemE,KAAe9C,EAAK+C,SAASF,EAAaC,EAAW,MAAMR,QAAQd,IAAc,EAAG,OAAO,EAGvM,IAAIwB,EAAYP,EAAUQ,YAAY1B,EAAa3B,EAAKW,IACpD2C,GAAyB,GAAdF,GAAmB,EAAIP,EAAUxB,MAAM,EAAGrB,EAAKW,IAAI+B,QAAQd,EAAWwB,EAAYzB,EAAY5B,QAC7G,IAAkB,GAAdqD,IAAgC,GAAbE,GAAkBA,EAAW1B,EAAU7B,QAAUC,EAAKW,GAAI,OAAO,EAExF2C,EAAWP,EAAQL,QAAQd,EAAW3B,EAAGU,IACzC,IAAI4C,EAAkBR,EAAQ1B,MAAMpB,EAAGU,IAAI0C,YAAY1B,EAAa2B,EAAWrD,EAAGU,IAElF,OADAyC,GAAyB,GAAbE,IAAsC,GAApBC,GAAyB,EAAItD,EAAGU,GAAK4C,IAClD,GAAbD,IAAgC,GAAdF,GAAmBA,GAAanD,EAAGU,MACzDP,EAAKa,WAAU,WACbb,EAAKmB,aAAa,GAAIpD,EAAIqC,EAAKwC,GAASnC,GAAOkC,EAAQ1B,MAAM2B,EAAQnC,EAAId,OAAQiD,IAAUnC,EAAMA,EAAId,OAAS,IAAK5B,EAAIqC,EAAKwC,EAAQpB,EAAU7B,SAC9I,IAAIyD,EAAUV,EAAOnB,EAAY5B,OAGjC,GAFIc,GAAOgC,EAAUxB,MAAMmC,EAASA,EAAU3C,EAAId,SAAWc,IAAK2C,GAAW3C,EAAId,QACjFK,EAAKmB,aAAa,GAAIpD,EAAIoE,EAAOO,GAAO3E,EAAIoE,EAAOiB,IAC/CzB,EAAM,IAAK,IAAIjC,EAAIyC,EAAQ,EAAGzC,GAAKU,IAAOV,EAAG,CAC/C,IAAIjB,EAAOuB,EAAKE,QAAQR,GACpBtB,EAAQK,EAAK6D,QAAQX,GACzB,IAAc,GAAVvD,IAAeN,EAAMY,KAAKD,EAAKwC,MAAM,EAAG7C,IAA5C,CACA,IAAIiF,EAAWjF,EAAQuD,EAAKhC,OACxBc,GAAOhC,EAAKwC,MAAMoC,EAAUA,EAAW5C,EAAId,SAAWc,IAAK4C,GAAY5C,EAAId,QAC/EK,EAAKmB,aAAa,GAAIpD,EAAI2B,EAAGtB,GAAQL,EAAI2B,EAAG2D,GAHiB,CAI/D,CACF,KACO,EACT,GACF,CArNIC,CAAI,EAAQ,M","sources":["webpack://web-docs/./node_modules/codemirror/addon/comment/comment.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos,\n      cmp = CodeMirror.cmpPos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function (cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function (options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity,\n        ranges = this.listSelections(),\n        mode = null;\n\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(),\n          to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";else {\n          cm.lineComment(from, to, options);\n          mode = \"line\";\n        }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  }); // Rough heuristic to try and detect lines that are part of multi-line string\n\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line);\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode();\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos);\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function (from, to, options) {\n    if (!options) options = noOptions;\n    var self = this,\n        mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n    var commentString = options.lineComment || mode.lineComment;\n\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n    self.operation(function () {\n      if (options.indent) {\n        var baseString = null;\n\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.search(nonWS) === -1 ? line : line.slice(0, firstNonWS(line));\n\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i),\n              cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i))) self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n  CodeMirror.defineExtension(\"blockComment\", function (from, to, options) {\n    if (!options) options = noOptions;\n    var self = this,\n        mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false) self.lineComment(from, to, options);\n      return;\n    }\n\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return;\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n    self.operation(function () {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i) if (i != end || lastLineHasText) self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        var atCursor = cmp(self.getCursor(\"to\"), to) == 0,\n            empty = !self.somethingSelected();\n        self.replaceRange(endString, to);\n        if (atCursor) self.setSelection(empty ? to : self.getCursor(\"from\"), to);\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n  CodeMirror.defineExtension(\"uncomment\", function (from, to, options) {\n    if (!options) options = noOptions;\n    var self = this,\n        mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()),\n        start = Math.min(from.line, end); // Try finding line comments\n\n    var lineString = options.lineComment || mode.lineComment,\n        lines = [];\n    var pad = options.padding == null ? \" \" : options.padding,\n        didSomething;\n\n    lineComment: {\n      if (!lineString) break lineComment;\n\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n\n      self.operation(function () {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString),\n              endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    } // Try block comments\n\n\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start),\n        open = startLine.indexOf(startString);\n    if (open == -1) return false;\n    var endLine = end == start ? startLine : self.getLine(end);\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    var insideStart = Pos(start, open + 1),\n        insideEnd = Pos(end, close + 1);\n    if (close == -1 || !/comment/.test(self.getTokenTypeAt(insideStart)) || !/comment/.test(self.getTokenTypeAt(insideEnd)) || self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1) return false; // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false; // Positions of the first endString after the end of the selection, and the last startString before it.\n\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = firstEnd == -1 || almostLastStart == -1 ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n    self.operation(function () {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)), Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i),\n            found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});"],"names":["CodeMirror","noOptions","nonWS","Pos","cmp","cmpPos","firstNonWS","str","found","search","probablyInsideString","cm","pos","line","test","getTokenTypeAt","getMode","mode","useInnerComments","innerMode","getModeAt","commands","toggleComment","defineExtension","options","this","minLine","Infinity","ranges","listSelections","i","length","from","to","uncomment","lineComment","self","firstLine","getLine","commentString","end","Math","min","ch","lastLine","pad","padding","blankLines","commentBlankLines","operation","indent","baseString","whitespace","slice","cut","replaceRange","blockCommentStart","fullLines","blockComment","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","atCursor","getCursor","empty","somethingSelected","setSelection","didSomething","start","lineString","lines","indexOf","push","endPos","startLine","open","endLine","close","insideStart","insideEnd","getRange","lastStart","lastIndexOf","firstEnd","almostLastStart","openEnd","foundEnd","mod"],"sourceRoot":""}